// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Performance.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Performance.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace performance {

namespace {

const ::google::protobuf::Descriptor* mfloats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mfloats_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdoubles_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdoubles_reflection_ = NULL;
const ::google::protobuf::Descriptor* msfixed32s_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msfixed32s_reflection_ = NULL;
const ::google::protobuf::Descriptor* msfixed64s_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msfixed64s_reflection_ = NULL;
const ::google::protobuf::Descriptor* mfixed32s_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mfixed32s_reflection_ = NULL;
const ::google::protobuf::Descriptor* mfixed64s_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mfixed64s_reflection_ = NULL;
const ::google::protobuf::Descriptor* mstrings_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mstrings_reflection_ = NULL;
const ::google::protobuf::Descriptor* Performance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Performance_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Performance_2eproto() {
  protobuf_AddDesc_Performance_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Performance.proto");
  GOOGLE_CHECK(file != NULL);
  mfloats_descriptor_ = file->message_type(0);
  static const int mfloats_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mfloats, m1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mfloats, m2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mfloats, m3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mfloats, m4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mfloats, m5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mfloats, m6_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mfloats, m7_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mfloats, m8_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mfloats, m9_),
  };
  mfloats_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mfloats_descriptor_,
      mfloats::default_instance_,
      mfloats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mfloats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mfloats, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mfloats));
  mdoubles_descriptor_ = file->message_type(1);
  static const int mdoubles_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdoubles, m1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdoubles, m2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdoubles, m3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdoubles, m4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdoubles, m5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdoubles, m6_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdoubles, m7_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdoubles, m8_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdoubles, m9_),
  };
  mdoubles_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdoubles_descriptor_,
      mdoubles::default_instance_,
      mdoubles_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdoubles, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdoubles, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdoubles));
  msfixed32s_descriptor_ = file->message_type(2);
  static const int msfixed32s_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msfixed32s, m1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msfixed32s, m2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msfixed32s, m3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msfixed32s, m4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msfixed32s, m5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msfixed32s, m6_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msfixed32s, m7_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msfixed32s, m8_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msfixed32s, m9_),
  };
  msfixed32s_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msfixed32s_descriptor_,
      msfixed32s::default_instance_,
      msfixed32s_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msfixed32s, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msfixed32s, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msfixed32s));
  msfixed64s_descriptor_ = file->message_type(3);
  static const int msfixed64s_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msfixed64s, m1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msfixed64s, m2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msfixed64s, m3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msfixed64s, m4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msfixed64s, m5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msfixed64s, m6_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msfixed64s, m7_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msfixed64s, m8_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msfixed64s, m9_),
  };
  msfixed64s_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msfixed64s_descriptor_,
      msfixed64s::default_instance_,
      msfixed64s_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msfixed64s, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msfixed64s, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msfixed64s));
  mfixed32s_descriptor_ = file->message_type(4);
  static const int mfixed32s_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mfixed32s, m1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mfixed32s, m2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mfixed32s, m3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mfixed32s, m4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mfixed32s, m5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mfixed32s, m6_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mfixed32s, m7_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mfixed32s, m8_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mfixed32s, m9_),
  };
  mfixed32s_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mfixed32s_descriptor_,
      mfixed32s::default_instance_,
      mfixed32s_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mfixed32s, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mfixed32s, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mfixed32s));
  mfixed64s_descriptor_ = file->message_type(5);
  static const int mfixed64s_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mfixed64s, m1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mfixed64s, m2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mfixed64s, m3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mfixed64s, m4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mfixed64s, m5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mfixed64s, m6_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mfixed64s, m7_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mfixed64s, m8_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mfixed64s, m9_),
  };
  mfixed64s_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mfixed64s_descriptor_,
      mfixed64s::default_instance_,
      mfixed64s_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mfixed64s, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mfixed64s, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mfixed64s));
  mstrings_descriptor_ = file->message_type(6);
  static const int mstrings_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mstrings, m1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mstrings, m2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mstrings, m3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mstrings, m4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mstrings, m5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mstrings, m6_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mstrings, m7_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mstrings, m8_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mstrings, m9_),
  };
  mstrings_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mstrings_descriptor_,
      mstrings::default_instance_,
      mstrings_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mstrings, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mstrings, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mstrings));
  Performance_descriptor_ = file->message_type(7);
  static const int Performance_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Performance, mf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Performance, md_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Performance, msf3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Performance, msf6_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Performance, mf3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Performance, mf6_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Performance, mstr_),
  };
  Performance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Performance_descriptor_,
      Performance::default_instance_,
      Performance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Performance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Performance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Performance));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Performance_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mfloats_descriptor_, &mfloats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdoubles_descriptor_, &mdoubles::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msfixed32s_descriptor_, &msfixed32s::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msfixed64s_descriptor_, &msfixed64s::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mfixed32s_descriptor_, &mfixed32s::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mfixed64s_descriptor_, &mfixed64s::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mstrings_descriptor_, &mstrings::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Performance_descriptor_, &Performance::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Performance_2eproto() {
  delete mfloats::default_instance_;
  delete mfloats_reflection_;
  delete mdoubles::default_instance_;
  delete mdoubles_reflection_;
  delete msfixed32s::default_instance_;
  delete msfixed32s_reflection_;
  delete msfixed64s::default_instance_;
  delete msfixed64s_reflection_;
  delete mfixed32s::default_instance_;
  delete mfixed32s_reflection_;
  delete mfixed64s::default_instance_;
  delete mfixed64s_reflection_;
  delete mstrings::default_instance_;
  delete mstrings_reflection_;
  delete Performance::default_instance_;
  delete Performance_reflection_;
}

void protobuf_AddDesc_Performance_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021Performance.proto\022\013performance\"u\n\007mflo"
    "ats\022\n\n\002m1\030\001 \002(\002\022\n\n\002m2\030\002 \002(\002\022\n\n\002m3\030\003 \002(\002\022"
    "\n\n\002m4\030\004 \002(\002\022\n\n\002m5\030\005 \002(\002\022\n\n\002m6\030\006 \002(\002\022\n\n\002m"
    "7\030\007 \002(\002\022\n\n\002m8\030\010 \002(\002\022\n\n\002m9\030\t \002(\002\"v\n\010mdoub"
    "les\022\n\n\002m1\030\001 \002(\001\022\n\n\002m2\030\002 \002(\001\022\n\n\002m3\030\003 \002(\001\022"
    "\n\n\002m4\030\004 \002(\001\022\n\n\002m5\030\005 \002(\001\022\n\n\002m6\030\006 \002(\001\022\n\n\002m"
    "7\030\007 \002(\001\022\n\n\002m8\030\010 \002(\001\022\n\n\002m9\030\t \002(\001\"x\n\nmsfix"
    "ed32s\022\n\n\002m1\030\001 \002(\017\022\n\n\002m2\030\002 \002(\017\022\n\n\002m3\030\003 \002("
    "\017\022\n\n\002m4\030\004 \002(\017\022\n\n\002m5\030\005 \002(\017\022\n\n\002m6\030\006 \002(\017\022\n\n"
    "\002m7\030\007 \002(\017\022\n\n\002m8\030\010 \002(\017\022\n\n\002m9\030\t \002(\017\"x\n\nmsf"
    "ixed64s\022\n\n\002m1\030\001 \002(\020\022\n\n\002m2\030\002 \002(\020\022\n\n\002m3\030\003 "
    "\002(\020\022\n\n\002m4\030\004 \002(\020\022\n\n\002m5\030\005 \002(\020\022\n\n\002m6\030\006 \002(\020\022"
    "\n\n\002m7\030\007 \002(\020\022\n\n\002m8\030\010 \002(\020\022\n\n\002m9\030\t \002(\020\"w\n\tm"
    "fixed32s\022\n\n\002m1\030\001 \002(\007\022\n\n\002m2\030\002 \002(\007\022\n\n\002m3\030\003"
    " \002(\007\022\n\n\002m4\030\004 \002(\007\022\n\n\002m5\030\005 \002(\007\022\n\n\002m6\030\006 \002(\007"
    "\022\n\n\002m7\030\007 \002(\007\022\n\n\002m8\030\010 \002(\007\022\n\n\002m9\030\t \002(\007\"w\n\t"
    "mfixed64s\022\n\n\002m1\030\001 \002(\006\022\n\n\002m2\030\002 \002(\006\022\n\n\002m3\030"
    "\003 \002(\006\022\n\n\002m4\030\004 \002(\006\022\n\n\002m5\030\005 \002(\006\022\n\n\002m6\030\006 \002("
    "\006\022\n\n\002m7\030\007 \002(\006\022\n\n\002m8\030\010 \002(\006\022\n\n\002m9\030\t \002(\006\"v\n"
    "\010mstrings\022\n\n\002m1\030\001 \002(\t\022\n\n\002m2\030\002 \002(\t\022\n\n\002m3\030"
    "\003 \002(\t\022\n\n\002m4\030\004 \002(\t\022\n\n\002m5\030\005 \002(\t\022\n\n\002m6\030\006 \002("
    "\t\022\n\n\002m7\030\007 \002(\t\022\n\n\002m8\030\010 \002(\t\022\n\n\002m9\030\t \002(\t\"\217\002"
    "\n\013Performance\022 \n\002mf\030\001 \002(\0132\024.performance."
    "mfloats\022!\n\002md\030\002 \002(\0132\025.performance.mdoubl"
    "es\022%\n\004msf3\030\003 \002(\0132\027.performance.msfixed32"
    "s\022%\n\004msf6\030\004 \002(\0132\027.performance.msfixed64s"
    "\022#\n\003mf3\030\005 \002(\0132\026.performance.mfixed32s\022#\n"
    "\003mf6\030\006 \002(\0132\026.performance.mfixed64s\022#\n\004ms"
    "tr\030\007 \002(\0132\025.performance.mstrings", 1151);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Performance.proto", &protobuf_RegisterTypes);
  mfloats::default_instance_ = new mfloats();
  mdoubles::default_instance_ = new mdoubles();
  msfixed32s::default_instance_ = new msfixed32s();
  msfixed64s::default_instance_ = new msfixed64s();
  mfixed32s::default_instance_ = new mfixed32s();
  mfixed64s::default_instance_ = new mfixed64s();
  mstrings::default_instance_ = new mstrings();
  Performance::default_instance_ = new Performance();
  mfloats::default_instance_->InitAsDefaultInstance();
  mdoubles::default_instance_->InitAsDefaultInstance();
  msfixed32s::default_instance_->InitAsDefaultInstance();
  msfixed64s::default_instance_->InitAsDefaultInstance();
  mfixed32s::default_instance_->InitAsDefaultInstance();
  mfixed64s::default_instance_->InitAsDefaultInstance();
  mstrings::default_instance_->InitAsDefaultInstance();
  Performance::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Performance_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Performance_2eproto {
  StaticDescriptorInitializer_Performance_2eproto() {
    protobuf_AddDesc_Performance_2eproto();
  }
} static_descriptor_initializer_Performance_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int mfloats::kM1FieldNumber;
const int mfloats::kM2FieldNumber;
const int mfloats::kM3FieldNumber;
const int mfloats::kM4FieldNumber;
const int mfloats::kM5FieldNumber;
const int mfloats::kM6FieldNumber;
const int mfloats::kM7FieldNumber;
const int mfloats::kM8FieldNumber;
const int mfloats::kM9FieldNumber;
#endif  // !_MSC_VER

mfloats::mfloats()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mfloats::InitAsDefaultInstance() {
}

mfloats::mfloats(const mfloats& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mfloats::SharedCtor() {
  _cached_size_ = 0;
  m1_ = 0;
  m2_ = 0;
  m3_ = 0;
  m4_ = 0;
  m5_ = 0;
  m6_ = 0;
  m7_ = 0;
  m8_ = 0;
  m9_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mfloats::~mfloats() {
  SharedDtor();
}

void mfloats::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mfloats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mfloats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mfloats_descriptor_;
}

const mfloats& mfloats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Performance_2eproto();
  return *default_instance_;
}

mfloats* mfloats::default_instance_ = NULL;

mfloats* mfloats::New() const {
  return new mfloats;
}

void mfloats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m1_ = 0;
    m2_ = 0;
    m3_ = 0;
    m4_ = 0;
    m5_ = 0;
    m6_ = 0;
    m7_ = 0;
    m8_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m9_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mfloats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float m1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &m1_)));
          set_has_m1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_m2;
        break;
      }

      // required float m2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_m2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &m2_)));
          set_has_m2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_m3;
        break;
      }

      // required float m3 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_m3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &m3_)));
          set_has_m3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_m4;
        break;
      }

      // required float m4 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_m4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &m4_)));
          set_has_m4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_m5;
        break;
      }

      // required float m5 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_m5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &m5_)));
          set_has_m5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_m6;
        break;
      }

      // required float m6 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_m6:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &m6_)));
          set_has_m6();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_m7;
        break;
      }

      // required float m7 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_m7:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &m7_)));
          set_has_m7();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_m8;
        break;
      }

      // required float m8 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_m8:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &m8_)));
          set_has_m8();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_m9;
        break;
      }

      // required float m9 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_m9:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &m9_)));
          set_has_m9();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mfloats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float m1 = 1;
  if (has_m1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->m1(), output);
  }

  // required float m2 = 2;
  if (has_m2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->m2(), output);
  }

  // required float m3 = 3;
  if (has_m3()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->m3(), output);
  }

  // required float m4 = 4;
  if (has_m4()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->m4(), output);
  }

  // required float m5 = 5;
  if (has_m5()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->m5(), output);
  }

  // required float m6 = 6;
  if (has_m6()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->m6(), output);
  }

  // required float m7 = 7;
  if (has_m7()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->m7(), output);
  }

  // required float m8 = 8;
  if (has_m8()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->m8(), output);
  }

  // required float m9 = 9;
  if (has_m9()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->m9(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mfloats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float m1 = 1;
  if (has_m1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->m1(), target);
  }

  // required float m2 = 2;
  if (has_m2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->m2(), target);
  }

  // required float m3 = 3;
  if (has_m3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->m3(), target);
  }

  // required float m4 = 4;
  if (has_m4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->m4(), target);
  }

  // required float m5 = 5;
  if (has_m5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->m5(), target);
  }

  // required float m6 = 6;
  if (has_m6()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->m6(), target);
  }

  // required float m7 = 7;
  if (has_m7()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->m7(), target);
  }

  // required float m8 = 8;
  if (has_m8()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->m8(), target);
  }

  // required float m9 = 9;
  if (has_m9()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->m9(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mfloats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float m1 = 1;
    if (has_m1()) {
      total_size += 1 + 4;
    }

    // required float m2 = 2;
    if (has_m2()) {
      total_size += 1 + 4;
    }

    // required float m3 = 3;
    if (has_m3()) {
      total_size += 1 + 4;
    }

    // required float m4 = 4;
    if (has_m4()) {
      total_size += 1 + 4;
    }

    // required float m5 = 5;
    if (has_m5()) {
      total_size += 1 + 4;
    }

    // required float m6 = 6;
    if (has_m6()) {
      total_size += 1 + 4;
    }

    // required float m7 = 7;
    if (has_m7()) {
      total_size += 1 + 4;
    }

    // required float m8 = 8;
    if (has_m8()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required float m9 = 9;
    if (has_m9()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mfloats::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mfloats* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mfloats*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mfloats::MergeFrom(const mfloats& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m1()) {
      set_m1(from.m1());
    }
    if (from.has_m2()) {
      set_m2(from.m2());
    }
    if (from.has_m3()) {
      set_m3(from.m3());
    }
    if (from.has_m4()) {
      set_m4(from.m4());
    }
    if (from.has_m5()) {
      set_m5(from.m5());
    }
    if (from.has_m6()) {
      set_m6(from.m6());
    }
    if (from.has_m7()) {
      set_m7(from.m7());
    }
    if (from.has_m8()) {
      set_m8(from.m8());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m9()) {
      set_m9(from.m9());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mfloats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mfloats::CopyFrom(const mfloats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mfloats::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void mfloats::Swap(mfloats* other) {
  if (other != this) {
    std::swap(m1_, other->m1_);
    std::swap(m2_, other->m2_);
    std::swap(m3_, other->m3_);
    std::swap(m4_, other->m4_);
    std::swap(m5_, other->m5_);
    std::swap(m6_, other->m6_);
    std::swap(m7_, other->m7_);
    std::swap(m8_, other->m8_);
    std::swap(m9_, other->m9_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mfloats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mfloats_descriptor_;
  metadata.reflection = mfloats_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdoubles::kM1FieldNumber;
const int mdoubles::kM2FieldNumber;
const int mdoubles::kM3FieldNumber;
const int mdoubles::kM4FieldNumber;
const int mdoubles::kM5FieldNumber;
const int mdoubles::kM6FieldNumber;
const int mdoubles::kM7FieldNumber;
const int mdoubles::kM8FieldNumber;
const int mdoubles::kM9FieldNumber;
#endif  // !_MSC_VER

mdoubles::mdoubles()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mdoubles::InitAsDefaultInstance() {
}

mdoubles::mdoubles(const mdoubles& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mdoubles::SharedCtor() {
  _cached_size_ = 0;
  m1_ = 0;
  m2_ = 0;
  m3_ = 0;
  m4_ = 0;
  m5_ = 0;
  m6_ = 0;
  m7_ = 0;
  m8_ = 0;
  m9_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdoubles::~mdoubles() {
  SharedDtor();
}

void mdoubles::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdoubles::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdoubles::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdoubles_descriptor_;
}

const mdoubles& mdoubles::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Performance_2eproto();
  return *default_instance_;
}

mdoubles* mdoubles::default_instance_ = NULL;

mdoubles* mdoubles::New() const {
  return new mdoubles;
}

void mdoubles::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m1_ = 0;
    m2_ = 0;
    m3_ = 0;
    m4_ = 0;
    m5_ = 0;
    m6_ = 0;
    m7_ = 0;
    m8_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m9_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdoubles::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double m1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &m1_)));
          set_has_m1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_m2;
        break;
      }

      // required double m2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_m2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &m2_)));
          set_has_m2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_m3;
        break;
      }

      // required double m3 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_m3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &m3_)));
          set_has_m3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_m4;
        break;
      }

      // required double m4 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_m4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &m4_)));
          set_has_m4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_m5;
        break;
      }

      // required double m5 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_m5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &m5_)));
          set_has_m5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_m6;
        break;
      }

      // required double m6 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_m6:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &m6_)));
          set_has_m6();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_m7;
        break;
      }

      // required double m7 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_m7:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &m7_)));
          set_has_m7();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_m8;
        break;
      }

      // required double m8 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_m8:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &m8_)));
          set_has_m8();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_m9;
        break;
      }

      // required double m9 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_m9:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &m9_)));
          set_has_m9();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mdoubles::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double m1 = 1;
  if (has_m1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->m1(), output);
  }

  // required double m2 = 2;
  if (has_m2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->m2(), output);
  }

  // required double m3 = 3;
  if (has_m3()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->m3(), output);
  }

  // required double m4 = 4;
  if (has_m4()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->m4(), output);
  }

  // required double m5 = 5;
  if (has_m5()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->m5(), output);
  }

  // required double m6 = 6;
  if (has_m6()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->m6(), output);
  }

  // required double m7 = 7;
  if (has_m7()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->m7(), output);
  }

  // required double m8 = 8;
  if (has_m8()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->m8(), output);
  }

  // required double m9 = 9;
  if (has_m9()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->m9(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mdoubles::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double m1 = 1;
  if (has_m1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->m1(), target);
  }

  // required double m2 = 2;
  if (has_m2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->m2(), target);
  }

  // required double m3 = 3;
  if (has_m3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->m3(), target);
  }

  // required double m4 = 4;
  if (has_m4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->m4(), target);
  }

  // required double m5 = 5;
  if (has_m5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->m5(), target);
  }

  // required double m6 = 6;
  if (has_m6()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->m6(), target);
  }

  // required double m7 = 7;
  if (has_m7()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->m7(), target);
  }

  // required double m8 = 8;
  if (has_m8()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->m8(), target);
  }

  // required double m9 = 9;
  if (has_m9()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->m9(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mdoubles::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double m1 = 1;
    if (has_m1()) {
      total_size += 1 + 8;
    }

    // required double m2 = 2;
    if (has_m2()) {
      total_size += 1 + 8;
    }

    // required double m3 = 3;
    if (has_m3()) {
      total_size += 1 + 8;
    }

    // required double m4 = 4;
    if (has_m4()) {
      total_size += 1 + 8;
    }

    // required double m5 = 5;
    if (has_m5()) {
      total_size += 1 + 8;
    }

    // required double m6 = 6;
    if (has_m6()) {
      total_size += 1 + 8;
    }

    // required double m7 = 7;
    if (has_m7()) {
      total_size += 1 + 8;
    }

    // required double m8 = 8;
    if (has_m8()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required double m9 = 9;
    if (has_m9()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdoubles::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdoubles* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdoubles*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdoubles::MergeFrom(const mdoubles& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m1()) {
      set_m1(from.m1());
    }
    if (from.has_m2()) {
      set_m2(from.m2());
    }
    if (from.has_m3()) {
      set_m3(from.m3());
    }
    if (from.has_m4()) {
      set_m4(from.m4());
    }
    if (from.has_m5()) {
      set_m5(from.m5());
    }
    if (from.has_m6()) {
      set_m6(from.m6());
    }
    if (from.has_m7()) {
      set_m7(from.m7());
    }
    if (from.has_m8()) {
      set_m8(from.m8());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m9()) {
      set_m9(from.m9());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdoubles::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdoubles::CopyFrom(const mdoubles& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdoubles::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void mdoubles::Swap(mdoubles* other) {
  if (other != this) {
    std::swap(m1_, other->m1_);
    std::swap(m2_, other->m2_);
    std::swap(m3_, other->m3_);
    std::swap(m4_, other->m4_);
    std::swap(m5_, other->m5_);
    std::swap(m6_, other->m6_);
    std::swap(m7_, other->m7_);
    std::swap(m8_, other->m8_);
    std::swap(m9_, other->m9_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdoubles::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdoubles_descriptor_;
  metadata.reflection = mdoubles_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msfixed32s::kM1FieldNumber;
const int msfixed32s::kM2FieldNumber;
const int msfixed32s::kM3FieldNumber;
const int msfixed32s::kM4FieldNumber;
const int msfixed32s::kM5FieldNumber;
const int msfixed32s::kM6FieldNumber;
const int msfixed32s::kM7FieldNumber;
const int msfixed32s::kM8FieldNumber;
const int msfixed32s::kM9FieldNumber;
#endif  // !_MSC_VER

msfixed32s::msfixed32s()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msfixed32s::InitAsDefaultInstance() {
}

msfixed32s::msfixed32s(const msfixed32s& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msfixed32s::SharedCtor() {
  _cached_size_ = 0;
  m1_ = 0;
  m2_ = 0;
  m3_ = 0;
  m4_ = 0;
  m5_ = 0;
  m6_ = 0;
  m7_ = 0;
  m8_ = 0;
  m9_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msfixed32s::~msfixed32s() {
  SharedDtor();
}

void msfixed32s::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msfixed32s::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msfixed32s::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msfixed32s_descriptor_;
}

const msfixed32s& msfixed32s::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Performance_2eproto();
  return *default_instance_;
}

msfixed32s* msfixed32s::default_instance_ = NULL;

msfixed32s* msfixed32s::New() const {
  return new msfixed32s;
}

void msfixed32s::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m1_ = 0;
    m2_ = 0;
    m3_ = 0;
    m4_ = 0;
    m5_ = 0;
    m6_ = 0;
    m7_ = 0;
    m8_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m9_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msfixed32s::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sfixed32 m1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &m1_)));
          set_has_m1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_m2;
        break;
      }

      // required sfixed32 m2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_m2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &m2_)));
          set_has_m2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_m3;
        break;
      }

      // required sfixed32 m3 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_m3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &m3_)));
          set_has_m3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_m4;
        break;
      }

      // required sfixed32 m4 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_m4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &m4_)));
          set_has_m4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_m5;
        break;
      }

      // required sfixed32 m5 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_m5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &m5_)));
          set_has_m5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_m6;
        break;
      }

      // required sfixed32 m6 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_m6:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &m6_)));
          set_has_m6();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_m7;
        break;
      }

      // required sfixed32 m7 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_m7:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &m7_)));
          set_has_m7();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_m8;
        break;
      }

      // required sfixed32 m8 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_m8:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &m8_)));
          set_has_m8();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_m9;
        break;
      }

      // required sfixed32 m9 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_m9:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &m9_)));
          set_has_m9();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msfixed32s::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sfixed32 m1 = 1;
  if (has_m1()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(1, this->m1(), output);
  }

  // required sfixed32 m2 = 2;
  if (has_m2()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(2, this->m2(), output);
  }

  // required sfixed32 m3 = 3;
  if (has_m3()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(3, this->m3(), output);
  }

  // required sfixed32 m4 = 4;
  if (has_m4()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(4, this->m4(), output);
  }

  // required sfixed32 m5 = 5;
  if (has_m5()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(5, this->m5(), output);
  }

  // required sfixed32 m6 = 6;
  if (has_m6()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(6, this->m6(), output);
  }

  // required sfixed32 m7 = 7;
  if (has_m7()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(7, this->m7(), output);
  }

  // required sfixed32 m8 = 8;
  if (has_m8()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(8, this->m8(), output);
  }

  // required sfixed32 m9 = 9;
  if (has_m9()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(9, this->m9(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msfixed32s::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sfixed32 m1 = 1;
  if (has_m1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(1, this->m1(), target);
  }

  // required sfixed32 m2 = 2;
  if (has_m2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(2, this->m2(), target);
  }

  // required sfixed32 m3 = 3;
  if (has_m3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(3, this->m3(), target);
  }

  // required sfixed32 m4 = 4;
  if (has_m4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(4, this->m4(), target);
  }

  // required sfixed32 m5 = 5;
  if (has_m5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(5, this->m5(), target);
  }

  // required sfixed32 m6 = 6;
  if (has_m6()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(6, this->m6(), target);
  }

  // required sfixed32 m7 = 7;
  if (has_m7()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(7, this->m7(), target);
  }

  // required sfixed32 m8 = 8;
  if (has_m8()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(8, this->m8(), target);
  }

  // required sfixed32 m9 = 9;
  if (has_m9()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(9, this->m9(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msfixed32s::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sfixed32 m1 = 1;
    if (has_m1()) {
      total_size += 1 + 4;
    }

    // required sfixed32 m2 = 2;
    if (has_m2()) {
      total_size += 1 + 4;
    }

    // required sfixed32 m3 = 3;
    if (has_m3()) {
      total_size += 1 + 4;
    }

    // required sfixed32 m4 = 4;
    if (has_m4()) {
      total_size += 1 + 4;
    }

    // required sfixed32 m5 = 5;
    if (has_m5()) {
      total_size += 1 + 4;
    }

    // required sfixed32 m6 = 6;
    if (has_m6()) {
      total_size += 1 + 4;
    }

    // required sfixed32 m7 = 7;
    if (has_m7()) {
      total_size += 1 + 4;
    }

    // required sfixed32 m8 = 8;
    if (has_m8()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required sfixed32 m9 = 9;
    if (has_m9()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msfixed32s::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msfixed32s* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msfixed32s*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msfixed32s::MergeFrom(const msfixed32s& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m1()) {
      set_m1(from.m1());
    }
    if (from.has_m2()) {
      set_m2(from.m2());
    }
    if (from.has_m3()) {
      set_m3(from.m3());
    }
    if (from.has_m4()) {
      set_m4(from.m4());
    }
    if (from.has_m5()) {
      set_m5(from.m5());
    }
    if (from.has_m6()) {
      set_m6(from.m6());
    }
    if (from.has_m7()) {
      set_m7(from.m7());
    }
    if (from.has_m8()) {
      set_m8(from.m8());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m9()) {
      set_m9(from.m9());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msfixed32s::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msfixed32s::CopyFrom(const msfixed32s& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msfixed32s::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void msfixed32s::Swap(msfixed32s* other) {
  if (other != this) {
    std::swap(m1_, other->m1_);
    std::swap(m2_, other->m2_);
    std::swap(m3_, other->m3_);
    std::swap(m4_, other->m4_);
    std::swap(m5_, other->m5_);
    std::swap(m6_, other->m6_);
    std::swap(m7_, other->m7_);
    std::swap(m8_, other->m8_);
    std::swap(m9_, other->m9_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msfixed32s::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msfixed32s_descriptor_;
  metadata.reflection = msfixed32s_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msfixed64s::kM1FieldNumber;
const int msfixed64s::kM2FieldNumber;
const int msfixed64s::kM3FieldNumber;
const int msfixed64s::kM4FieldNumber;
const int msfixed64s::kM5FieldNumber;
const int msfixed64s::kM6FieldNumber;
const int msfixed64s::kM7FieldNumber;
const int msfixed64s::kM8FieldNumber;
const int msfixed64s::kM9FieldNumber;
#endif  // !_MSC_VER

msfixed64s::msfixed64s()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msfixed64s::InitAsDefaultInstance() {
}

msfixed64s::msfixed64s(const msfixed64s& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msfixed64s::SharedCtor() {
  _cached_size_ = 0;
  m1_ = GOOGLE_LONGLONG(0);
  m2_ = GOOGLE_LONGLONG(0);
  m3_ = GOOGLE_LONGLONG(0);
  m4_ = GOOGLE_LONGLONG(0);
  m5_ = GOOGLE_LONGLONG(0);
  m6_ = GOOGLE_LONGLONG(0);
  m7_ = GOOGLE_LONGLONG(0);
  m8_ = GOOGLE_LONGLONG(0);
  m9_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msfixed64s::~msfixed64s() {
  SharedDtor();
}

void msfixed64s::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msfixed64s::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msfixed64s::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msfixed64s_descriptor_;
}

const msfixed64s& msfixed64s::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Performance_2eproto();
  return *default_instance_;
}

msfixed64s* msfixed64s::default_instance_ = NULL;

msfixed64s* msfixed64s::New() const {
  return new msfixed64s;
}

void msfixed64s::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m1_ = GOOGLE_LONGLONG(0);
    m2_ = GOOGLE_LONGLONG(0);
    m3_ = GOOGLE_LONGLONG(0);
    m4_ = GOOGLE_LONGLONG(0);
    m5_ = GOOGLE_LONGLONG(0);
    m6_ = GOOGLE_LONGLONG(0);
    m7_ = GOOGLE_LONGLONG(0);
    m8_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m9_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msfixed64s::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sfixed64 m1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &m1_)));
          set_has_m1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_m2;
        break;
      }

      // required sfixed64 m2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_m2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &m2_)));
          set_has_m2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_m3;
        break;
      }

      // required sfixed64 m3 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_m3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &m3_)));
          set_has_m3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_m4;
        break;
      }

      // required sfixed64 m4 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_m4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &m4_)));
          set_has_m4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_m5;
        break;
      }

      // required sfixed64 m5 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_m5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &m5_)));
          set_has_m5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_m6;
        break;
      }

      // required sfixed64 m6 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_m6:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &m6_)));
          set_has_m6();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_m7;
        break;
      }

      // required sfixed64 m7 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_m7:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &m7_)));
          set_has_m7();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_m8;
        break;
      }

      // required sfixed64 m8 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_m8:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &m8_)));
          set_has_m8();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_m9;
        break;
      }

      // required sfixed64 m9 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_m9:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &m9_)));
          set_has_m9();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msfixed64s::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sfixed64 m1 = 1;
  if (has_m1()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(1, this->m1(), output);
  }

  // required sfixed64 m2 = 2;
  if (has_m2()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(2, this->m2(), output);
  }

  // required sfixed64 m3 = 3;
  if (has_m3()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(3, this->m3(), output);
  }

  // required sfixed64 m4 = 4;
  if (has_m4()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(4, this->m4(), output);
  }

  // required sfixed64 m5 = 5;
  if (has_m5()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(5, this->m5(), output);
  }

  // required sfixed64 m6 = 6;
  if (has_m6()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(6, this->m6(), output);
  }

  // required sfixed64 m7 = 7;
  if (has_m7()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(7, this->m7(), output);
  }

  // required sfixed64 m8 = 8;
  if (has_m8()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(8, this->m8(), output);
  }

  // required sfixed64 m9 = 9;
  if (has_m9()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(9, this->m9(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msfixed64s::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sfixed64 m1 = 1;
  if (has_m1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(1, this->m1(), target);
  }

  // required sfixed64 m2 = 2;
  if (has_m2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(2, this->m2(), target);
  }

  // required sfixed64 m3 = 3;
  if (has_m3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(3, this->m3(), target);
  }

  // required sfixed64 m4 = 4;
  if (has_m4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(4, this->m4(), target);
  }

  // required sfixed64 m5 = 5;
  if (has_m5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(5, this->m5(), target);
  }

  // required sfixed64 m6 = 6;
  if (has_m6()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(6, this->m6(), target);
  }

  // required sfixed64 m7 = 7;
  if (has_m7()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(7, this->m7(), target);
  }

  // required sfixed64 m8 = 8;
  if (has_m8()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(8, this->m8(), target);
  }

  // required sfixed64 m9 = 9;
  if (has_m9()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(9, this->m9(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msfixed64s::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sfixed64 m1 = 1;
    if (has_m1()) {
      total_size += 1 + 8;
    }

    // required sfixed64 m2 = 2;
    if (has_m2()) {
      total_size += 1 + 8;
    }

    // required sfixed64 m3 = 3;
    if (has_m3()) {
      total_size += 1 + 8;
    }

    // required sfixed64 m4 = 4;
    if (has_m4()) {
      total_size += 1 + 8;
    }

    // required sfixed64 m5 = 5;
    if (has_m5()) {
      total_size += 1 + 8;
    }

    // required sfixed64 m6 = 6;
    if (has_m6()) {
      total_size += 1 + 8;
    }

    // required sfixed64 m7 = 7;
    if (has_m7()) {
      total_size += 1 + 8;
    }

    // required sfixed64 m8 = 8;
    if (has_m8()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required sfixed64 m9 = 9;
    if (has_m9()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msfixed64s::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msfixed64s* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msfixed64s*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msfixed64s::MergeFrom(const msfixed64s& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m1()) {
      set_m1(from.m1());
    }
    if (from.has_m2()) {
      set_m2(from.m2());
    }
    if (from.has_m3()) {
      set_m3(from.m3());
    }
    if (from.has_m4()) {
      set_m4(from.m4());
    }
    if (from.has_m5()) {
      set_m5(from.m5());
    }
    if (from.has_m6()) {
      set_m6(from.m6());
    }
    if (from.has_m7()) {
      set_m7(from.m7());
    }
    if (from.has_m8()) {
      set_m8(from.m8());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m9()) {
      set_m9(from.m9());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msfixed64s::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msfixed64s::CopyFrom(const msfixed64s& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msfixed64s::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void msfixed64s::Swap(msfixed64s* other) {
  if (other != this) {
    std::swap(m1_, other->m1_);
    std::swap(m2_, other->m2_);
    std::swap(m3_, other->m3_);
    std::swap(m4_, other->m4_);
    std::swap(m5_, other->m5_);
    std::swap(m6_, other->m6_);
    std::swap(m7_, other->m7_);
    std::swap(m8_, other->m8_);
    std::swap(m9_, other->m9_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msfixed64s::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msfixed64s_descriptor_;
  metadata.reflection = msfixed64s_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mfixed32s::kM1FieldNumber;
const int mfixed32s::kM2FieldNumber;
const int mfixed32s::kM3FieldNumber;
const int mfixed32s::kM4FieldNumber;
const int mfixed32s::kM5FieldNumber;
const int mfixed32s::kM6FieldNumber;
const int mfixed32s::kM7FieldNumber;
const int mfixed32s::kM8FieldNumber;
const int mfixed32s::kM9FieldNumber;
#endif  // !_MSC_VER

mfixed32s::mfixed32s()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mfixed32s::InitAsDefaultInstance() {
}

mfixed32s::mfixed32s(const mfixed32s& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mfixed32s::SharedCtor() {
  _cached_size_ = 0;
  m1_ = 0u;
  m2_ = 0u;
  m3_ = 0u;
  m4_ = 0u;
  m5_ = 0u;
  m6_ = 0u;
  m7_ = 0u;
  m8_ = 0u;
  m9_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mfixed32s::~mfixed32s() {
  SharedDtor();
}

void mfixed32s::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mfixed32s::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mfixed32s::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mfixed32s_descriptor_;
}

const mfixed32s& mfixed32s::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Performance_2eproto();
  return *default_instance_;
}

mfixed32s* mfixed32s::default_instance_ = NULL;

mfixed32s* mfixed32s::New() const {
  return new mfixed32s;
}

void mfixed32s::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m1_ = 0u;
    m2_ = 0u;
    m3_ = 0u;
    m4_ = 0u;
    m5_ = 0u;
    m6_ = 0u;
    m7_ = 0u;
    m8_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m9_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mfixed32s::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 m1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &m1_)));
          set_has_m1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_m2;
        break;
      }

      // required fixed32 m2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_m2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &m2_)));
          set_has_m2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_m3;
        break;
      }

      // required fixed32 m3 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_m3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &m3_)));
          set_has_m3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_m4;
        break;
      }

      // required fixed32 m4 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_m4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &m4_)));
          set_has_m4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_m5;
        break;
      }

      // required fixed32 m5 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_m5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &m5_)));
          set_has_m5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_m6;
        break;
      }

      // required fixed32 m6 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_m6:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &m6_)));
          set_has_m6();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_m7;
        break;
      }

      // required fixed32 m7 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_m7:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &m7_)));
          set_has_m7();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_m8;
        break;
      }

      // required fixed32 m8 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_m8:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &m8_)));
          set_has_m8();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_m9;
        break;
      }

      // required fixed32 m9 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_m9:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &m9_)));
          set_has_m9();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mfixed32s::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 m1 = 1;
  if (has_m1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->m1(), output);
  }

  // required fixed32 m2 = 2;
  if (has_m2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->m2(), output);
  }

  // required fixed32 m3 = 3;
  if (has_m3()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->m3(), output);
  }

  // required fixed32 m4 = 4;
  if (has_m4()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->m4(), output);
  }

  // required fixed32 m5 = 5;
  if (has_m5()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->m5(), output);
  }

  // required fixed32 m6 = 6;
  if (has_m6()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(6, this->m6(), output);
  }

  // required fixed32 m7 = 7;
  if (has_m7()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(7, this->m7(), output);
  }

  // required fixed32 m8 = 8;
  if (has_m8()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(8, this->m8(), output);
  }

  // required fixed32 m9 = 9;
  if (has_m9()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(9, this->m9(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mfixed32s::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 m1 = 1;
  if (has_m1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->m1(), target);
  }

  // required fixed32 m2 = 2;
  if (has_m2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->m2(), target);
  }

  // required fixed32 m3 = 3;
  if (has_m3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->m3(), target);
  }

  // required fixed32 m4 = 4;
  if (has_m4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->m4(), target);
  }

  // required fixed32 m5 = 5;
  if (has_m5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->m5(), target);
  }

  // required fixed32 m6 = 6;
  if (has_m6()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(6, this->m6(), target);
  }

  // required fixed32 m7 = 7;
  if (has_m7()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(7, this->m7(), target);
  }

  // required fixed32 m8 = 8;
  if (has_m8()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(8, this->m8(), target);
  }

  // required fixed32 m9 = 9;
  if (has_m9()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(9, this->m9(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mfixed32s::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 m1 = 1;
    if (has_m1()) {
      total_size += 1 + 4;
    }

    // required fixed32 m2 = 2;
    if (has_m2()) {
      total_size += 1 + 4;
    }

    // required fixed32 m3 = 3;
    if (has_m3()) {
      total_size += 1 + 4;
    }

    // required fixed32 m4 = 4;
    if (has_m4()) {
      total_size += 1 + 4;
    }

    // required fixed32 m5 = 5;
    if (has_m5()) {
      total_size += 1 + 4;
    }

    // required fixed32 m6 = 6;
    if (has_m6()) {
      total_size += 1 + 4;
    }

    // required fixed32 m7 = 7;
    if (has_m7()) {
      total_size += 1 + 4;
    }

    // required fixed32 m8 = 8;
    if (has_m8()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required fixed32 m9 = 9;
    if (has_m9()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mfixed32s::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mfixed32s* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mfixed32s*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mfixed32s::MergeFrom(const mfixed32s& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m1()) {
      set_m1(from.m1());
    }
    if (from.has_m2()) {
      set_m2(from.m2());
    }
    if (from.has_m3()) {
      set_m3(from.m3());
    }
    if (from.has_m4()) {
      set_m4(from.m4());
    }
    if (from.has_m5()) {
      set_m5(from.m5());
    }
    if (from.has_m6()) {
      set_m6(from.m6());
    }
    if (from.has_m7()) {
      set_m7(from.m7());
    }
    if (from.has_m8()) {
      set_m8(from.m8());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m9()) {
      set_m9(from.m9());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mfixed32s::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mfixed32s::CopyFrom(const mfixed32s& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mfixed32s::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void mfixed32s::Swap(mfixed32s* other) {
  if (other != this) {
    std::swap(m1_, other->m1_);
    std::swap(m2_, other->m2_);
    std::swap(m3_, other->m3_);
    std::swap(m4_, other->m4_);
    std::swap(m5_, other->m5_);
    std::swap(m6_, other->m6_);
    std::swap(m7_, other->m7_);
    std::swap(m8_, other->m8_);
    std::swap(m9_, other->m9_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mfixed32s::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mfixed32s_descriptor_;
  metadata.reflection = mfixed32s_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mfixed64s::kM1FieldNumber;
const int mfixed64s::kM2FieldNumber;
const int mfixed64s::kM3FieldNumber;
const int mfixed64s::kM4FieldNumber;
const int mfixed64s::kM5FieldNumber;
const int mfixed64s::kM6FieldNumber;
const int mfixed64s::kM7FieldNumber;
const int mfixed64s::kM8FieldNumber;
const int mfixed64s::kM9FieldNumber;
#endif  // !_MSC_VER

mfixed64s::mfixed64s()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mfixed64s::InitAsDefaultInstance() {
}

mfixed64s::mfixed64s(const mfixed64s& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mfixed64s::SharedCtor() {
  _cached_size_ = 0;
  m1_ = GOOGLE_ULONGLONG(0);
  m2_ = GOOGLE_ULONGLONG(0);
  m3_ = GOOGLE_ULONGLONG(0);
  m4_ = GOOGLE_ULONGLONG(0);
  m5_ = GOOGLE_ULONGLONG(0);
  m6_ = GOOGLE_ULONGLONG(0);
  m7_ = GOOGLE_ULONGLONG(0);
  m8_ = GOOGLE_ULONGLONG(0);
  m9_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mfixed64s::~mfixed64s() {
  SharedDtor();
}

void mfixed64s::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mfixed64s::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mfixed64s::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mfixed64s_descriptor_;
}

const mfixed64s& mfixed64s::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Performance_2eproto();
  return *default_instance_;
}

mfixed64s* mfixed64s::default_instance_ = NULL;

mfixed64s* mfixed64s::New() const {
  return new mfixed64s;
}

void mfixed64s::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m1_ = GOOGLE_ULONGLONG(0);
    m2_ = GOOGLE_ULONGLONG(0);
    m3_ = GOOGLE_ULONGLONG(0);
    m4_ = GOOGLE_ULONGLONG(0);
    m5_ = GOOGLE_ULONGLONG(0);
    m6_ = GOOGLE_ULONGLONG(0);
    m7_ = GOOGLE_ULONGLONG(0);
    m8_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m9_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mfixed64s::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 m1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &m1_)));
          set_has_m1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_m2;
        break;
      }

      // required fixed64 m2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_m2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &m2_)));
          set_has_m2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_m3;
        break;
      }

      // required fixed64 m3 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_m3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &m3_)));
          set_has_m3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_m4;
        break;
      }

      // required fixed64 m4 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_m4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &m4_)));
          set_has_m4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_m5;
        break;
      }

      // required fixed64 m5 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_m5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &m5_)));
          set_has_m5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_m6;
        break;
      }

      // required fixed64 m6 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_m6:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &m6_)));
          set_has_m6();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_m7;
        break;
      }

      // required fixed64 m7 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_m7:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &m7_)));
          set_has_m7();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_m8;
        break;
      }

      // required fixed64 m8 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_m8:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &m8_)));
          set_has_m8();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_m9;
        break;
      }

      // required fixed64 m9 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_m9:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &m9_)));
          set_has_m9();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mfixed64s::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 m1 = 1;
  if (has_m1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->m1(), output);
  }

  // required fixed64 m2 = 2;
  if (has_m2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->m2(), output);
  }

  // required fixed64 m3 = 3;
  if (has_m3()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->m3(), output);
  }

  // required fixed64 m4 = 4;
  if (has_m4()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->m4(), output);
  }

  // required fixed64 m5 = 5;
  if (has_m5()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->m5(), output);
  }

  // required fixed64 m6 = 6;
  if (has_m6()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->m6(), output);
  }

  // required fixed64 m7 = 7;
  if (has_m7()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(7, this->m7(), output);
  }

  // required fixed64 m8 = 8;
  if (has_m8()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(8, this->m8(), output);
  }

  // required fixed64 m9 = 9;
  if (has_m9()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(9, this->m9(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mfixed64s::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 m1 = 1;
  if (has_m1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->m1(), target);
  }

  // required fixed64 m2 = 2;
  if (has_m2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->m2(), target);
  }

  // required fixed64 m3 = 3;
  if (has_m3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->m3(), target);
  }

  // required fixed64 m4 = 4;
  if (has_m4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->m4(), target);
  }

  // required fixed64 m5 = 5;
  if (has_m5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->m5(), target);
  }

  // required fixed64 m6 = 6;
  if (has_m6()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(6, this->m6(), target);
  }

  // required fixed64 m7 = 7;
  if (has_m7()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(7, this->m7(), target);
  }

  // required fixed64 m8 = 8;
  if (has_m8()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(8, this->m8(), target);
  }

  // required fixed64 m9 = 9;
  if (has_m9()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(9, this->m9(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mfixed64s::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 m1 = 1;
    if (has_m1()) {
      total_size += 1 + 8;
    }

    // required fixed64 m2 = 2;
    if (has_m2()) {
      total_size += 1 + 8;
    }

    // required fixed64 m3 = 3;
    if (has_m3()) {
      total_size += 1 + 8;
    }

    // required fixed64 m4 = 4;
    if (has_m4()) {
      total_size += 1 + 8;
    }

    // required fixed64 m5 = 5;
    if (has_m5()) {
      total_size += 1 + 8;
    }

    // required fixed64 m6 = 6;
    if (has_m6()) {
      total_size += 1 + 8;
    }

    // required fixed64 m7 = 7;
    if (has_m7()) {
      total_size += 1 + 8;
    }

    // required fixed64 m8 = 8;
    if (has_m8()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required fixed64 m9 = 9;
    if (has_m9()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mfixed64s::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mfixed64s* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mfixed64s*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mfixed64s::MergeFrom(const mfixed64s& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m1()) {
      set_m1(from.m1());
    }
    if (from.has_m2()) {
      set_m2(from.m2());
    }
    if (from.has_m3()) {
      set_m3(from.m3());
    }
    if (from.has_m4()) {
      set_m4(from.m4());
    }
    if (from.has_m5()) {
      set_m5(from.m5());
    }
    if (from.has_m6()) {
      set_m6(from.m6());
    }
    if (from.has_m7()) {
      set_m7(from.m7());
    }
    if (from.has_m8()) {
      set_m8(from.m8());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m9()) {
      set_m9(from.m9());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mfixed64s::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mfixed64s::CopyFrom(const mfixed64s& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mfixed64s::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void mfixed64s::Swap(mfixed64s* other) {
  if (other != this) {
    std::swap(m1_, other->m1_);
    std::swap(m2_, other->m2_);
    std::swap(m3_, other->m3_);
    std::swap(m4_, other->m4_);
    std::swap(m5_, other->m5_);
    std::swap(m6_, other->m6_);
    std::swap(m7_, other->m7_);
    std::swap(m8_, other->m8_);
    std::swap(m9_, other->m9_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mfixed64s::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mfixed64s_descriptor_;
  metadata.reflection = mfixed64s_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mstrings::kM1FieldNumber;
const int mstrings::kM2FieldNumber;
const int mstrings::kM3FieldNumber;
const int mstrings::kM4FieldNumber;
const int mstrings::kM5FieldNumber;
const int mstrings::kM6FieldNumber;
const int mstrings::kM7FieldNumber;
const int mstrings::kM8FieldNumber;
const int mstrings::kM9FieldNumber;
#endif  // !_MSC_VER

mstrings::mstrings()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mstrings::InitAsDefaultInstance() {
}

mstrings::mstrings(const mstrings& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mstrings::SharedCtor() {
  _cached_size_ = 0;
  m1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m3_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m4_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m6_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m7_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m8_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m9_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mstrings::~mstrings() {
  SharedDtor();
}

void mstrings::SharedDtor() {
  if (m1_ != &::google::protobuf::internal::kEmptyString) {
    delete m1_;
  }
  if (m2_ != &::google::protobuf::internal::kEmptyString) {
    delete m2_;
  }
  if (m3_ != &::google::protobuf::internal::kEmptyString) {
    delete m3_;
  }
  if (m4_ != &::google::protobuf::internal::kEmptyString) {
    delete m4_;
  }
  if (m5_ != &::google::protobuf::internal::kEmptyString) {
    delete m5_;
  }
  if (m6_ != &::google::protobuf::internal::kEmptyString) {
    delete m6_;
  }
  if (m7_ != &::google::protobuf::internal::kEmptyString) {
    delete m7_;
  }
  if (m8_ != &::google::protobuf::internal::kEmptyString) {
    delete m8_;
  }
  if (m9_ != &::google::protobuf::internal::kEmptyString) {
    delete m9_;
  }
  if (this != default_instance_) {
  }
}

void mstrings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mstrings::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mstrings_descriptor_;
}

const mstrings& mstrings::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Performance_2eproto();
  return *default_instance_;
}

mstrings* mstrings::default_instance_ = NULL;

mstrings* mstrings::New() const {
  return new mstrings;
}

void mstrings::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_m1()) {
      if (m1_ != &::google::protobuf::internal::kEmptyString) {
        m1_->clear();
      }
    }
    if (has_m2()) {
      if (m2_ != &::google::protobuf::internal::kEmptyString) {
        m2_->clear();
      }
    }
    if (has_m3()) {
      if (m3_ != &::google::protobuf::internal::kEmptyString) {
        m3_->clear();
      }
    }
    if (has_m4()) {
      if (m4_ != &::google::protobuf::internal::kEmptyString) {
        m4_->clear();
      }
    }
    if (has_m5()) {
      if (m5_ != &::google::protobuf::internal::kEmptyString) {
        m5_->clear();
      }
    }
    if (has_m6()) {
      if (m6_ != &::google::protobuf::internal::kEmptyString) {
        m6_->clear();
      }
    }
    if (has_m7()) {
      if (m7_ != &::google::protobuf::internal::kEmptyString) {
        m7_->clear();
      }
    }
    if (has_m8()) {
      if (m8_ != &::google::protobuf::internal::kEmptyString) {
        m8_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_m9()) {
      if (m9_ != &::google::protobuf::internal::kEmptyString) {
        m9_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mstrings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string m1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m1().data(), this->m1().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m2;
        break;
      }

      // required string m2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m2().data(), this->m2().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m3;
        break;
      }

      // required string m3 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m3()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m3().data(), this->m3().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m4;
        break;
      }

      // required string m4 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m4:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m4()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m4().data(), this->m4().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m5;
        break;
      }

      // required string m5 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m5().data(), this->m5().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m6;
        break;
      }

      // required string m6 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m6:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m6()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m6().data(), this->m6().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_m7;
        break;
      }

      // required string m7 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m7:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m7()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m7().data(), this->m7().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_m8;
        break;
      }

      // required string m8 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m8:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m8()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m8().data(), this->m8().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_m9;
        break;
      }

      // required string m9 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m9:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m9()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m9().data(), this->m9().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mstrings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string m1 = 1;
  if (has_m1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m1().data(), this->m1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->m1(), output);
  }

  // required string m2 = 2;
  if (has_m2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m2().data(), this->m2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m2(), output);
  }

  // required string m3 = 3;
  if (has_m3()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m3().data(), this->m3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->m3(), output);
  }

  // required string m4 = 4;
  if (has_m4()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m4().data(), this->m4().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->m4(), output);
  }

  // required string m5 = 5;
  if (has_m5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m5().data(), this->m5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->m5(), output);
  }

  // required string m6 = 6;
  if (has_m6()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m6().data(), this->m6().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->m6(), output);
  }

  // required string m7 = 7;
  if (has_m7()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m7().data(), this->m7().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->m7(), output);
  }

  // required string m8 = 8;
  if (has_m8()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m8().data(), this->m8().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->m8(), output);
  }

  // required string m9 = 9;
  if (has_m9()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m9().data(), this->m9().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->m9(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mstrings::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string m1 = 1;
  if (has_m1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m1().data(), this->m1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->m1(), target);
  }

  // required string m2 = 2;
  if (has_m2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m2().data(), this->m2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m2(), target);
  }

  // required string m3 = 3;
  if (has_m3()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m3().data(), this->m3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->m3(), target);
  }

  // required string m4 = 4;
  if (has_m4()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m4().data(), this->m4().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->m4(), target);
  }

  // required string m5 = 5;
  if (has_m5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m5().data(), this->m5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->m5(), target);
  }

  // required string m6 = 6;
  if (has_m6()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m6().data(), this->m6().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->m6(), target);
  }

  // required string m7 = 7;
  if (has_m7()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m7().data(), this->m7().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->m7(), target);
  }

  // required string m8 = 8;
  if (has_m8()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m8().data(), this->m8().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->m8(), target);
  }

  // required string m9 = 9;
  if (has_m9()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m9().data(), this->m9().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->m9(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mstrings::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string m1 = 1;
    if (has_m1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m1());
    }

    // required string m2 = 2;
    if (has_m2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m2());
    }

    // required string m3 = 3;
    if (has_m3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m3());
    }

    // required string m4 = 4;
    if (has_m4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m4());
    }

    // required string m5 = 5;
    if (has_m5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m5());
    }

    // required string m6 = 6;
    if (has_m6()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m6());
    }

    // required string m7 = 7;
    if (has_m7()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m7());
    }

    // required string m8 = 8;
    if (has_m8()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m8());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string m9 = 9;
    if (has_m9()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m9());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mstrings::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mstrings* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mstrings*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mstrings::MergeFrom(const mstrings& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m1()) {
      set_m1(from.m1());
    }
    if (from.has_m2()) {
      set_m2(from.m2());
    }
    if (from.has_m3()) {
      set_m3(from.m3());
    }
    if (from.has_m4()) {
      set_m4(from.m4());
    }
    if (from.has_m5()) {
      set_m5(from.m5());
    }
    if (from.has_m6()) {
      set_m6(from.m6());
    }
    if (from.has_m7()) {
      set_m7(from.m7());
    }
    if (from.has_m8()) {
      set_m8(from.m8());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m9()) {
      set_m9(from.m9());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mstrings::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mstrings::CopyFrom(const mstrings& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mstrings::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void mstrings::Swap(mstrings* other) {
  if (other != this) {
    std::swap(m1_, other->m1_);
    std::swap(m2_, other->m2_);
    std::swap(m3_, other->m3_);
    std::swap(m4_, other->m4_);
    std::swap(m5_, other->m5_);
    std::swap(m6_, other->m6_);
    std::swap(m7_, other->m7_);
    std::swap(m8_, other->m8_);
    std::swap(m9_, other->m9_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mstrings::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mstrings_descriptor_;
  metadata.reflection = mstrings_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Performance::kMfFieldNumber;
const int Performance::kMdFieldNumber;
const int Performance::kMsf3FieldNumber;
const int Performance::kMsf6FieldNumber;
const int Performance::kMf3FieldNumber;
const int Performance::kMf6FieldNumber;
const int Performance::kMstrFieldNumber;
#endif  // !_MSC_VER

Performance::Performance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Performance::InitAsDefaultInstance() {
  mf_ = const_cast< ::performance::mfloats*>(&::performance::mfloats::default_instance());
  md_ = const_cast< ::performance::mdoubles*>(&::performance::mdoubles::default_instance());
  msf3_ = const_cast< ::performance::msfixed32s*>(&::performance::msfixed32s::default_instance());
  msf6_ = const_cast< ::performance::msfixed64s*>(&::performance::msfixed64s::default_instance());
  mf3_ = const_cast< ::performance::mfixed32s*>(&::performance::mfixed32s::default_instance());
  mf6_ = const_cast< ::performance::mfixed64s*>(&::performance::mfixed64s::default_instance());
  mstr_ = const_cast< ::performance::mstrings*>(&::performance::mstrings::default_instance());
}

Performance::Performance(const Performance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Performance::SharedCtor() {
  _cached_size_ = 0;
  mf_ = NULL;
  md_ = NULL;
  msf3_ = NULL;
  msf6_ = NULL;
  mf3_ = NULL;
  mf6_ = NULL;
  mstr_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Performance::~Performance() {
  SharedDtor();
}

void Performance::SharedDtor() {
  if (this != default_instance_) {
    delete mf_;
    delete md_;
    delete msf3_;
    delete msf6_;
    delete mf3_;
    delete mf6_;
    delete mstr_;
  }
}

void Performance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Performance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Performance_descriptor_;
}

const Performance& Performance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Performance_2eproto();
  return *default_instance_;
}

Performance* Performance::default_instance_ = NULL;

Performance* Performance::New() const {
  return new Performance;
}

void Performance::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_mf()) {
      if (mf_ != NULL) mf_->::performance::mfloats::Clear();
    }
    if (has_md()) {
      if (md_ != NULL) md_->::performance::mdoubles::Clear();
    }
    if (has_msf3()) {
      if (msf3_ != NULL) msf3_->::performance::msfixed32s::Clear();
    }
    if (has_msf6()) {
      if (msf6_ != NULL) msf6_->::performance::msfixed64s::Clear();
    }
    if (has_mf3()) {
      if (mf3_ != NULL) mf3_->::performance::mfixed32s::Clear();
    }
    if (has_mf6()) {
      if (mf6_ != NULL) mf6_->::performance::mfixed64s::Clear();
    }
    if (has_mstr()) {
      if (mstr_ != NULL) mstr_->::performance::mstrings::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Performance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .performance.mfloats mf = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mf()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_md;
        break;
      }

      // required .performance.mdoubles md = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_md:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_md()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_msf3;
        break;
      }

      // required .performance.msfixed32s msf3 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msf3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msf3()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_msf6;
        break;
      }

      // required .performance.msfixed64s msf6 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msf6:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msf6()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_mf3;
        break;
      }

      // required .performance.mfixed32s mf3 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mf3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mf3()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_mf6;
        break;
      }

      // required .performance.mfixed64s mf6 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mf6:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mf6()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_mstr;
        break;
      }

      // required .performance.mstrings mstr = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mstr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mstr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Performance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .performance.mfloats mf = 1;
  if (has_mf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mf(), output);
  }

  // required .performance.mdoubles md = 2;
  if (has_md()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->md(), output);
  }

  // required .performance.msfixed32s msf3 = 3;
  if (has_msf3()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->msf3(), output);
  }

  // required .performance.msfixed64s msf6 = 4;
  if (has_msf6()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->msf6(), output);
  }

  // required .performance.mfixed32s mf3 = 5;
  if (has_mf3()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->mf3(), output);
  }

  // required .performance.mfixed64s mf6 = 6;
  if (has_mf6()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->mf6(), output);
  }

  // required .performance.mstrings mstr = 7;
  if (has_mstr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->mstr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Performance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .performance.mfloats mf = 1;
  if (has_mf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mf(), target);
  }

  // required .performance.mdoubles md = 2;
  if (has_md()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->md(), target);
  }

  // required .performance.msfixed32s msf3 = 3;
  if (has_msf3()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->msf3(), target);
  }

  // required .performance.msfixed64s msf6 = 4;
  if (has_msf6()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->msf6(), target);
  }

  // required .performance.mfixed32s mf3 = 5;
  if (has_mf3()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->mf3(), target);
  }

  // required .performance.mfixed64s mf6 = 6;
  if (has_mf6()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->mf6(), target);
  }

  // required .performance.mstrings mstr = 7;
  if (has_mstr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->mstr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Performance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .performance.mfloats mf = 1;
    if (has_mf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mf());
    }

    // required .performance.mdoubles md = 2;
    if (has_md()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->md());
    }

    // required .performance.msfixed32s msf3 = 3;
    if (has_msf3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msf3());
    }

    // required .performance.msfixed64s msf6 = 4;
    if (has_msf6()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msf6());
    }

    // required .performance.mfixed32s mf3 = 5;
    if (has_mf3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mf3());
    }

    // required .performance.mfixed64s mf6 = 6;
    if (has_mf6()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mf6());
    }

    // required .performance.mstrings mstr = 7;
    if (has_mstr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mstr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Performance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Performance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Performance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Performance::MergeFrom(const Performance& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mf()) {
      mutable_mf()->::performance::mfloats::MergeFrom(from.mf());
    }
    if (from.has_md()) {
      mutable_md()->::performance::mdoubles::MergeFrom(from.md());
    }
    if (from.has_msf3()) {
      mutable_msf3()->::performance::msfixed32s::MergeFrom(from.msf3());
    }
    if (from.has_msf6()) {
      mutable_msf6()->::performance::msfixed64s::MergeFrom(from.msf6());
    }
    if (from.has_mf3()) {
      mutable_mf3()->::performance::mfixed32s::MergeFrom(from.mf3());
    }
    if (from.has_mf6()) {
      mutable_mf6()->::performance::mfixed64s::MergeFrom(from.mf6());
    }
    if (from.has_mstr()) {
      mutable_mstr()->::performance::mstrings::MergeFrom(from.mstr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Performance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Performance::CopyFrom(const Performance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Performance::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  if (has_mf()) {
    if (!this->mf().IsInitialized()) return false;
  }
  if (has_md()) {
    if (!this->md().IsInitialized()) return false;
  }
  if (has_msf3()) {
    if (!this->msf3().IsInitialized()) return false;
  }
  if (has_msf6()) {
    if (!this->msf6().IsInitialized()) return false;
  }
  if (has_mf3()) {
    if (!this->mf3().IsInitialized()) return false;
  }
  if (has_mf6()) {
    if (!this->mf6().IsInitialized()) return false;
  }
  if (has_mstr()) {
    if (!this->mstr().IsInitialized()) return false;
  }
  return true;
}

void Performance::Swap(Performance* other) {
  if (other != this) {
    std::swap(mf_, other->mf_);
    std::swap(md_, other->md_);
    std::swap(msf3_, other->msf3_);
    std::swap(msf6_, other->msf6_);
    std::swap(mf3_, other->mf3_);
    std::swap(mf6_, other->mf6_);
    std::swap(mstr_, other->mstr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Performance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Performance_descriptor_;
  metadata.reflection = Performance_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace performance

// @@protoc_insertion_point(global_scope)
