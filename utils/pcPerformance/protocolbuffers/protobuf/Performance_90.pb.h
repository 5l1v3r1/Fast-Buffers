// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Performance_90.proto

#ifndef PROTOBUF_Performance_5f90_2eproto__INCLUDED
#define PROTOBUF_Performance_5f90_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace performance {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Performance_5f90_2eproto();
void protobuf_AssignDesc_Performance_5f90_2eproto();
void protobuf_ShutdownFile_Performance_5f90_2eproto();

class Performance;

// ===================================================================

class Performance : public ::google::protobuf::Message {
 public:
  Performance();
  virtual ~Performance();

  Performance(const Performance& from);

  inline Performance& operator=(const Performance& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Performance& default_instance();

  void Swap(Performance* other);

  // implements Message ----------------------------------------------

  Performance* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Performance& from);
  void MergeFrom(const Performance& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sfixed32 m1 = 1;
  inline bool has_m1() const;
  inline void clear_m1();
  static const int kM1FieldNumber = 1;
  inline ::google::protobuf::int32 m1() const;
  inline void set_m1(::google::protobuf::int32 value);

  // required sfixed32 m2 = 2;
  inline bool has_m2() const;
  inline void clear_m2();
  static const int kM2FieldNumber = 2;
  inline ::google::protobuf::int32 m2() const;
  inline void set_m2(::google::protobuf::int32 value);

  // required sfixed32 m3 = 3;
  inline bool has_m3() const;
  inline void clear_m3();
  static const int kM3FieldNumber = 3;
  inline ::google::protobuf::int32 m3() const;
  inline void set_m3(::google::protobuf::int32 value);

  // required sfixed32 m4 = 4;
  inline bool has_m4() const;
  inline void clear_m4();
  static const int kM4FieldNumber = 4;
  inline ::google::protobuf::int32 m4() const;
  inline void set_m4(::google::protobuf::int32 value);

  // required sfixed32 m5 = 5;
  inline bool has_m5() const;
  inline void clear_m5();
  static const int kM5FieldNumber = 5;
  inline ::google::protobuf::int32 m5() const;
  inline void set_m5(::google::protobuf::int32 value);

  // required sfixed32 m6 = 6;
  inline bool has_m6() const;
  inline void clear_m6();
  static const int kM6FieldNumber = 6;
  inline ::google::protobuf::int32 m6() const;
  inline void set_m6(::google::protobuf::int32 value);

  // required sfixed32 m7 = 7;
  inline bool has_m7() const;
  inline void clear_m7();
  static const int kM7FieldNumber = 7;
  inline ::google::protobuf::int32 m7() const;
  inline void set_m7(::google::protobuf::int32 value);

  // required sfixed32 m8 = 8;
  inline bool has_m8() const;
  inline void clear_m8();
  static const int kM8FieldNumber = 8;
  inline ::google::protobuf::int32 m8() const;
  inline void set_m8(::google::protobuf::int32 value);

  // required sfixed32 m9 = 9;
  inline bool has_m9() const;
  inline void clear_m9();
  static const int kM9FieldNumber = 9;
  inline ::google::protobuf::int32 m9() const;
  inline void set_m9(::google::protobuf::int32 value);

  // required sfixed32 m10 = 10;
  inline bool has_m10() const;
  inline void clear_m10();
  static const int kM10FieldNumber = 10;
  inline ::google::protobuf::int32 m10() const;
  inline void set_m10(::google::protobuf::int32 value);

  // required sfixed32 m11 = 11;
  inline bool has_m11() const;
  inline void clear_m11();
  static const int kM11FieldNumber = 11;
  inline ::google::protobuf::int32 m11() const;
  inline void set_m11(::google::protobuf::int32 value);

  // required sfixed32 m12 = 12;
  inline bool has_m12() const;
  inline void clear_m12();
  static const int kM12FieldNumber = 12;
  inline ::google::protobuf::int32 m12() const;
  inline void set_m12(::google::protobuf::int32 value);

  // required sfixed32 m13 = 13;
  inline bool has_m13() const;
  inline void clear_m13();
  static const int kM13FieldNumber = 13;
  inline ::google::protobuf::int32 m13() const;
  inline void set_m13(::google::protobuf::int32 value);

  // required sfixed32 m14 = 14;
  inline bool has_m14() const;
  inline void clear_m14();
  static const int kM14FieldNumber = 14;
  inline ::google::protobuf::int32 m14() const;
  inline void set_m14(::google::protobuf::int32 value);

  // required sfixed32 m15 = 15;
  inline bool has_m15() const;
  inline void clear_m15();
  static const int kM15FieldNumber = 15;
  inline ::google::protobuf::int32 m15() const;
  inline void set_m15(::google::protobuf::int32 value);

  // required sfixed32 m16 = 16;
  inline bool has_m16() const;
  inline void clear_m16();
  static const int kM16FieldNumber = 16;
  inline ::google::protobuf::int32 m16() const;
  inline void set_m16(::google::protobuf::int32 value);

  // required sfixed32 m17 = 17;
  inline bool has_m17() const;
  inline void clear_m17();
  static const int kM17FieldNumber = 17;
  inline ::google::protobuf::int32 m17() const;
  inline void set_m17(::google::protobuf::int32 value);

  // required sfixed32 m18 = 18;
  inline bool has_m18() const;
  inline void clear_m18();
  static const int kM18FieldNumber = 18;
  inline ::google::protobuf::int32 m18() const;
  inline void set_m18(::google::protobuf::int32 value);

  // required sfixed32 m19 = 19;
  inline bool has_m19() const;
  inline void clear_m19();
  static const int kM19FieldNumber = 19;
  inline ::google::protobuf::int32 m19() const;
  inline void set_m19(::google::protobuf::int32 value);

  // required sfixed32 m20 = 20;
  inline bool has_m20() const;
  inline void clear_m20();
  static const int kM20FieldNumber = 20;
  inline ::google::protobuf::int32 m20() const;
  inline void set_m20(::google::protobuf::int32 value);

  // required sfixed32 m21 = 21;
  inline bool has_m21() const;
  inline void clear_m21();
  static const int kM21FieldNumber = 21;
  inline ::google::protobuf::int32 m21() const;
  inline void set_m21(::google::protobuf::int32 value);

  // required sfixed32 m22 = 22;
  inline bool has_m22() const;
  inline void clear_m22();
  static const int kM22FieldNumber = 22;
  inline ::google::protobuf::int32 m22() const;
  inline void set_m22(::google::protobuf::int32 value);

  // required sfixed32 m23 = 23;
  inline bool has_m23() const;
  inline void clear_m23();
  static const int kM23FieldNumber = 23;
  inline ::google::protobuf::int32 m23() const;
  inline void set_m23(::google::protobuf::int32 value);

  // required sfixed32 m24 = 24;
  inline bool has_m24() const;
  inline void clear_m24();
  static const int kM24FieldNumber = 24;
  inline ::google::protobuf::int32 m24() const;
  inline void set_m24(::google::protobuf::int32 value);

  // required sfixed32 m25 = 25;
  inline bool has_m25() const;
  inline void clear_m25();
  static const int kM25FieldNumber = 25;
  inline ::google::protobuf::int32 m25() const;
  inline void set_m25(::google::protobuf::int32 value);

  // required sfixed32 m26 = 26;
  inline bool has_m26() const;
  inline void clear_m26();
  static const int kM26FieldNumber = 26;
  inline ::google::protobuf::int32 m26() const;
  inline void set_m26(::google::protobuf::int32 value);

  // required sfixed32 m27 = 27;
  inline bool has_m27() const;
  inline void clear_m27();
  static const int kM27FieldNumber = 27;
  inline ::google::protobuf::int32 m27() const;
  inline void set_m27(::google::protobuf::int32 value);

  // required sfixed32 m28 = 28;
  inline bool has_m28() const;
  inline void clear_m28();
  static const int kM28FieldNumber = 28;
  inline ::google::protobuf::int32 m28() const;
  inline void set_m28(::google::protobuf::int32 value);

  // required sfixed32 m29 = 29;
  inline bool has_m29() const;
  inline void clear_m29();
  static const int kM29FieldNumber = 29;
  inline ::google::protobuf::int32 m29() const;
  inline void set_m29(::google::protobuf::int32 value);

  // required sfixed32 m30 = 30;
  inline bool has_m30() const;
  inline void clear_m30();
  static const int kM30FieldNumber = 30;
  inline ::google::protobuf::int32 m30() const;
  inline void set_m30(::google::protobuf::int32 value);

  // required sfixed32 m31 = 31;
  inline bool has_m31() const;
  inline void clear_m31();
  static const int kM31FieldNumber = 31;
  inline ::google::protobuf::int32 m31() const;
  inline void set_m31(::google::protobuf::int32 value);

  // required sfixed32 m32 = 32;
  inline bool has_m32() const;
  inline void clear_m32();
  static const int kM32FieldNumber = 32;
  inline ::google::protobuf::int32 m32() const;
  inline void set_m32(::google::protobuf::int32 value);

  // required sfixed32 m33 = 33;
  inline bool has_m33() const;
  inline void clear_m33();
  static const int kM33FieldNumber = 33;
  inline ::google::protobuf::int32 m33() const;
  inline void set_m33(::google::protobuf::int32 value);

  // required sfixed32 m34 = 34;
  inline bool has_m34() const;
  inline void clear_m34();
  static const int kM34FieldNumber = 34;
  inline ::google::protobuf::int32 m34() const;
  inline void set_m34(::google::protobuf::int32 value);

  // required sfixed32 m35 = 35;
  inline bool has_m35() const;
  inline void clear_m35();
  static const int kM35FieldNumber = 35;
  inline ::google::protobuf::int32 m35() const;
  inline void set_m35(::google::protobuf::int32 value);

  // required sfixed32 m36 = 36;
  inline bool has_m36() const;
  inline void clear_m36();
  static const int kM36FieldNumber = 36;
  inline ::google::protobuf::int32 m36() const;
  inline void set_m36(::google::protobuf::int32 value);

  // required sfixed32 m37 = 37;
  inline bool has_m37() const;
  inline void clear_m37();
  static const int kM37FieldNumber = 37;
  inline ::google::protobuf::int32 m37() const;
  inline void set_m37(::google::protobuf::int32 value);

  // required sfixed32 m38 = 38;
  inline bool has_m38() const;
  inline void clear_m38();
  static const int kM38FieldNumber = 38;
  inline ::google::protobuf::int32 m38() const;
  inline void set_m38(::google::protobuf::int32 value);

  // required sfixed32 m39 = 39;
  inline bool has_m39() const;
  inline void clear_m39();
  static const int kM39FieldNumber = 39;
  inline ::google::protobuf::int32 m39() const;
  inline void set_m39(::google::protobuf::int32 value);

  // required sfixed32 m40 = 40;
  inline bool has_m40() const;
  inline void clear_m40();
  static const int kM40FieldNumber = 40;
  inline ::google::protobuf::int32 m40() const;
  inline void set_m40(::google::protobuf::int32 value);

  // required sfixed32 m41 = 41;
  inline bool has_m41() const;
  inline void clear_m41();
  static const int kM41FieldNumber = 41;
  inline ::google::protobuf::int32 m41() const;
  inline void set_m41(::google::protobuf::int32 value);

  // required sfixed32 m42 = 42;
  inline bool has_m42() const;
  inline void clear_m42();
  static const int kM42FieldNumber = 42;
  inline ::google::protobuf::int32 m42() const;
  inline void set_m42(::google::protobuf::int32 value);

  // required sfixed32 m43 = 43;
  inline bool has_m43() const;
  inline void clear_m43();
  static const int kM43FieldNumber = 43;
  inline ::google::protobuf::int32 m43() const;
  inline void set_m43(::google::protobuf::int32 value);

  // required sfixed32 m44 = 44;
  inline bool has_m44() const;
  inline void clear_m44();
  static const int kM44FieldNumber = 44;
  inline ::google::protobuf::int32 m44() const;
  inline void set_m44(::google::protobuf::int32 value);

  // required sfixed32 m45 = 45;
  inline bool has_m45() const;
  inline void clear_m45();
  static const int kM45FieldNumber = 45;
  inline ::google::protobuf::int32 m45() const;
  inline void set_m45(::google::protobuf::int32 value);

  // required sfixed32 m46 = 46;
  inline bool has_m46() const;
  inline void clear_m46();
  static const int kM46FieldNumber = 46;
  inline ::google::protobuf::int32 m46() const;
  inline void set_m46(::google::protobuf::int32 value);

  // required sfixed32 m47 = 47;
  inline bool has_m47() const;
  inline void clear_m47();
  static const int kM47FieldNumber = 47;
  inline ::google::protobuf::int32 m47() const;
  inline void set_m47(::google::protobuf::int32 value);

  // required sfixed32 m48 = 48;
  inline bool has_m48() const;
  inline void clear_m48();
  static const int kM48FieldNumber = 48;
  inline ::google::protobuf::int32 m48() const;
  inline void set_m48(::google::protobuf::int32 value);

  // required sfixed32 m49 = 49;
  inline bool has_m49() const;
  inline void clear_m49();
  static const int kM49FieldNumber = 49;
  inline ::google::protobuf::int32 m49() const;
  inline void set_m49(::google::protobuf::int32 value);

  // required sfixed32 m50 = 50;
  inline bool has_m50() const;
  inline void clear_m50();
  static const int kM50FieldNumber = 50;
  inline ::google::protobuf::int32 m50() const;
  inline void set_m50(::google::protobuf::int32 value);

  // required sfixed32 m51 = 51;
  inline bool has_m51() const;
  inline void clear_m51();
  static const int kM51FieldNumber = 51;
  inline ::google::protobuf::int32 m51() const;
  inline void set_m51(::google::protobuf::int32 value);

  // required sfixed32 m52 = 52;
  inline bool has_m52() const;
  inline void clear_m52();
  static const int kM52FieldNumber = 52;
  inline ::google::protobuf::int32 m52() const;
  inline void set_m52(::google::protobuf::int32 value);

  // required sfixed32 m53 = 53;
  inline bool has_m53() const;
  inline void clear_m53();
  static const int kM53FieldNumber = 53;
  inline ::google::protobuf::int32 m53() const;
  inline void set_m53(::google::protobuf::int32 value);

  // required sfixed32 m54 = 54;
  inline bool has_m54() const;
  inline void clear_m54();
  static const int kM54FieldNumber = 54;
  inline ::google::protobuf::int32 m54() const;
  inline void set_m54(::google::protobuf::int32 value);

  // required sfixed32 m55 = 55;
  inline bool has_m55() const;
  inline void clear_m55();
  static const int kM55FieldNumber = 55;
  inline ::google::protobuf::int32 m55() const;
  inline void set_m55(::google::protobuf::int32 value);

  // required sfixed32 m56 = 56;
  inline bool has_m56() const;
  inline void clear_m56();
  static const int kM56FieldNumber = 56;
  inline ::google::protobuf::int32 m56() const;
  inline void set_m56(::google::protobuf::int32 value);

  // required sfixed32 m57 = 57;
  inline bool has_m57() const;
  inline void clear_m57();
  static const int kM57FieldNumber = 57;
  inline ::google::protobuf::int32 m57() const;
  inline void set_m57(::google::protobuf::int32 value);

  // required sfixed32 m58 = 58;
  inline bool has_m58() const;
  inline void clear_m58();
  static const int kM58FieldNumber = 58;
  inline ::google::protobuf::int32 m58() const;
  inline void set_m58(::google::protobuf::int32 value);

  // required sfixed32 m59 = 59;
  inline bool has_m59() const;
  inline void clear_m59();
  static const int kM59FieldNumber = 59;
  inline ::google::protobuf::int32 m59() const;
  inline void set_m59(::google::protobuf::int32 value);

  // required sfixed32 m60 = 60;
  inline bool has_m60() const;
  inline void clear_m60();
  static const int kM60FieldNumber = 60;
  inline ::google::protobuf::int32 m60() const;
  inline void set_m60(::google::protobuf::int32 value);

  // required sfixed32 m61 = 61;
  inline bool has_m61() const;
  inline void clear_m61();
  static const int kM61FieldNumber = 61;
  inline ::google::protobuf::int32 m61() const;
  inline void set_m61(::google::protobuf::int32 value);

  // required sfixed32 m62 = 62;
  inline bool has_m62() const;
  inline void clear_m62();
  static const int kM62FieldNumber = 62;
  inline ::google::protobuf::int32 m62() const;
  inline void set_m62(::google::protobuf::int32 value);

  // required sfixed32 m63 = 63;
  inline bool has_m63() const;
  inline void clear_m63();
  static const int kM63FieldNumber = 63;
  inline ::google::protobuf::int32 m63() const;
  inline void set_m63(::google::protobuf::int32 value);

  // required sfixed32 m64 = 64;
  inline bool has_m64() const;
  inline void clear_m64();
  static const int kM64FieldNumber = 64;
  inline ::google::protobuf::int32 m64() const;
  inline void set_m64(::google::protobuf::int32 value);

  // required sfixed32 m65 = 65;
  inline bool has_m65() const;
  inline void clear_m65();
  static const int kM65FieldNumber = 65;
  inline ::google::protobuf::int32 m65() const;
  inline void set_m65(::google::protobuf::int32 value);

  // required sfixed32 m66 = 66;
  inline bool has_m66() const;
  inline void clear_m66();
  static const int kM66FieldNumber = 66;
  inline ::google::protobuf::int32 m66() const;
  inline void set_m66(::google::protobuf::int32 value);

  // required sfixed32 m67 = 67;
  inline bool has_m67() const;
  inline void clear_m67();
  static const int kM67FieldNumber = 67;
  inline ::google::protobuf::int32 m67() const;
  inline void set_m67(::google::protobuf::int32 value);

  // required sfixed32 m68 = 68;
  inline bool has_m68() const;
  inline void clear_m68();
  static const int kM68FieldNumber = 68;
  inline ::google::protobuf::int32 m68() const;
  inline void set_m68(::google::protobuf::int32 value);

  // required sfixed32 m69 = 69;
  inline bool has_m69() const;
  inline void clear_m69();
  static const int kM69FieldNumber = 69;
  inline ::google::protobuf::int32 m69() const;
  inline void set_m69(::google::protobuf::int32 value);

  // required sfixed32 m70 = 70;
  inline bool has_m70() const;
  inline void clear_m70();
  static const int kM70FieldNumber = 70;
  inline ::google::protobuf::int32 m70() const;
  inline void set_m70(::google::protobuf::int32 value);

  // required sfixed32 m71 = 71;
  inline bool has_m71() const;
  inline void clear_m71();
  static const int kM71FieldNumber = 71;
  inline ::google::protobuf::int32 m71() const;
  inline void set_m71(::google::protobuf::int32 value);

  // required sfixed32 m72 = 72;
  inline bool has_m72() const;
  inline void clear_m72();
  static const int kM72FieldNumber = 72;
  inline ::google::protobuf::int32 m72() const;
  inline void set_m72(::google::protobuf::int32 value);

  // required sfixed32 m73 = 73;
  inline bool has_m73() const;
  inline void clear_m73();
  static const int kM73FieldNumber = 73;
  inline ::google::protobuf::int32 m73() const;
  inline void set_m73(::google::protobuf::int32 value);

  // required sfixed32 m74 = 74;
  inline bool has_m74() const;
  inline void clear_m74();
  static const int kM74FieldNumber = 74;
  inline ::google::protobuf::int32 m74() const;
  inline void set_m74(::google::protobuf::int32 value);

  // required sfixed32 m75 = 75;
  inline bool has_m75() const;
  inline void clear_m75();
  static const int kM75FieldNumber = 75;
  inline ::google::protobuf::int32 m75() const;
  inline void set_m75(::google::protobuf::int32 value);

  // required sfixed32 m76 = 76;
  inline bool has_m76() const;
  inline void clear_m76();
  static const int kM76FieldNumber = 76;
  inline ::google::protobuf::int32 m76() const;
  inline void set_m76(::google::protobuf::int32 value);

  // required sfixed32 m77 = 77;
  inline bool has_m77() const;
  inline void clear_m77();
  static const int kM77FieldNumber = 77;
  inline ::google::protobuf::int32 m77() const;
  inline void set_m77(::google::protobuf::int32 value);

  // required sfixed32 m78 = 78;
  inline bool has_m78() const;
  inline void clear_m78();
  static const int kM78FieldNumber = 78;
  inline ::google::protobuf::int32 m78() const;
  inline void set_m78(::google::protobuf::int32 value);

  // required sfixed32 m79 = 79;
  inline bool has_m79() const;
  inline void clear_m79();
  static const int kM79FieldNumber = 79;
  inline ::google::protobuf::int32 m79() const;
  inline void set_m79(::google::protobuf::int32 value);

  // required sfixed32 m80 = 80;
  inline bool has_m80() const;
  inline void clear_m80();
  static const int kM80FieldNumber = 80;
  inline ::google::protobuf::int32 m80() const;
  inline void set_m80(::google::protobuf::int32 value);

  // required sfixed32 m81 = 81;
  inline bool has_m81() const;
  inline void clear_m81();
  static const int kM81FieldNumber = 81;
  inline ::google::protobuf::int32 m81() const;
  inline void set_m81(::google::protobuf::int32 value);

  // required sfixed32 m82 = 82;
  inline bool has_m82() const;
  inline void clear_m82();
  static const int kM82FieldNumber = 82;
  inline ::google::protobuf::int32 m82() const;
  inline void set_m82(::google::protobuf::int32 value);

  // required sfixed32 m83 = 83;
  inline bool has_m83() const;
  inline void clear_m83();
  static const int kM83FieldNumber = 83;
  inline ::google::protobuf::int32 m83() const;
  inline void set_m83(::google::protobuf::int32 value);

  // required sfixed32 m84 = 84;
  inline bool has_m84() const;
  inline void clear_m84();
  static const int kM84FieldNumber = 84;
  inline ::google::protobuf::int32 m84() const;
  inline void set_m84(::google::protobuf::int32 value);

  // required sfixed32 m85 = 85;
  inline bool has_m85() const;
  inline void clear_m85();
  static const int kM85FieldNumber = 85;
  inline ::google::protobuf::int32 m85() const;
  inline void set_m85(::google::protobuf::int32 value);

  // required sfixed32 m86 = 86;
  inline bool has_m86() const;
  inline void clear_m86();
  static const int kM86FieldNumber = 86;
  inline ::google::protobuf::int32 m86() const;
  inline void set_m86(::google::protobuf::int32 value);

  // required sfixed32 m87 = 87;
  inline bool has_m87() const;
  inline void clear_m87();
  static const int kM87FieldNumber = 87;
  inline ::google::protobuf::int32 m87() const;
  inline void set_m87(::google::protobuf::int32 value);

  // required sfixed32 m88 = 88;
  inline bool has_m88() const;
  inline void clear_m88();
  static const int kM88FieldNumber = 88;
  inline ::google::protobuf::int32 m88() const;
  inline void set_m88(::google::protobuf::int32 value);

  // required sfixed32 m89 = 89;
  inline bool has_m89() const;
  inline void clear_m89();
  static const int kM89FieldNumber = 89;
  inline ::google::protobuf::int32 m89() const;
  inline void set_m89(::google::protobuf::int32 value);

  // required sfixed32 m90 = 90;
  inline bool has_m90() const;
  inline void clear_m90();
  static const int kM90FieldNumber = 90;
  inline ::google::protobuf::int32 m90() const;
  inline void set_m90(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:performance.Performance)
 private:
  inline void set_has_m1();
  inline void clear_has_m1();
  inline void set_has_m2();
  inline void clear_has_m2();
  inline void set_has_m3();
  inline void clear_has_m3();
  inline void set_has_m4();
  inline void clear_has_m4();
  inline void set_has_m5();
  inline void clear_has_m5();
  inline void set_has_m6();
  inline void clear_has_m6();
  inline void set_has_m7();
  inline void clear_has_m7();
  inline void set_has_m8();
  inline void clear_has_m8();
  inline void set_has_m9();
  inline void clear_has_m9();
  inline void set_has_m10();
  inline void clear_has_m10();
  inline void set_has_m11();
  inline void clear_has_m11();
  inline void set_has_m12();
  inline void clear_has_m12();
  inline void set_has_m13();
  inline void clear_has_m13();
  inline void set_has_m14();
  inline void clear_has_m14();
  inline void set_has_m15();
  inline void clear_has_m15();
  inline void set_has_m16();
  inline void clear_has_m16();
  inline void set_has_m17();
  inline void clear_has_m17();
  inline void set_has_m18();
  inline void clear_has_m18();
  inline void set_has_m19();
  inline void clear_has_m19();
  inline void set_has_m20();
  inline void clear_has_m20();
  inline void set_has_m21();
  inline void clear_has_m21();
  inline void set_has_m22();
  inline void clear_has_m22();
  inline void set_has_m23();
  inline void clear_has_m23();
  inline void set_has_m24();
  inline void clear_has_m24();
  inline void set_has_m25();
  inline void clear_has_m25();
  inline void set_has_m26();
  inline void clear_has_m26();
  inline void set_has_m27();
  inline void clear_has_m27();
  inline void set_has_m28();
  inline void clear_has_m28();
  inline void set_has_m29();
  inline void clear_has_m29();
  inline void set_has_m30();
  inline void clear_has_m30();
  inline void set_has_m31();
  inline void clear_has_m31();
  inline void set_has_m32();
  inline void clear_has_m32();
  inline void set_has_m33();
  inline void clear_has_m33();
  inline void set_has_m34();
  inline void clear_has_m34();
  inline void set_has_m35();
  inline void clear_has_m35();
  inline void set_has_m36();
  inline void clear_has_m36();
  inline void set_has_m37();
  inline void clear_has_m37();
  inline void set_has_m38();
  inline void clear_has_m38();
  inline void set_has_m39();
  inline void clear_has_m39();
  inline void set_has_m40();
  inline void clear_has_m40();
  inline void set_has_m41();
  inline void clear_has_m41();
  inline void set_has_m42();
  inline void clear_has_m42();
  inline void set_has_m43();
  inline void clear_has_m43();
  inline void set_has_m44();
  inline void clear_has_m44();
  inline void set_has_m45();
  inline void clear_has_m45();
  inline void set_has_m46();
  inline void clear_has_m46();
  inline void set_has_m47();
  inline void clear_has_m47();
  inline void set_has_m48();
  inline void clear_has_m48();
  inline void set_has_m49();
  inline void clear_has_m49();
  inline void set_has_m50();
  inline void clear_has_m50();
  inline void set_has_m51();
  inline void clear_has_m51();
  inline void set_has_m52();
  inline void clear_has_m52();
  inline void set_has_m53();
  inline void clear_has_m53();
  inline void set_has_m54();
  inline void clear_has_m54();
  inline void set_has_m55();
  inline void clear_has_m55();
  inline void set_has_m56();
  inline void clear_has_m56();
  inline void set_has_m57();
  inline void clear_has_m57();
  inline void set_has_m58();
  inline void clear_has_m58();
  inline void set_has_m59();
  inline void clear_has_m59();
  inline void set_has_m60();
  inline void clear_has_m60();
  inline void set_has_m61();
  inline void clear_has_m61();
  inline void set_has_m62();
  inline void clear_has_m62();
  inline void set_has_m63();
  inline void clear_has_m63();
  inline void set_has_m64();
  inline void clear_has_m64();
  inline void set_has_m65();
  inline void clear_has_m65();
  inline void set_has_m66();
  inline void clear_has_m66();
  inline void set_has_m67();
  inline void clear_has_m67();
  inline void set_has_m68();
  inline void clear_has_m68();
  inline void set_has_m69();
  inline void clear_has_m69();
  inline void set_has_m70();
  inline void clear_has_m70();
  inline void set_has_m71();
  inline void clear_has_m71();
  inline void set_has_m72();
  inline void clear_has_m72();
  inline void set_has_m73();
  inline void clear_has_m73();
  inline void set_has_m74();
  inline void clear_has_m74();
  inline void set_has_m75();
  inline void clear_has_m75();
  inline void set_has_m76();
  inline void clear_has_m76();
  inline void set_has_m77();
  inline void clear_has_m77();
  inline void set_has_m78();
  inline void clear_has_m78();
  inline void set_has_m79();
  inline void clear_has_m79();
  inline void set_has_m80();
  inline void clear_has_m80();
  inline void set_has_m81();
  inline void clear_has_m81();
  inline void set_has_m82();
  inline void clear_has_m82();
  inline void set_has_m83();
  inline void clear_has_m83();
  inline void set_has_m84();
  inline void clear_has_m84();
  inline void set_has_m85();
  inline void clear_has_m85();
  inline void set_has_m86();
  inline void clear_has_m86();
  inline void set_has_m87();
  inline void clear_has_m87();
  inline void set_has_m88();
  inline void clear_has_m88();
  inline void set_has_m89();
  inline void clear_has_m89();
  inline void set_has_m90();
  inline void clear_has_m90();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m1_;
  ::google::protobuf::int32 m2_;
  ::google::protobuf::int32 m3_;
  ::google::protobuf::int32 m4_;
  ::google::protobuf::int32 m5_;
  ::google::protobuf::int32 m6_;
  ::google::protobuf::int32 m7_;
  ::google::protobuf::int32 m8_;
  ::google::protobuf::int32 m9_;
  ::google::protobuf::int32 m10_;
  ::google::protobuf::int32 m11_;
  ::google::protobuf::int32 m12_;
  ::google::protobuf::int32 m13_;
  ::google::protobuf::int32 m14_;
  ::google::protobuf::int32 m15_;
  ::google::protobuf::int32 m16_;
  ::google::protobuf::int32 m17_;
  ::google::protobuf::int32 m18_;
  ::google::protobuf::int32 m19_;
  ::google::protobuf::int32 m20_;
  ::google::protobuf::int32 m21_;
  ::google::protobuf::int32 m22_;
  ::google::protobuf::int32 m23_;
  ::google::protobuf::int32 m24_;
  ::google::protobuf::int32 m25_;
  ::google::protobuf::int32 m26_;
  ::google::protobuf::int32 m27_;
  ::google::protobuf::int32 m28_;
  ::google::protobuf::int32 m29_;
  ::google::protobuf::int32 m30_;
  ::google::protobuf::int32 m31_;
  ::google::protobuf::int32 m32_;
  ::google::protobuf::int32 m33_;
  ::google::protobuf::int32 m34_;
  ::google::protobuf::int32 m35_;
  ::google::protobuf::int32 m36_;
  ::google::protobuf::int32 m37_;
  ::google::protobuf::int32 m38_;
  ::google::protobuf::int32 m39_;
  ::google::protobuf::int32 m40_;
  ::google::protobuf::int32 m41_;
  ::google::protobuf::int32 m42_;
  ::google::protobuf::int32 m43_;
  ::google::protobuf::int32 m44_;
  ::google::protobuf::int32 m45_;
  ::google::protobuf::int32 m46_;
  ::google::protobuf::int32 m47_;
  ::google::protobuf::int32 m48_;
  ::google::protobuf::int32 m49_;
  ::google::protobuf::int32 m50_;
  ::google::protobuf::int32 m51_;
  ::google::protobuf::int32 m52_;
  ::google::protobuf::int32 m53_;
  ::google::protobuf::int32 m54_;
  ::google::protobuf::int32 m55_;
  ::google::protobuf::int32 m56_;
  ::google::protobuf::int32 m57_;
  ::google::protobuf::int32 m58_;
  ::google::protobuf::int32 m59_;
  ::google::protobuf::int32 m60_;
  ::google::protobuf::int32 m61_;
  ::google::protobuf::int32 m62_;
  ::google::protobuf::int32 m63_;
  ::google::protobuf::int32 m64_;
  ::google::protobuf::int32 m65_;
  ::google::protobuf::int32 m66_;
  ::google::protobuf::int32 m67_;
  ::google::protobuf::int32 m68_;
  ::google::protobuf::int32 m69_;
  ::google::protobuf::int32 m70_;
  ::google::protobuf::int32 m71_;
  ::google::protobuf::int32 m72_;
  ::google::protobuf::int32 m73_;
  ::google::protobuf::int32 m74_;
  ::google::protobuf::int32 m75_;
  ::google::protobuf::int32 m76_;
  ::google::protobuf::int32 m77_;
  ::google::protobuf::int32 m78_;
  ::google::protobuf::int32 m79_;
  ::google::protobuf::int32 m80_;
  ::google::protobuf::int32 m81_;
  ::google::protobuf::int32 m82_;
  ::google::protobuf::int32 m83_;
  ::google::protobuf::int32 m84_;
  ::google::protobuf::int32 m85_;
  ::google::protobuf::int32 m86_;
  ::google::protobuf::int32 m87_;
  ::google::protobuf::int32 m88_;
  ::google::protobuf::int32 m89_;
  ::google::protobuf::int32 m90_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(90 + 31) / 32];

  friend void  protobuf_AddDesc_Performance_5f90_2eproto();
  friend void protobuf_AssignDesc_Performance_5f90_2eproto();
  friend void protobuf_ShutdownFile_Performance_5f90_2eproto();

  void InitAsDefaultInstance();
  static Performance* default_instance_;
};
// ===================================================================


// ===================================================================

// Performance

// required sfixed32 m1 = 1;
inline bool Performance::has_m1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Performance::set_has_m1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Performance::clear_has_m1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Performance::clear_m1() {
  m1_ = 0;
  clear_has_m1();
}
inline ::google::protobuf::int32 Performance::m1() const {
  return m1_;
}
inline void Performance::set_m1(::google::protobuf::int32 value) {
  set_has_m1();
  m1_ = value;
}

// required sfixed32 m2 = 2;
inline bool Performance::has_m2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Performance::set_has_m2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Performance::clear_has_m2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Performance::clear_m2() {
  m2_ = 0;
  clear_has_m2();
}
inline ::google::protobuf::int32 Performance::m2() const {
  return m2_;
}
inline void Performance::set_m2(::google::protobuf::int32 value) {
  set_has_m2();
  m2_ = value;
}

// required sfixed32 m3 = 3;
inline bool Performance::has_m3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Performance::set_has_m3() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Performance::clear_has_m3() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Performance::clear_m3() {
  m3_ = 0;
  clear_has_m3();
}
inline ::google::protobuf::int32 Performance::m3() const {
  return m3_;
}
inline void Performance::set_m3(::google::protobuf::int32 value) {
  set_has_m3();
  m3_ = value;
}

// required sfixed32 m4 = 4;
inline bool Performance::has_m4() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Performance::set_has_m4() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Performance::clear_has_m4() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Performance::clear_m4() {
  m4_ = 0;
  clear_has_m4();
}
inline ::google::protobuf::int32 Performance::m4() const {
  return m4_;
}
inline void Performance::set_m4(::google::protobuf::int32 value) {
  set_has_m4();
  m4_ = value;
}

// required sfixed32 m5 = 5;
inline bool Performance::has_m5() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Performance::set_has_m5() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Performance::clear_has_m5() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Performance::clear_m5() {
  m5_ = 0;
  clear_has_m5();
}
inline ::google::protobuf::int32 Performance::m5() const {
  return m5_;
}
inline void Performance::set_m5(::google::protobuf::int32 value) {
  set_has_m5();
  m5_ = value;
}

// required sfixed32 m6 = 6;
inline bool Performance::has_m6() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Performance::set_has_m6() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Performance::clear_has_m6() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Performance::clear_m6() {
  m6_ = 0;
  clear_has_m6();
}
inline ::google::protobuf::int32 Performance::m6() const {
  return m6_;
}
inline void Performance::set_m6(::google::protobuf::int32 value) {
  set_has_m6();
  m6_ = value;
}

// required sfixed32 m7 = 7;
inline bool Performance::has_m7() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Performance::set_has_m7() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Performance::clear_has_m7() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Performance::clear_m7() {
  m7_ = 0;
  clear_has_m7();
}
inline ::google::protobuf::int32 Performance::m7() const {
  return m7_;
}
inline void Performance::set_m7(::google::protobuf::int32 value) {
  set_has_m7();
  m7_ = value;
}

// required sfixed32 m8 = 8;
inline bool Performance::has_m8() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Performance::set_has_m8() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Performance::clear_has_m8() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Performance::clear_m8() {
  m8_ = 0;
  clear_has_m8();
}
inline ::google::protobuf::int32 Performance::m8() const {
  return m8_;
}
inline void Performance::set_m8(::google::protobuf::int32 value) {
  set_has_m8();
  m8_ = value;
}

// required sfixed32 m9 = 9;
inline bool Performance::has_m9() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Performance::set_has_m9() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Performance::clear_has_m9() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Performance::clear_m9() {
  m9_ = 0;
  clear_has_m9();
}
inline ::google::protobuf::int32 Performance::m9() const {
  return m9_;
}
inline void Performance::set_m9(::google::protobuf::int32 value) {
  set_has_m9();
  m9_ = value;
}

// required sfixed32 m10 = 10;
inline bool Performance::has_m10() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Performance::set_has_m10() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Performance::clear_has_m10() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Performance::clear_m10() {
  m10_ = 0;
  clear_has_m10();
}
inline ::google::protobuf::int32 Performance::m10() const {
  return m10_;
}
inline void Performance::set_m10(::google::protobuf::int32 value) {
  set_has_m10();
  m10_ = value;
}

// required sfixed32 m11 = 11;
inline bool Performance::has_m11() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Performance::set_has_m11() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Performance::clear_has_m11() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Performance::clear_m11() {
  m11_ = 0;
  clear_has_m11();
}
inline ::google::protobuf::int32 Performance::m11() const {
  return m11_;
}
inline void Performance::set_m11(::google::protobuf::int32 value) {
  set_has_m11();
  m11_ = value;
}

// required sfixed32 m12 = 12;
inline bool Performance::has_m12() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Performance::set_has_m12() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Performance::clear_has_m12() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Performance::clear_m12() {
  m12_ = 0;
  clear_has_m12();
}
inline ::google::protobuf::int32 Performance::m12() const {
  return m12_;
}
inline void Performance::set_m12(::google::protobuf::int32 value) {
  set_has_m12();
  m12_ = value;
}

// required sfixed32 m13 = 13;
inline bool Performance::has_m13() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Performance::set_has_m13() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Performance::clear_has_m13() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Performance::clear_m13() {
  m13_ = 0;
  clear_has_m13();
}
inline ::google::protobuf::int32 Performance::m13() const {
  return m13_;
}
inline void Performance::set_m13(::google::protobuf::int32 value) {
  set_has_m13();
  m13_ = value;
}

// required sfixed32 m14 = 14;
inline bool Performance::has_m14() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Performance::set_has_m14() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Performance::clear_has_m14() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Performance::clear_m14() {
  m14_ = 0;
  clear_has_m14();
}
inline ::google::protobuf::int32 Performance::m14() const {
  return m14_;
}
inline void Performance::set_m14(::google::protobuf::int32 value) {
  set_has_m14();
  m14_ = value;
}

// required sfixed32 m15 = 15;
inline bool Performance::has_m15() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Performance::set_has_m15() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Performance::clear_has_m15() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Performance::clear_m15() {
  m15_ = 0;
  clear_has_m15();
}
inline ::google::protobuf::int32 Performance::m15() const {
  return m15_;
}
inline void Performance::set_m15(::google::protobuf::int32 value) {
  set_has_m15();
  m15_ = value;
}

// required sfixed32 m16 = 16;
inline bool Performance::has_m16() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Performance::set_has_m16() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Performance::clear_has_m16() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Performance::clear_m16() {
  m16_ = 0;
  clear_has_m16();
}
inline ::google::protobuf::int32 Performance::m16() const {
  return m16_;
}
inline void Performance::set_m16(::google::protobuf::int32 value) {
  set_has_m16();
  m16_ = value;
}

// required sfixed32 m17 = 17;
inline bool Performance::has_m17() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Performance::set_has_m17() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Performance::clear_has_m17() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Performance::clear_m17() {
  m17_ = 0;
  clear_has_m17();
}
inline ::google::protobuf::int32 Performance::m17() const {
  return m17_;
}
inline void Performance::set_m17(::google::protobuf::int32 value) {
  set_has_m17();
  m17_ = value;
}

// required sfixed32 m18 = 18;
inline bool Performance::has_m18() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Performance::set_has_m18() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Performance::clear_has_m18() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Performance::clear_m18() {
  m18_ = 0;
  clear_has_m18();
}
inline ::google::protobuf::int32 Performance::m18() const {
  return m18_;
}
inline void Performance::set_m18(::google::protobuf::int32 value) {
  set_has_m18();
  m18_ = value;
}

// required sfixed32 m19 = 19;
inline bool Performance::has_m19() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Performance::set_has_m19() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Performance::clear_has_m19() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Performance::clear_m19() {
  m19_ = 0;
  clear_has_m19();
}
inline ::google::protobuf::int32 Performance::m19() const {
  return m19_;
}
inline void Performance::set_m19(::google::protobuf::int32 value) {
  set_has_m19();
  m19_ = value;
}

// required sfixed32 m20 = 20;
inline bool Performance::has_m20() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Performance::set_has_m20() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Performance::clear_has_m20() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Performance::clear_m20() {
  m20_ = 0;
  clear_has_m20();
}
inline ::google::protobuf::int32 Performance::m20() const {
  return m20_;
}
inline void Performance::set_m20(::google::protobuf::int32 value) {
  set_has_m20();
  m20_ = value;
}

// required sfixed32 m21 = 21;
inline bool Performance::has_m21() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Performance::set_has_m21() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Performance::clear_has_m21() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Performance::clear_m21() {
  m21_ = 0;
  clear_has_m21();
}
inline ::google::protobuf::int32 Performance::m21() const {
  return m21_;
}
inline void Performance::set_m21(::google::protobuf::int32 value) {
  set_has_m21();
  m21_ = value;
}

// required sfixed32 m22 = 22;
inline bool Performance::has_m22() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Performance::set_has_m22() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Performance::clear_has_m22() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Performance::clear_m22() {
  m22_ = 0;
  clear_has_m22();
}
inline ::google::protobuf::int32 Performance::m22() const {
  return m22_;
}
inline void Performance::set_m22(::google::protobuf::int32 value) {
  set_has_m22();
  m22_ = value;
}

// required sfixed32 m23 = 23;
inline bool Performance::has_m23() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Performance::set_has_m23() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Performance::clear_has_m23() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Performance::clear_m23() {
  m23_ = 0;
  clear_has_m23();
}
inline ::google::protobuf::int32 Performance::m23() const {
  return m23_;
}
inline void Performance::set_m23(::google::protobuf::int32 value) {
  set_has_m23();
  m23_ = value;
}

// required sfixed32 m24 = 24;
inline bool Performance::has_m24() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void Performance::set_has_m24() {
  _has_bits_[0] |= 0x00800000u;
}
inline void Performance::clear_has_m24() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void Performance::clear_m24() {
  m24_ = 0;
  clear_has_m24();
}
inline ::google::protobuf::int32 Performance::m24() const {
  return m24_;
}
inline void Performance::set_m24(::google::protobuf::int32 value) {
  set_has_m24();
  m24_ = value;
}

// required sfixed32 m25 = 25;
inline bool Performance::has_m25() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void Performance::set_has_m25() {
  _has_bits_[0] |= 0x01000000u;
}
inline void Performance::clear_has_m25() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void Performance::clear_m25() {
  m25_ = 0;
  clear_has_m25();
}
inline ::google::protobuf::int32 Performance::m25() const {
  return m25_;
}
inline void Performance::set_m25(::google::protobuf::int32 value) {
  set_has_m25();
  m25_ = value;
}

// required sfixed32 m26 = 26;
inline bool Performance::has_m26() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void Performance::set_has_m26() {
  _has_bits_[0] |= 0x02000000u;
}
inline void Performance::clear_has_m26() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void Performance::clear_m26() {
  m26_ = 0;
  clear_has_m26();
}
inline ::google::protobuf::int32 Performance::m26() const {
  return m26_;
}
inline void Performance::set_m26(::google::protobuf::int32 value) {
  set_has_m26();
  m26_ = value;
}

// required sfixed32 m27 = 27;
inline bool Performance::has_m27() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void Performance::set_has_m27() {
  _has_bits_[0] |= 0x04000000u;
}
inline void Performance::clear_has_m27() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void Performance::clear_m27() {
  m27_ = 0;
  clear_has_m27();
}
inline ::google::protobuf::int32 Performance::m27() const {
  return m27_;
}
inline void Performance::set_m27(::google::protobuf::int32 value) {
  set_has_m27();
  m27_ = value;
}

// required sfixed32 m28 = 28;
inline bool Performance::has_m28() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void Performance::set_has_m28() {
  _has_bits_[0] |= 0x08000000u;
}
inline void Performance::clear_has_m28() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void Performance::clear_m28() {
  m28_ = 0;
  clear_has_m28();
}
inline ::google::protobuf::int32 Performance::m28() const {
  return m28_;
}
inline void Performance::set_m28(::google::protobuf::int32 value) {
  set_has_m28();
  m28_ = value;
}

// required sfixed32 m29 = 29;
inline bool Performance::has_m29() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void Performance::set_has_m29() {
  _has_bits_[0] |= 0x10000000u;
}
inline void Performance::clear_has_m29() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void Performance::clear_m29() {
  m29_ = 0;
  clear_has_m29();
}
inline ::google::protobuf::int32 Performance::m29() const {
  return m29_;
}
inline void Performance::set_m29(::google::protobuf::int32 value) {
  set_has_m29();
  m29_ = value;
}

// required sfixed32 m30 = 30;
inline bool Performance::has_m30() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void Performance::set_has_m30() {
  _has_bits_[0] |= 0x20000000u;
}
inline void Performance::clear_has_m30() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void Performance::clear_m30() {
  m30_ = 0;
  clear_has_m30();
}
inline ::google::protobuf::int32 Performance::m30() const {
  return m30_;
}
inline void Performance::set_m30(::google::protobuf::int32 value) {
  set_has_m30();
  m30_ = value;
}

// required sfixed32 m31 = 31;
inline bool Performance::has_m31() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void Performance::set_has_m31() {
  _has_bits_[0] |= 0x40000000u;
}
inline void Performance::clear_has_m31() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void Performance::clear_m31() {
  m31_ = 0;
  clear_has_m31();
}
inline ::google::protobuf::int32 Performance::m31() const {
  return m31_;
}
inline void Performance::set_m31(::google::protobuf::int32 value) {
  set_has_m31();
  m31_ = value;
}

// required sfixed32 m32 = 32;
inline bool Performance::has_m32() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void Performance::set_has_m32() {
  _has_bits_[0] |= 0x80000000u;
}
inline void Performance::clear_has_m32() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void Performance::clear_m32() {
  m32_ = 0;
  clear_has_m32();
}
inline ::google::protobuf::int32 Performance::m32() const {
  return m32_;
}
inline void Performance::set_m32(::google::protobuf::int32 value) {
  set_has_m32();
  m32_ = value;
}

// required sfixed32 m33 = 33;
inline bool Performance::has_m33() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void Performance::set_has_m33() {
  _has_bits_[1] |= 0x00000001u;
}
inline void Performance::clear_has_m33() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void Performance::clear_m33() {
  m33_ = 0;
  clear_has_m33();
}
inline ::google::protobuf::int32 Performance::m33() const {
  return m33_;
}
inline void Performance::set_m33(::google::protobuf::int32 value) {
  set_has_m33();
  m33_ = value;
}

// required sfixed32 m34 = 34;
inline bool Performance::has_m34() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void Performance::set_has_m34() {
  _has_bits_[1] |= 0x00000002u;
}
inline void Performance::clear_has_m34() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void Performance::clear_m34() {
  m34_ = 0;
  clear_has_m34();
}
inline ::google::protobuf::int32 Performance::m34() const {
  return m34_;
}
inline void Performance::set_m34(::google::protobuf::int32 value) {
  set_has_m34();
  m34_ = value;
}

// required sfixed32 m35 = 35;
inline bool Performance::has_m35() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void Performance::set_has_m35() {
  _has_bits_[1] |= 0x00000004u;
}
inline void Performance::clear_has_m35() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void Performance::clear_m35() {
  m35_ = 0;
  clear_has_m35();
}
inline ::google::protobuf::int32 Performance::m35() const {
  return m35_;
}
inline void Performance::set_m35(::google::protobuf::int32 value) {
  set_has_m35();
  m35_ = value;
}

// required sfixed32 m36 = 36;
inline bool Performance::has_m36() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void Performance::set_has_m36() {
  _has_bits_[1] |= 0x00000008u;
}
inline void Performance::clear_has_m36() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void Performance::clear_m36() {
  m36_ = 0;
  clear_has_m36();
}
inline ::google::protobuf::int32 Performance::m36() const {
  return m36_;
}
inline void Performance::set_m36(::google::protobuf::int32 value) {
  set_has_m36();
  m36_ = value;
}

// required sfixed32 m37 = 37;
inline bool Performance::has_m37() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void Performance::set_has_m37() {
  _has_bits_[1] |= 0x00000010u;
}
inline void Performance::clear_has_m37() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void Performance::clear_m37() {
  m37_ = 0;
  clear_has_m37();
}
inline ::google::protobuf::int32 Performance::m37() const {
  return m37_;
}
inline void Performance::set_m37(::google::protobuf::int32 value) {
  set_has_m37();
  m37_ = value;
}

// required sfixed32 m38 = 38;
inline bool Performance::has_m38() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void Performance::set_has_m38() {
  _has_bits_[1] |= 0x00000020u;
}
inline void Performance::clear_has_m38() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void Performance::clear_m38() {
  m38_ = 0;
  clear_has_m38();
}
inline ::google::protobuf::int32 Performance::m38() const {
  return m38_;
}
inline void Performance::set_m38(::google::protobuf::int32 value) {
  set_has_m38();
  m38_ = value;
}

// required sfixed32 m39 = 39;
inline bool Performance::has_m39() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void Performance::set_has_m39() {
  _has_bits_[1] |= 0x00000040u;
}
inline void Performance::clear_has_m39() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void Performance::clear_m39() {
  m39_ = 0;
  clear_has_m39();
}
inline ::google::protobuf::int32 Performance::m39() const {
  return m39_;
}
inline void Performance::set_m39(::google::protobuf::int32 value) {
  set_has_m39();
  m39_ = value;
}

// required sfixed32 m40 = 40;
inline bool Performance::has_m40() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void Performance::set_has_m40() {
  _has_bits_[1] |= 0x00000080u;
}
inline void Performance::clear_has_m40() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void Performance::clear_m40() {
  m40_ = 0;
  clear_has_m40();
}
inline ::google::protobuf::int32 Performance::m40() const {
  return m40_;
}
inline void Performance::set_m40(::google::protobuf::int32 value) {
  set_has_m40();
  m40_ = value;
}

// required sfixed32 m41 = 41;
inline bool Performance::has_m41() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void Performance::set_has_m41() {
  _has_bits_[1] |= 0x00000100u;
}
inline void Performance::clear_has_m41() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void Performance::clear_m41() {
  m41_ = 0;
  clear_has_m41();
}
inline ::google::protobuf::int32 Performance::m41() const {
  return m41_;
}
inline void Performance::set_m41(::google::protobuf::int32 value) {
  set_has_m41();
  m41_ = value;
}

// required sfixed32 m42 = 42;
inline bool Performance::has_m42() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void Performance::set_has_m42() {
  _has_bits_[1] |= 0x00000200u;
}
inline void Performance::clear_has_m42() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void Performance::clear_m42() {
  m42_ = 0;
  clear_has_m42();
}
inline ::google::protobuf::int32 Performance::m42() const {
  return m42_;
}
inline void Performance::set_m42(::google::protobuf::int32 value) {
  set_has_m42();
  m42_ = value;
}

// required sfixed32 m43 = 43;
inline bool Performance::has_m43() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void Performance::set_has_m43() {
  _has_bits_[1] |= 0x00000400u;
}
inline void Performance::clear_has_m43() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void Performance::clear_m43() {
  m43_ = 0;
  clear_has_m43();
}
inline ::google::protobuf::int32 Performance::m43() const {
  return m43_;
}
inline void Performance::set_m43(::google::protobuf::int32 value) {
  set_has_m43();
  m43_ = value;
}

// required sfixed32 m44 = 44;
inline bool Performance::has_m44() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void Performance::set_has_m44() {
  _has_bits_[1] |= 0x00000800u;
}
inline void Performance::clear_has_m44() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void Performance::clear_m44() {
  m44_ = 0;
  clear_has_m44();
}
inline ::google::protobuf::int32 Performance::m44() const {
  return m44_;
}
inline void Performance::set_m44(::google::protobuf::int32 value) {
  set_has_m44();
  m44_ = value;
}

// required sfixed32 m45 = 45;
inline bool Performance::has_m45() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void Performance::set_has_m45() {
  _has_bits_[1] |= 0x00001000u;
}
inline void Performance::clear_has_m45() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void Performance::clear_m45() {
  m45_ = 0;
  clear_has_m45();
}
inline ::google::protobuf::int32 Performance::m45() const {
  return m45_;
}
inline void Performance::set_m45(::google::protobuf::int32 value) {
  set_has_m45();
  m45_ = value;
}

// required sfixed32 m46 = 46;
inline bool Performance::has_m46() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void Performance::set_has_m46() {
  _has_bits_[1] |= 0x00002000u;
}
inline void Performance::clear_has_m46() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void Performance::clear_m46() {
  m46_ = 0;
  clear_has_m46();
}
inline ::google::protobuf::int32 Performance::m46() const {
  return m46_;
}
inline void Performance::set_m46(::google::protobuf::int32 value) {
  set_has_m46();
  m46_ = value;
}

// required sfixed32 m47 = 47;
inline bool Performance::has_m47() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void Performance::set_has_m47() {
  _has_bits_[1] |= 0x00004000u;
}
inline void Performance::clear_has_m47() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void Performance::clear_m47() {
  m47_ = 0;
  clear_has_m47();
}
inline ::google::protobuf::int32 Performance::m47() const {
  return m47_;
}
inline void Performance::set_m47(::google::protobuf::int32 value) {
  set_has_m47();
  m47_ = value;
}

// required sfixed32 m48 = 48;
inline bool Performance::has_m48() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void Performance::set_has_m48() {
  _has_bits_[1] |= 0x00008000u;
}
inline void Performance::clear_has_m48() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void Performance::clear_m48() {
  m48_ = 0;
  clear_has_m48();
}
inline ::google::protobuf::int32 Performance::m48() const {
  return m48_;
}
inline void Performance::set_m48(::google::protobuf::int32 value) {
  set_has_m48();
  m48_ = value;
}

// required sfixed32 m49 = 49;
inline bool Performance::has_m49() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void Performance::set_has_m49() {
  _has_bits_[1] |= 0x00010000u;
}
inline void Performance::clear_has_m49() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void Performance::clear_m49() {
  m49_ = 0;
  clear_has_m49();
}
inline ::google::protobuf::int32 Performance::m49() const {
  return m49_;
}
inline void Performance::set_m49(::google::protobuf::int32 value) {
  set_has_m49();
  m49_ = value;
}

// required sfixed32 m50 = 50;
inline bool Performance::has_m50() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void Performance::set_has_m50() {
  _has_bits_[1] |= 0x00020000u;
}
inline void Performance::clear_has_m50() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void Performance::clear_m50() {
  m50_ = 0;
  clear_has_m50();
}
inline ::google::protobuf::int32 Performance::m50() const {
  return m50_;
}
inline void Performance::set_m50(::google::protobuf::int32 value) {
  set_has_m50();
  m50_ = value;
}

// required sfixed32 m51 = 51;
inline bool Performance::has_m51() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void Performance::set_has_m51() {
  _has_bits_[1] |= 0x00040000u;
}
inline void Performance::clear_has_m51() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void Performance::clear_m51() {
  m51_ = 0;
  clear_has_m51();
}
inline ::google::protobuf::int32 Performance::m51() const {
  return m51_;
}
inline void Performance::set_m51(::google::protobuf::int32 value) {
  set_has_m51();
  m51_ = value;
}

// required sfixed32 m52 = 52;
inline bool Performance::has_m52() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void Performance::set_has_m52() {
  _has_bits_[1] |= 0x00080000u;
}
inline void Performance::clear_has_m52() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void Performance::clear_m52() {
  m52_ = 0;
  clear_has_m52();
}
inline ::google::protobuf::int32 Performance::m52() const {
  return m52_;
}
inline void Performance::set_m52(::google::protobuf::int32 value) {
  set_has_m52();
  m52_ = value;
}

// required sfixed32 m53 = 53;
inline bool Performance::has_m53() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void Performance::set_has_m53() {
  _has_bits_[1] |= 0x00100000u;
}
inline void Performance::clear_has_m53() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void Performance::clear_m53() {
  m53_ = 0;
  clear_has_m53();
}
inline ::google::protobuf::int32 Performance::m53() const {
  return m53_;
}
inline void Performance::set_m53(::google::protobuf::int32 value) {
  set_has_m53();
  m53_ = value;
}

// required sfixed32 m54 = 54;
inline bool Performance::has_m54() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void Performance::set_has_m54() {
  _has_bits_[1] |= 0x00200000u;
}
inline void Performance::clear_has_m54() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void Performance::clear_m54() {
  m54_ = 0;
  clear_has_m54();
}
inline ::google::protobuf::int32 Performance::m54() const {
  return m54_;
}
inline void Performance::set_m54(::google::protobuf::int32 value) {
  set_has_m54();
  m54_ = value;
}

// required sfixed32 m55 = 55;
inline bool Performance::has_m55() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void Performance::set_has_m55() {
  _has_bits_[1] |= 0x00400000u;
}
inline void Performance::clear_has_m55() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void Performance::clear_m55() {
  m55_ = 0;
  clear_has_m55();
}
inline ::google::protobuf::int32 Performance::m55() const {
  return m55_;
}
inline void Performance::set_m55(::google::protobuf::int32 value) {
  set_has_m55();
  m55_ = value;
}

// required sfixed32 m56 = 56;
inline bool Performance::has_m56() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void Performance::set_has_m56() {
  _has_bits_[1] |= 0x00800000u;
}
inline void Performance::clear_has_m56() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void Performance::clear_m56() {
  m56_ = 0;
  clear_has_m56();
}
inline ::google::protobuf::int32 Performance::m56() const {
  return m56_;
}
inline void Performance::set_m56(::google::protobuf::int32 value) {
  set_has_m56();
  m56_ = value;
}

// required sfixed32 m57 = 57;
inline bool Performance::has_m57() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void Performance::set_has_m57() {
  _has_bits_[1] |= 0x01000000u;
}
inline void Performance::clear_has_m57() {
  _has_bits_[1] &= ~0x01000000u;
}
inline void Performance::clear_m57() {
  m57_ = 0;
  clear_has_m57();
}
inline ::google::protobuf::int32 Performance::m57() const {
  return m57_;
}
inline void Performance::set_m57(::google::protobuf::int32 value) {
  set_has_m57();
  m57_ = value;
}

// required sfixed32 m58 = 58;
inline bool Performance::has_m58() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void Performance::set_has_m58() {
  _has_bits_[1] |= 0x02000000u;
}
inline void Performance::clear_has_m58() {
  _has_bits_[1] &= ~0x02000000u;
}
inline void Performance::clear_m58() {
  m58_ = 0;
  clear_has_m58();
}
inline ::google::protobuf::int32 Performance::m58() const {
  return m58_;
}
inline void Performance::set_m58(::google::protobuf::int32 value) {
  set_has_m58();
  m58_ = value;
}

// required sfixed32 m59 = 59;
inline bool Performance::has_m59() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline void Performance::set_has_m59() {
  _has_bits_[1] |= 0x04000000u;
}
inline void Performance::clear_has_m59() {
  _has_bits_[1] &= ~0x04000000u;
}
inline void Performance::clear_m59() {
  m59_ = 0;
  clear_has_m59();
}
inline ::google::protobuf::int32 Performance::m59() const {
  return m59_;
}
inline void Performance::set_m59(::google::protobuf::int32 value) {
  set_has_m59();
  m59_ = value;
}

// required sfixed32 m60 = 60;
inline bool Performance::has_m60() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
inline void Performance::set_has_m60() {
  _has_bits_[1] |= 0x08000000u;
}
inline void Performance::clear_has_m60() {
  _has_bits_[1] &= ~0x08000000u;
}
inline void Performance::clear_m60() {
  m60_ = 0;
  clear_has_m60();
}
inline ::google::protobuf::int32 Performance::m60() const {
  return m60_;
}
inline void Performance::set_m60(::google::protobuf::int32 value) {
  set_has_m60();
  m60_ = value;
}

// required sfixed32 m61 = 61;
inline bool Performance::has_m61() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
inline void Performance::set_has_m61() {
  _has_bits_[1] |= 0x10000000u;
}
inline void Performance::clear_has_m61() {
  _has_bits_[1] &= ~0x10000000u;
}
inline void Performance::clear_m61() {
  m61_ = 0;
  clear_has_m61();
}
inline ::google::protobuf::int32 Performance::m61() const {
  return m61_;
}
inline void Performance::set_m61(::google::protobuf::int32 value) {
  set_has_m61();
  m61_ = value;
}

// required sfixed32 m62 = 62;
inline bool Performance::has_m62() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
inline void Performance::set_has_m62() {
  _has_bits_[1] |= 0x20000000u;
}
inline void Performance::clear_has_m62() {
  _has_bits_[1] &= ~0x20000000u;
}
inline void Performance::clear_m62() {
  m62_ = 0;
  clear_has_m62();
}
inline ::google::protobuf::int32 Performance::m62() const {
  return m62_;
}
inline void Performance::set_m62(::google::protobuf::int32 value) {
  set_has_m62();
  m62_ = value;
}

// required sfixed32 m63 = 63;
inline bool Performance::has_m63() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
inline void Performance::set_has_m63() {
  _has_bits_[1] |= 0x40000000u;
}
inline void Performance::clear_has_m63() {
  _has_bits_[1] &= ~0x40000000u;
}
inline void Performance::clear_m63() {
  m63_ = 0;
  clear_has_m63();
}
inline ::google::protobuf::int32 Performance::m63() const {
  return m63_;
}
inline void Performance::set_m63(::google::protobuf::int32 value) {
  set_has_m63();
  m63_ = value;
}

// required sfixed32 m64 = 64;
inline bool Performance::has_m64() const {
  return (_has_bits_[1] & 0x80000000u) != 0;
}
inline void Performance::set_has_m64() {
  _has_bits_[1] |= 0x80000000u;
}
inline void Performance::clear_has_m64() {
  _has_bits_[1] &= ~0x80000000u;
}
inline void Performance::clear_m64() {
  m64_ = 0;
  clear_has_m64();
}
inline ::google::protobuf::int32 Performance::m64() const {
  return m64_;
}
inline void Performance::set_m64(::google::protobuf::int32 value) {
  set_has_m64();
  m64_ = value;
}

// required sfixed32 m65 = 65;
inline bool Performance::has_m65() const {
  return (_has_bits_[2] & 0x00000001u) != 0;
}
inline void Performance::set_has_m65() {
  _has_bits_[2] |= 0x00000001u;
}
inline void Performance::clear_has_m65() {
  _has_bits_[2] &= ~0x00000001u;
}
inline void Performance::clear_m65() {
  m65_ = 0;
  clear_has_m65();
}
inline ::google::protobuf::int32 Performance::m65() const {
  return m65_;
}
inline void Performance::set_m65(::google::protobuf::int32 value) {
  set_has_m65();
  m65_ = value;
}

// required sfixed32 m66 = 66;
inline bool Performance::has_m66() const {
  return (_has_bits_[2] & 0x00000002u) != 0;
}
inline void Performance::set_has_m66() {
  _has_bits_[2] |= 0x00000002u;
}
inline void Performance::clear_has_m66() {
  _has_bits_[2] &= ~0x00000002u;
}
inline void Performance::clear_m66() {
  m66_ = 0;
  clear_has_m66();
}
inline ::google::protobuf::int32 Performance::m66() const {
  return m66_;
}
inline void Performance::set_m66(::google::protobuf::int32 value) {
  set_has_m66();
  m66_ = value;
}

// required sfixed32 m67 = 67;
inline bool Performance::has_m67() const {
  return (_has_bits_[2] & 0x00000004u) != 0;
}
inline void Performance::set_has_m67() {
  _has_bits_[2] |= 0x00000004u;
}
inline void Performance::clear_has_m67() {
  _has_bits_[2] &= ~0x00000004u;
}
inline void Performance::clear_m67() {
  m67_ = 0;
  clear_has_m67();
}
inline ::google::protobuf::int32 Performance::m67() const {
  return m67_;
}
inline void Performance::set_m67(::google::protobuf::int32 value) {
  set_has_m67();
  m67_ = value;
}

// required sfixed32 m68 = 68;
inline bool Performance::has_m68() const {
  return (_has_bits_[2] & 0x00000008u) != 0;
}
inline void Performance::set_has_m68() {
  _has_bits_[2] |= 0x00000008u;
}
inline void Performance::clear_has_m68() {
  _has_bits_[2] &= ~0x00000008u;
}
inline void Performance::clear_m68() {
  m68_ = 0;
  clear_has_m68();
}
inline ::google::protobuf::int32 Performance::m68() const {
  return m68_;
}
inline void Performance::set_m68(::google::protobuf::int32 value) {
  set_has_m68();
  m68_ = value;
}

// required sfixed32 m69 = 69;
inline bool Performance::has_m69() const {
  return (_has_bits_[2] & 0x00000010u) != 0;
}
inline void Performance::set_has_m69() {
  _has_bits_[2] |= 0x00000010u;
}
inline void Performance::clear_has_m69() {
  _has_bits_[2] &= ~0x00000010u;
}
inline void Performance::clear_m69() {
  m69_ = 0;
  clear_has_m69();
}
inline ::google::protobuf::int32 Performance::m69() const {
  return m69_;
}
inline void Performance::set_m69(::google::protobuf::int32 value) {
  set_has_m69();
  m69_ = value;
}

// required sfixed32 m70 = 70;
inline bool Performance::has_m70() const {
  return (_has_bits_[2] & 0x00000020u) != 0;
}
inline void Performance::set_has_m70() {
  _has_bits_[2] |= 0x00000020u;
}
inline void Performance::clear_has_m70() {
  _has_bits_[2] &= ~0x00000020u;
}
inline void Performance::clear_m70() {
  m70_ = 0;
  clear_has_m70();
}
inline ::google::protobuf::int32 Performance::m70() const {
  return m70_;
}
inline void Performance::set_m70(::google::protobuf::int32 value) {
  set_has_m70();
  m70_ = value;
}

// required sfixed32 m71 = 71;
inline bool Performance::has_m71() const {
  return (_has_bits_[2] & 0x00000040u) != 0;
}
inline void Performance::set_has_m71() {
  _has_bits_[2] |= 0x00000040u;
}
inline void Performance::clear_has_m71() {
  _has_bits_[2] &= ~0x00000040u;
}
inline void Performance::clear_m71() {
  m71_ = 0;
  clear_has_m71();
}
inline ::google::protobuf::int32 Performance::m71() const {
  return m71_;
}
inline void Performance::set_m71(::google::protobuf::int32 value) {
  set_has_m71();
  m71_ = value;
}

// required sfixed32 m72 = 72;
inline bool Performance::has_m72() const {
  return (_has_bits_[2] & 0x00000080u) != 0;
}
inline void Performance::set_has_m72() {
  _has_bits_[2] |= 0x00000080u;
}
inline void Performance::clear_has_m72() {
  _has_bits_[2] &= ~0x00000080u;
}
inline void Performance::clear_m72() {
  m72_ = 0;
  clear_has_m72();
}
inline ::google::protobuf::int32 Performance::m72() const {
  return m72_;
}
inline void Performance::set_m72(::google::protobuf::int32 value) {
  set_has_m72();
  m72_ = value;
}

// required sfixed32 m73 = 73;
inline bool Performance::has_m73() const {
  return (_has_bits_[2] & 0x00000100u) != 0;
}
inline void Performance::set_has_m73() {
  _has_bits_[2] |= 0x00000100u;
}
inline void Performance::clear_has_m73() {
  _has_bits_[2] &= ~0x00000100u;
}
inline void Performance::clear_m73() {
  m73_ = 0;
  clear_has_m73();
}
inline ::google::protobuf::int32 Performance::m73() const {
  return m73_;
}
inline void Performance::set_m73(::google::protobuf::int32 value) {
  set_has_m73();
  m73_ = value;
}

// required sfixed32 m74 = 74;
inline bool Performance::has_m74() const {
  return (_has_bits_[2] & 0x00000200u) != 0;
}
inline void Performance::set_has_m74() {
  _has_bits_[2] |= 0x00000200u;
}
inline void Performance::clear_has_m74() {
  _has_bits_[2] &= ~0x00000200u;
}
inline void Performance::clear_m74() {
  m74_ = 0;
  clear_has_m74();
}
inline ::google::protobuf::int32 Performance::m74() const {
  return m74_;
}
inline void Performance::set_m74(::google::protobuf::int32 value) {
  set_has_m74();
  m74_ = value;
}

// required sfixed32 m75 = 75;
inline bool Performance::has_m75() const {
  return (_has_bits_[2] & 0x00000400u) != 0;
}
inline void Performance::set_has_m75() {
  _has_bits_[2] |= 0x00000400u;
}
inline void Performance::clear_has_m75() {
  _has_bits_[2] &= ~0x00000400u;
}
inline void Performance::clear_m75() {
  m75_ = 0;
  clear_has_m75();
}
inline ::google::protobuf::int32 Performance::m75() const {
  return m75_;
}
inline void Performance::set_m75(::google::protobuf::int32 value) {
  set_has_m75();
  m75_ = value;
}

// required sfixed32 m76 = 76;
inline bool Performance::has_m76() const {
  return (_has_bits_[2] & 0x00000800u) != 0;
}
inline void Performance::set_has_m76() {
  _has_bits_[2] |= 0x00000800u;
}
inline void Performance::clear_has_m76() {
  _has_bits_[2] &= ~0x00000800u;
}
inline void Performance::clear_m76() {
  m76_ = 0;
  clear_has_m76();
}
inline ::google::protobuf::int32 Performance::m76() const {
  return m76_;
}
inline void Performance::set_m76(::google::protobuf::int32 value) {
  set_has_m76();
  m76_ = value;
}

// required sfixed32 m77 = 77;
inline bool Performance::has_m77() const {
  return (_has_bits_[2] & 0x00001000u) != 0;
}
inline void Performance::set_has_m77() {
  _has_bits_[2] |= 0x00001000u;
}
inline void Performance::clear_has_m77() {
  _has_bits_[2] &= ~0x00001000u;
}
inline void Performance::clear_m77() {
  m77_ = 0;
  clear_has_m77();
}
inline ::google::protobuf::int32 Performance::m77() const {
  return m77_;
}
inline void Performance::set_m77(::google::protobuf::int32 value) {
  set_has_m77();
  m77_ = value;
}

// required sfixed32 m78 = 78;
inline bool Performance::has_m78() const {
  return (_has_bits_[2] & 0x00002000u) != 0;
}
inline void Performance::set_has_m78() {
  _has_bits_[2] |= 0x00002000u;
}
inline void Performance::clear_has_m78() {
  _has_bits_[2] &= ~0x00002000u;
}
inline void Performance::clear_m78() {
  m78_ = 0;
  clear_has_m78();
}
inline ::google::protobuf::int32 Performance::m78() const {
  return m78_;
}
inline void Performance::set_m78(::google::protobuf::int32 value) {
  set_has_m78();
  m78_ = value;
}

// required sfixed32 m79 = 79;
inline bool Performance::has_m79() const {
  return (_has_bits_[2] & 0x00004000u) != 0;
}
inline void Performance::set_has_m79() {
  _has_bits_[2] |= 0x00004000u;
}
inline void Performance::clear_has_m79() {
  _has_bits_[2] &= ~0x00004000u;
}
inline void Performance::clear_m79() {
  m79_ = 0;
  clear_has_m79();
}
inline ::google::protobuf::int32 Performance::m79() const {
  return m79_;
}
inline void Performance::set_m79(::google::protobuf::int32 value) {
  set_has_m79();
  m79_ = value;
}

// required sfixed32 m80 = 80;
inline bool Performance::has_m80() const {
  return (_has_bits_[2] & 0x00008000u) != 0;
}
inline void Performance::set_has_m80() {
  _has_bits_[2] |= 0x00008000u;
}
inline void Performance::clear_has_m80() {
  _has_bits_[2] &= ~0x00008000u;
}
inline void Performance::clear_m80() {
  m80_ = 0;
  clear_has_m80();
}
inline ::google::protobuf::int32 Performance::m80() const {
  return m80_;
}
inline void Performance::set_m80(::google::protobuf::int32 value) {
  set_has_m80();
  m80_ = value;
}

// required sfixed32 m81 = 81;
inline bool Performance::has_m81() const {
  return (_has_bits_[2] & 0x00010000u) != 0;
}
inline void Performance::set_has_m81() {
  _has_bits_[2] |= 0x00010000u;
}
inline void Performance::clear_has_m81() {
  _has_bits_[2] &= ~0x00010000u;
}
inline void Performance::clear_m81() {
  m81_ = 0;
  clear_has_m81();
}
inline ::google::protobuf::int32 Performance::m81() const {
  return m81_;
}
inline void Performance::set_m81(::google::protobuf::int32 value) {
  set_has_m81();
  m81_ = value;
}

// required sfixed32 m82 = 82;
inline bool Performance::has_m82() const {
  return (_has_bits_[2] & 0x00020000u) != 0;
}
inline void Performance::set_has_m82() {
  _has_bits_[2] |= 0x00020000u;
}
inline void Performance::clear_has_m82() {
  _has_bits_[2] &= ~0x00020000u;
}
inline void Performance::clear_m82() {
  m82_ = 0;
  clear_has_m82();
}
inline ::google::protobuf::int32 Performance::m82() const {
  return m82_;
}
inline void Performance::set_m82(::google::protobuf::int32 value) {
  set_has_m82();
  m82_ = value;
}

// required sfixed32 m83 = 83;
inline bool Performance::has_m83() const {
  return (_has_bits_[2] & 0x00040000u) != 0;
}
inline void Performance::set_has_m83() {
  _has_bits_[2] |= 0x00040000u;
}
inline void Performance::clear_has_m83() {
  _has_bits_[2] &= ~0x00040000u;
}
inline void Performance::clear_m83() {
  m83_ = 0;
  clear_has_m83();
}
inline ::google::protobuf::int32 Performance::m83() const {
  return m83_;
}
inline void Performance::set_m83(::google::protobuf::int32 value) {
  set_has_m83();
  m83_ = value;
}

// required sfixed32 m84 = 84;
inline bool Performance::has_m84() const {
  return (_has_bits_[2] & 0x00080000u) != 0;
}
inline void Performance::set_has_m84() {
  _has_bits_[2] |= 0x00080000u;
}
inline void Performance::clear_has_m84() {
  _has_bits_[2] &= ~0x00080000u;
}
inline void Performance::clear_m84() {
  m84_ = 0;
  clear_has_m84();
}
inline ::google::protobuf::int32 Performance::m84() const {
  return m84_;
}
inline void Performance::set_m84(::google::protobuf::int32 value) {
  set_has_m84();
  m84_ = value;
}

// required sfixed32 m85 = 85;
inline bool Performance::has_m85() const {
  return (_has_bits_[2] & 0x00100000u) != 0;
}
inline void Performance::set_has_m85() {
  _has_bits_[2] |= 0x00100000u;
}
inline void Performance::clear_has_m85() {
  _has_bits_[2] &= ~0x00100000u;
}
inline void Performance::clear_m85() {
  m85_ = 0;
  clear_has_m85();
}
inline ::google::protobuf::int32 Performance::m85() const {
  return m85_;
}
inline void Performance::set_m85(::google::protobuf::int32 value) {
  set_has_m85();
  m85_ = value;
}

// required sfixed32 m86 = 86;
inline bool Performance::has_m86() const {
  return (_has_bits_[2] & 0x00200000u) != 0;
}
inline void Performance::set_has_m86() {
  _has_bits_[2] |= 0x00200000u;
}
inline void Performance::clear_has_m86() {
  _has_bits_[2] &= ~0x00200000u;
}
inline void Performance::clear_m86() {
  m86_ = 0;
  clear_has_m86();
}
inline ::google::protobuf::int32 Performance::m86() const {
  return m86_;
}
inline void Performance::set_m86(::google::protobuf::int32 value) {
  set_has_m86();
  m86_ = value;
}

// required sfixed32 m87 = 87;
inline bool Performance::has_m87() const {
  return (_has_bits_[2] & 0x00400000u) != 0;
}
inline void Performance::set_has_m87() {
  _has_bits_[2] |= 0x00400000u;
}
inline void Performance::clear_has_m87() {
  _has_bits_[2] &= ~0x00400000u;
}
inline void Performance::clear_m87() {
  m87_ = 0;
  clear_has_m87();
}
inline ::google::protobuf::int32 Performance::m87() const {
  return m87_;
}
inline void Performance::set_m87(::google::protobuf::int32 value) {
  set_has_m87();
  m87_ = value;
}

// required sfixed32 m88 = 88;
inline bool Performance::has_m88() const {
  return (_has_bits_[2] & 0x00800000u) != 0;
}
inline void Performance::set_has_m88() {
  _has_bits_[2] |= 0x00800000u;
}
inline void Performance::clear_has_m88() {
  _has_bits_[2] &= ~0x00800000u;
}
inline void Performance::clear_m88() {
  m88_ = 0;
  clear_has_m88();
}
inline ::google::protobuf::int32 Performance::m88() const {
  return m88_;
}
inline void Performance::set_m88(::google::protobuf::int32 value) {
  set_has_m88();
  m88_ = value;
}

// required sfixed32 m89 = 89;
inline bool Performance::has_m89() const {
  return (_has_bits_[2] & 0x01000000u) != 0;
}
inline void Performance::set_has_m89() {
  _has_bits_[2] |= 0x01000000u;
}
inline void Performance::clear_has_m89() {
  _has_bits_[2] &= ~0x01000000u;
}
inline void Performance::clear_m89() {
  m89_ = 0;
  clear_has_m89();
}
inline ::google::protobuf::int32 Performance::m89() const {
  return m89_;
}
inline void Performance::set_m89(::google::protobuf::int32 value) {
  set_has_m89();
  m89_ = value;
}

// required sfixed32 m90 = 90;
inline bool Performance::has_m90() const {
  return (_has_bits_[2] & 0x02000000u) != 0;
}
inline void Performance::set_has_m90() {
  _has_bits_[2] |= 0x02000000u;
}
inline void Performance::clear_has_m90() {
  _has_bits_[2] &= ~0x02000000u;
}
inline void Performance::clear_m90() {
  m90_ = 0;
  clear_has_m90();
}
inline ::google::protobuf::int32 Performance::m90() const {
  return m90_;
}
inline void Performance::set_m90(::google::protobuf::int32 value) {
  set_has_m90();
  m90_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace performance

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Performance_5f90_2eproto__INCLUDED
