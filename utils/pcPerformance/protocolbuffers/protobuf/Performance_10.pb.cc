// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Performance_10.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Performance_10.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace performance {

namespace {

const ::google::protobuf::Descriptor* Performance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Performance_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Performance_5f10_2eproto() {
  protobuf_AddDesc_Performance_5f10_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Performance_10.proto");
  GOOGLE_CHECK(file != NULL);
  Performance_descriptor_ = file->message_type(0);
  static const int Performance_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Performance, m1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Performance, m2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Performance, m3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Performance, m4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Performance, m5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Performance, m6_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Performance, m7_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Performance, m8_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Performance, m9_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Performance, m10_),
  };
  Performance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Performance_descriptor_,
      Performance::default_instance_,
      Performance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Performance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Performance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Performance));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Performance_5f10_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Performance_descriptor_, &Performance::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Performance_5f10_2eproto() {
  delete Performance::default_instance_;
  delete Performance_reflection_;
}

void protobuf_AddDesc_Performance_5f10_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024Performance_10.proto\022\013performance\"\206\001\n\013"
    "Performance\022\n\n\002m1\030\001 \002(\017\022\n\n\002m2\030\002 \002(\017\022\n\n\002m"
    "3\030\003 \002(\017\022\n\n\002m4\030\004 \002(\017\022\n\n\002m5\030\005 \002(\017\022\n\n\002m6\030\006 "
    "\002(\017\022\n\n\002m7\030\007 \002(\017\022\n\n\002m8\030\010 \002(\017\022\n\n\002m9\030\t \002(\017\022"
    "\013\n\003m10\030\n \002(\017", 172);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Performance_10.proto", &protobuf_RegisterTypes);
  Performance::default_instance_ = new Performance();
  Performance::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Performance_5f10_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Performance_5f10_2eproto {
  StaticDescriptorInitializer_Performance_5f10_2eproto() {
    protobuf_AddDesc_Performance_5f10_2eproto();
  }
} static_descriptor_initializer_Performance_5f10_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Performance::kM1FieldNumber;
const int Performance::kM2FieldNumber;
const int Performance::kM3FieldNumber;
const int Performance::kM4FieldNumber;
const int Performance::kM5FieldNumber;
const int Performance::kM6FieldNumber;
const int Performance::kM7FieldNumber;
const int Performance::kM8FieldNumber;
const int Performance::kM9FieldNumber;
const int Performance::kM10FieldNumber;
#endif  // !_MSC_VER

Performance::Performance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Performance::InitAsDefaultInstance() {
}

Performance::Performance(const Performance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Performance::SharedCtor() {
  _cached_size_ = 0;
  m1_ = 0;
  m2_ = 0;
  m3_ = 0;
  m4_ = 0;
  m5_ = 0;
  m6_ = 0;
  m7_ = 0;
  m8_ = 0;
  m9_ = 0;
  m10_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Performance::~Performance() {
  SharedDtor();
}

void Performance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Performance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Performance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Performance_descriptor_;
}

const Performance& Performance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Performance_5f10_2eproto();
  return *default_instance_;
}

Performance* Performance::default_instance_ = NULL;

Performance* Performance::New() const {
  return new Performance;
}

void Performance::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m1_ = 0;
    m2_ = 0;
    m3_ = 0;
    m4_ = 0;
    m5_ = 0;
    m6_ = 0;
    m7_ = 0;
    m8_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m9_ = 0;
    m10_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Performance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sfixed32 m1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &m1_)));
          set_has_m1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_m2;
        break;
      }

      // required sfixed32 m2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_m2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &m2_)));
          set_has_m2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_m3;
        break;
      }

      // required sfixed32 m3 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_m3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &m3_)));
          set_has_m3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_m4;
        break;
      }

      // required sfixed32 m4 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_m4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &m4_)));
          set_has_m4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_m5;
        break;
      }

      // required sfixed32 m5 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_m5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &m5_)));
          set_has_m5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_m6;
        break;
      }

      // required sfixed32 m6 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_m6:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &m6_)));
          set_has_m6();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_m7;
        break;
      }

      // required sfixed32 m7 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_m7:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &m7_)));
          set_has_m7();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_m8;
        break;
      }

      // required sfixed32 m8 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_m8:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &m8_)));
          set_has_m8();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_m9;
        break;
      }

      // required sfixed32 m9 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_m9:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &m9_)));
          set_has_m9();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_m10;
        break;
      }

      // required sfixed32 m10 = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_m10:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &m10_)));
          set_has_m10();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Performance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sfixed32 m1 = 1;
  if (has_m1()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(1, this->m1(), output);
  }

  // required sfixed32 m2 = 2;
  if (has_m2()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(2, this->m2(), output);
  }

  // required sfixed32 m3 = 3;
  if (has_m3()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(3, this->m3(), output);
  }

  // required sfixed32 m4 = 4;
  if (has_m4()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(4, this->m4(), output);
  }

  // required sfixed32 m5 = 5;
  if (has_m5()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(5, this->m5(), output);
  }

  // required sfixed32 m6 = 6;
  if (has_m6()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(6, this->m6(), output);
  }

  // required sfixed32 m7 = 7;
  if (has_m7()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(7, this->m7(), output);
  }

  // required sfixed32 m8 = 8;
  if (has_m8()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(8, this->m8(), output);
  }

  // required sfixed32 m9 = 9;
  if (has_m9()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(9, this->m9(), output);
  }

  // required sfixed32 m10 = 10;
  if (has_m10()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(10, this->m10(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Performance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sfixed32 m1 = 1;
  if (has_m1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(1, this->m1(), target);
  }

  // required sfixed32 m2 = 2;
  if (has_m2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(2, this->m2(), target);
  }

  // required sfixed32 m3 = 3;
  if (has_m3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(3, this->m3(), target);
  }

  // required sfixed32 m4 = 4;
  if (has_m4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(4, this->m4(), target);
  }

  // required sfixed32 m5 = 5;
  if (has_m5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(5, this->m5(), target);
  }

  // required sfixed32 m6 = 6;
  if (has_m6()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(6, this->m6(), target);
  }

  // required sfixed32 m7 = 7;
  if (has_m7()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(7, this->m7(), target);
  }

  // required sfixed32 m8 = 8;
  if (has_m8()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(8, this->m8(), target);
  }

  // required sfixed32 m9 = 9;
  if (has_m9()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(9, this->m9(), target);
  }

  // required sfixed32 m10 = 10;
  if (has_m10()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(10, this->m10(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Performance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sfixed32 m1 = 1;
    if (has_m1()) {
      total_size += 1 + 4;
    }

    // required sfixed32 m2 = 2;
    if (has_m2()) {
      total_size += 1 + 4;
    }

    // required sfixed32 m3 = 3;
    if (has_m3()) {
      total_size += 1 + 4;
    }

    // required sfixed32 m4 = 4;
    if (has_m4()) {
      total_size += 1 + 4;
    }

    // required sfixed32 m5 = 5;
    if (has_m5()) {
      total_size += 1 + 4;
    }

    // required sfixed32 m6 = 6;
    if (has_m6()) {
      total_size += 1 + 4;
    }

    // required sfixed32 m7 = 7;
    if (has_m7()) {
      total_size += 1 + 4;
    }

    // required sfixed32 m8 = 8;
    if (has_m8()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required sfixed32 m9 = 9;
    if (has_m9()) {
      total_size += 1 + 4;
    }

    // required sfixed32 m10 = 10;
    if (has_m10()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Performance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Performance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Performance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Performance::MergeFrom(const Performance& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m1()) {
      set_m1(from.m1());
    }
    if (from.has_m2()) {
      set_m2(from.m2());
    }
    if (from.has_m3()) {
      set_m3(from.m3());
    }
    if (from.has_m4()) {
      set_m4(from.m4());
    }
    if (from.has_m5()) {
      set_m5(from.m5());
    }
    if (from.has_m6()) {
      set_m6(from.m6());
    }
    if (from.has_m7()) {
      set_m7(from.m7());
    }
    if (from.has_m8()) {
      set_m8(from.m8());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m9()) {
      set_m9(from.m9());
    }
    if (from.has_m10()) {
      set_m10(from.m10());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Performance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Performance::CopyFrom(const Performance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Performance::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;

  return true;
}

void Performance::Swap(Performance* other) {
  if (other != this) {
    std::swap(m1_, other->m1_);
    std::swap(m2_, other->m2_);
    std::swap(m3_, other->m3_);
    std::swap(m4_, other->m4_);
    std::swap(m5_, other->m5_);
    std::swap(m6_, other->m6_);
    std::swap(m7_, other->m7_);
    std::swap(m8_, other->m8_);
    std::swap(m9_, other->m9_);
    std::swap(m10_, other->m10_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Performance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Performance_descriptor_;
  metadata.reflection = Performance_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace performance

// @@protoc_insertion_point(global_scope)
