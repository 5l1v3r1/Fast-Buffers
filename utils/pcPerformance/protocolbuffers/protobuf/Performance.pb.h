// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Performance.proto

#ifndef PROTOBUF_Performance_2eproto__INCLUDED
#define PROTOBUF_Performance_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace performance {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Performance_2eproto();
void protobuf_AssignDesc_Performance_2eproto();
void protobuf_ShutdownFile_Performance_2eproto();

class mfloats;
class mdoubles;
class msfixed32s;
class msfixed64s;
class mfixed32s;
class mfixed64s;
class mstrings;
class Performance;

// ===================================================================

class mfloats : public ::google::protobuf::Message {
 public:
  mfloats();
  virtual ~mfloats();

  mfloats(const mfloats& from);

  inline mfloats& operator=(const mfloats& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mfloats& default_instance();

  void Swap(mfloats* other);

  // implements Message ----------------------------------------------

  mfloats* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mfloats& from);
  void MergeFrom(const mfloats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float m1 = 1;
  inline bool has_m1() const;
  inline void clear_m1();
  static const int kM1FieldNumber = 1;
  inline float m1() const;
  inline void set_m1(float value);

  // required float m2 = 2;
  inline bool has_m2() const;
  inline void clear_m2();
  static const int kM2FieldNumber = 2;
  inline float m2() const;
  inline void set_m2(float value);

  // required float m3 = 3;
  inline bool has_m3() const;
  inline void clear_m3();
  static const int kM3FieldNumber = 3;
  inline float m3() const;
  inline void set_m3(float value);

  // required float m4 = 4;
  inline bool has_m4() const;
  inline void clear_m4();
  static const int kM4FieldNumber = 4;
  inline float m4() const;
  inline void set_m4(float value);

  // required float m5 = 5;
  inline bool has_m5() const;
  inline void clear_m5();
  static const int kM5FieldNumber = 5;
  inline float m5() const;
  inline void set_m5(float value);

  // required float m6 = 6;
  inline bool has_m6() const;
  inline void clear_m6();
  static const int kM6FieldNumber = 6;
  inline float m6() const;
  inline void set_m6(float value);

  // required float m7 = 7;
  inline bool has_m7() const;
  inline void clear_m7();
  static const int kM7FieldNumber = 7;
  inline float m7() const;
  inline void set_m7(float value);

  // required float m8 = 8;
  inline bool has_m8() const;
  inline void clear_m8();
  static const int kM8FieldNumber = 8;
  inline float m8() const;
  inline void set_m8(float value);

  // required float m9 = 9;
  inline bool has_m9() const;
  inline void clear_m9();
  static const int kM9FieldNumber = 9;
  inline float m9() const;
  inline void set_m9(float value);

  // @@protoc_insertion_point(class_scope:performance.mfloats)
 private:
  inline void set_has_m1();
  inline void clear_has_m1();
  inline void set_has_m2();
  inline void clear_has_m2();
  inline void set_has_m3();
  inline void clear_has_m3();
  inline void set_has_m4();
  inline void clear_has_m4();
  inline void set_has_m5();
  inline void clear_has_m5();
  inline void set_has_m6();
  inline void clear_has_m6();
  inline void set_has_m7();
  inline void clear_has_m7();
  inline void set_has_m8();
  inline void clear_has_m8();
  inline void set_has_m9();
  inline void clear_has_m9();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float m1_;
  float m2_;
  float m3_;
  float m4_;
  float m5_;
  float m6_;
  float m7_;
  float m8_;
  float m9_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_Performance_2eproto();
  friend void protobuf_AssignDesc_Performance_2eproto();
  friend void protobuf_ShutdownFile_Performance_2eproto();

  void InitAsDefaultInstance();
  static mfloats* default_instance_;
};
// -------------------------------------------------------------------

class mdoubles : public ::google::protobuf::Message {
 public:
  mdoubles();
  virtual ~mdoubles();

  mdoubles(const mdoubles& from);

  inline mdoubles& operator=(const mdoubles& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mdoubles& default_instance();

  void Swap(mdoubles* other);

  // implements Message ----------------------------------------------

  mdoubles* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mdoubles& from);
  void MergeFrom(const mdoubles& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double m1 = 1;
  inline bool has_m1() const;
  inline void clear_m1();
  static const int kM1FieldNumber = 1;
  inline double m1() const;
  inline void set_m1(double value);

  // required double m2 = 2;
  inline bool has_m2() const;
  inline void clear_m2();
  static const int kM2FieldNumber = 2;
  inline double m2() const;
  inline void set_m2(double value);

  // required double m3 = 3;
  inline bool has_m3() const;
  inline void clear_m3();
  static const int kM3FieldNumber = 3;
  inline double m3() const;
  inline void set_m3(double value);

  // required double m4 = 4;
  inline bool has_m4() const;
  inline void clear_m4();
  static const int kM4FieldNumber = 4;
  inline double m4() const;
  inline void set_m4(double value);

  // required double m5 = 5;
  inline bool has_m5() const;
  inline void clear_m5();
  static const int kM5FieldNumber = 5;
  inline double m5() const;
  inline void set_m5(double value);

  // required double m6 = 6;
  inline bool has_m6() const;
  inline void clear_m6();
  static const int kM6FieldNumber = 6;
  inline double m6() const;
  inline void set_m6(double value);

  // required double m7 = 7;
  inline bool has_m7() const;
  inline void clear_m7();
  static const int kM7FieldNumber = 7;
  inline double m7() const;
  inline void set_m7(double value);

  // required double m8 = 8;
  inline bool has_m8() const;
  inline void clear_m8();
  static const int kM8FieldNumber = 8;
  inline double m8() const;
  inline void set_m8(double value);

  // required double m9 = 9;
  inline bool has_m9() const;
  inline void clear_m9();
  static const int kM9FieldNumber = 9;
  inline double m9() const;
  inline void set_m9(double value);

  // @@protoc_insertion_point(class_scope:performance.mdoubles)
 private:
  inline void set_has_m1();
  inline void clear_has_m1();
  inline void set_has_m2();
  inline void clear_has_m2();
  inline void set_has_m3();
  inline void clear_has_m3();
  inline void set_has_m4();
  inline void clear_has_m4();
  inline void set_has_m5();
  inline void clear_has_m5();
  inline void set_has_m6();
  inline void clear_has_m6();
  inline void set_has_m7();
  inline void clear_has_m7();
  inline void set_has_m8();
  inline void clear_has_m8();
  inline void set_has_m9();
  inline void clear_has_m9();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  double m1_;
  double m2_;
  double m3_;
  double m4_;
  double m5_;
  double m6_;
  double m7_;
  double m8_;
  double m9_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_Performance_2eproto();
  friend void protobuf_AssignDesc_Performance_2eproto();
  friend void protobuf_ShutdownFile_Performance_2eproto();

  void InitAsDefaultInstance();
  static mdoubles* default_instance_;
};
// -------------------------------------------------------------------

class msfixed32s : public ::google::protobuf::Message {
 public:
  msfixed32s();
  virtual ~msfixed32s();

  msfixed32s(const msfixed32s& from);

  inline msfixed32s& operator=(const msfixed32s& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msfixed32s& default_instance();

  void Swap(msfixed32s* other);

  // implements Message ----------------------------------------------

  msfixed32s* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msfixed32s& from);
  void MergeFrom(const msfixed32s& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sfixed32 m1 = 1;
  inline bool has_m1() const;
  inline void clear_m1();
  static const int kM1FieldNumber = 1;
  inline ::google::protobuf::int32 m1() const;
  inline void set_m1(::google::protobuf::int32 value);

  // required sfixed32 m2 = 2;
  inline bool has_m2() const;
  inline void clear_m2();
  static const int kM2FieldNumber = 2;
  inline ::google::protobuf::int32 m2() const;
  inline void set_m2(::google::protobuf::int32 value);

  // required sfixed32 m3 = 3;
  inline bool has_m3() const;
  inline void clear_m3();
  static const int kM3FieldNumber = 3;
  inline ::google::protobuf::int32 m3() const;
  inline void set_m3(::google::protobuf::int32 value);

  // required sfixed32 m4 = 4;
  inline bool has_m4() const;
  inline void clear_m4();
  static const int kM4FieldNumber = 4;
  inline ::google::protobuf::int32 m4() const;
  inline void set_m4(::google::protobuf::int32 value);

  // required sfixed32 m5 = 5;
  inline bool has_m5() const;
  inline void clear_m5();
  static const int kM5FieldNumber = 5;
  inline ::google::protobuf::int32 m5() const;
  inline void set_m5(::google::protobuf::int32 value);

  // required sfixed32 m6 = 6;
  inline bool has_m6() const;
  inline void clear_m6();
  static const int kM6FieldNumber = 6;
  inline ::google::protobuf::int32 m6() const;
  inline void set_m6(::google::protobuf::int32 value);

  // required sfixed32 m7 = 7;
  inline bool has_m7() const;
  inline void clear_m7();
  static const int kM7FieldNumber = 7;
  inline ::google::protobuf::int32 m7() const;
  inline void set_m7(::google::protobuf::int32 value);

  // required sfixed32 m8 = 8;
  inline bool has_m8() const;
  inline void clear_m8();
  static const int kM8FieldNumber = 8;
  inline ::google::protobuf::int32 m8() const;
  inline void set_m8(::google::protobuf::int32 value);

  // required sfixed32 m9 = 9;
  inline bool has_m9() const;
  inline void clear_m9();
  static const int kM9FieldNumber = 9;
  inline ::google::protobuf::int32 m9() const;
  inline void set_m9(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:performance.msfixed32s)
 private:
  inline void set_has_m1();
  inline void clear_has_m1();
  inline void set_has_m2();
  inline void clear_has_m2();
  inline void set_has_m3();
  inline void clear_has_m3();
  inline void set_has_m4();
  inline void clear_has_m4();
  inline void set_has_m5();
  inline void clear_has_m5();
  inline void set_has_m6();
  inline void clear_has_m6();
  inline void set_has_m7();
  inline void clear_has_m7();
  inline void set_has_m8();
  inline void clear_has_m8();
  inline void set_has_m9();
  inline void clear_has_m9();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m1_;
  ::google::protobuf::int32 m2_;
  ::google::protobuf::int32 m3_;
  ::google::protobuf::int32 m4_;
  ::google::protobuf::int32 m5_;
  ::google::protobuf::int32 m6_;
  ::google::protobuf::int32 m7_;
  ::google::protobuf::int32 m8_;
  ::google::protobuf::int32 m9_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_Performance_2eproto();
  friend void protobuf_AssignDesc_Performance_2eproto();
  friend void protobuf_ShutdownFile_Performance_2eproto();

  void InitAsDefaultInstance();
  static msfixed32s* default_instance_;
};
// -------------------------------------------------------------------

class msfixed64s : public ::google::protobuf::Message {
 public:
  msfixed64s();
  virtual ~msfixed64s();

  msfixed64s(const msfixed64s& from);

  inline msfixed64s& operator=(const msfixed64s& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msfixed64s& default_instance();

  void Swap(msfixed64s* other);

  // implements Message ----------------------------------------------

  msfixed64s* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msfixed64s& from);
  void MergeFrom(const msfixed64s& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sfixed64 m1 = 1;
  inline bool has_m1() const;
  inline void clear_m1();
  static const int kM1FieldNumber = 1;
  inline ::google::protobuf::int64 m1() const;
  inline void set_m1(::google::protobuf::int64 value);

  // required sfixed64 m2 = 2;
  inline bool has_m2() const;
  inline void clear_m2();
  static const int kM2FieldNumber = 2;
  inline ::google::protobuf::int64 m2() const;
  inline void set_m2(::google::protobuf::int64 value);

  // required sfixed64 m3 = 3;
  inline bool has_m3() const;
  inline void clear_m3();
  static const int kM3FieldNumber = 3;
  inline ::google::protobuf::int64 m3() const;
  inline void set_m3(::google::protobuf::int64 value);

  // required sfixed64 m4 = 4;
  inline bool has_m4() const;
  inline void clear_m4();
  static const int kM4FieldNumber = 4;
  inline ::google::protobuf::int64 m4() const;
  inline void set_m4(::google::protobuf::int64 value);

  // required sfixed64 m5 = 5;
  inline bool has_m5() const;
  inline void clear_m5();
  static const int kM5FieldNumber = 5;
  inline ::google::protobuf::int64 m5() const;
  inline void set_m5(::google::protobuf::int64 value);

  // required sfixed64 m6 = 6;
  inline bool has_m6() const;
  inline void clear_m6();
  static const int kM6FieldNumber = 6;
  inline ::google::protobuf::int64 m6() const;
  inline void set_m6(::google::protobuf::int64 value);

  // required sfixed64 m7 = 7;
  inline bool has_m7() const;
  inline void clear_m7();
  static const int kM7FieldNumber = 7;
  inline ::google::protobuf::int64 m7() const;
  inline void set_m7(::google::protobuf::int64 value);

  // required sfixed64 m8 = 8;
  inline bool has_m8() const;
  inline void clear_m8();
  static const int kM8FieldNumber = 8;
  inline ::google::protobuf::int64 m8() const;
  inline void set_m8(::google::protobuf::int64 value);

  // required sfixed64 m9 = 9;
  inline bool has_m9() const;
  inline void clear_m9();
  static const int kM9FieldNumber = 9;
  inline ::google::protobuf::int64 m9() const;
  inline void set_m9(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:performance.msfixed64s)
 private:
  inline void set_has_m1();
  inline void clear_has_m1();
  inline void set_has_m2();
  inline void clear_has_m2();
  inline void set_has_m3();
  inline void clear_has_m3();
  inline void set_has_m4();
  inline void clear_has_m4();
  inline void set_has_m5();
  inline void clear_has_m5();
  inline void set_has_m6();
  inline void clear_has_m6();
  inline void set_has_m7();
  inline void clear_has_m7();
  inline void set_has_m8();
  inline void clear_has_m8();
  inline void set_has_m9();
  inline void clear_has_m9();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 m1_;
  ::google::protobuf::int64 m2_;
  ::google::protobuf::int64 m3_;
  ::google::protobuf::int64 m4_;
  ::google::protobuf::int64 m5_;
  ::google::protobuf::int64 m6_;
  ::google::protobuf::int64 m7_;
  ::google::protobuf::int64 m8_;
  ::google::protobuf::int64 m9_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_Performance_2eproto();
  friend void protobuf_AssignDesc_Performance_2eproto();
  friend void protobuf_ShutdownFile_Performance_2eproto();

  void InitAsDefaultInstance();
  static msfixed64s* default_instance_;
};
// -------------------------------------------------------------------

class mfixed32s : public ::google::protobuf::Message {
 public:
  mfixed32s();
  virtual ~mfixed32s();

  mfixed32s(const mfixed32s& from);

  inline mfixed32s& operator=(const mfixed32s& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mfixed32s& default_instance();

  void Swap(mfixed32s* other);

  // implements Message ----------------------------------------------

  mfixed32s* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mfixed32s& from);
  void MergeFrom(const mfixed32s& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed32 m1 = 1;
  inline bool has_m1() const;
  inline void clear_m1();
  static const int kM1FieldNumber = 1;
  inline ::google::protobuf::uint32 m1() const;
  inline void set_m1(::google::protobuf::uint32 value);

  // required fixed32 m2 = 2;
  inline bool has_m2() const;
  inline void clear_m2();
  static const int kM2FieldNumber = 2;
  inline ::google::protobuf::uint32 m2() const;
  inline void set_m2(::google::protobuf::uint32 value);

  // required fixed32 m3 = 3;
  inline bool has_m3() const;
  inline void clear_m3();
  static const int kM3FieldNumber = 3;
  inline ::google::protobuf::uint32 m3() const;
  inline void set_m3(::google::protobuf::uint32 value);

  // required fixed32 m4 = 4;
  inline bool has_m4() const;
  inline void clear_m4();
  static const int kM4FieldNumber = 4;
  inline ::google::protobuf::uint32 m4() const;
  inline void set_m4(::google::protobuf::uint32 value);

  // required fixed32 m5 = 5;
  inline bool has_m5() const;
  inline void clear_m5();
  static const int kM5FieldNumber = 5;
  inline ::google::protobuf::uint32 m5() const;
  inline void set_m5(::google::protobuf::uint32 value);

  // required fixed32 m6 = 6;
  inline bool has_m6() const;
  inline void clear_m6();
  static const int kM6FieldNumber = 6;
  inline ::google::protobuf::uint32 m6() const;
  inline void set_m6(::google::protobuf::uint32 value);

  // required fixed32 m7 = 7;
  inline bool has_m7() const;
  inline void clear_m7();
  static const int kM7FieldNumber = 7;
  inline ::google::protobuf::uint32 m7() const;
  inline void set_m7(::google::protobuf::uint32 value);

  // required fixed32 m8 = 8;
  inline bool has_m8() const;
  inline void clear_m8();
  static const int kM8FieldNumber = 8;
  inline ::google::protobuf::uint32 m8() const;
  inline void set_m8(::google::protobuf::uint32 value);

  // required fixed32 m9 = 9;
  inline bool has_m9() const;
  inline void clear_m9();
  static const int kM9FieldNumber = 9;
  inline ::google::protobuf::uint32 m9() const;
  inline void set_m9(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:performance.mfixed32s)
 private:
  inline void set_has_m1();
  inline void clear_has_m1();
  inline void set_has_m2();
  inline void clear_has_m2();
  inline void set_has_m3();
  inline void clear_has_m3();
  inline void set_has_m4();
  inline void clear_has_m4();
  inline void set_has_m5();
  inline void clear_has_m5();
  inline void set_has_m6();
  inline void clear_has_m6();
  inline void set_has_m7();
  inline void clear_has_m7();
  inline void set_has_m8();
  inline void clear_has_m8();
  inline void set_has_m9();
  inline void clear_has_m9();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 m1_;
  ::google::protobuf::uint32 m2_;
  ::google::protobuf::uint32 m3_;
  ::google::protobuf::uint32 m4_;
  ::google::protobuf::uint32 m5_;
  ::google::protobuf::uint32 m6_;
  ::google::protobuf::uint32 m7_;
  ::google::protobuf::uint32 m8_;
  ::google::protobuf::uint32 m9_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_Performance_2eproto();
  friend void protobuf_AssignDesc_Performance_2eproto();
  friend void protobuf_ShutdownFile_Performance_2eproto();

  void InitAsDefaultInstance();
  static mfixed32s* default_instance_;
};
// -------------------------------------------------------------------

class mfixed64s : public ::google::protobuf::Message {
 public:
  mfixed64s();
  virtual ~mfixed64s();

  mfixed64s(const mfixed64s& from);

  inline mfixed64s& operator=(const mfixed64s& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mfixed64s& default_instance();

  void Swap(mfixed64s* other);

  // implements Message ----------------------------------------------

  mfixed64s* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mfixed64s& from);
  void MergeFrom(const mfixed64s& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 m1 = 1;
  inline bool has_m1() const;
  inline void clear_m1();
  static const int kM1FieldNumber = 1;
  inline ::google::protobuf::uint64 m1() const;
  inline void set_m1(::google::protobuf::uint64 value);

  // required fixed64 m2 = 2;
  inline bool has_m2() const;
  inline void clear_m2();
  static const int kM2FieldNumber = 2;
  inline ::google::protobuf::uint64 m2() const;
  inline void set_m2(::google::protobuf::uint64 value);

  // required fixed64 m3 = 3;
  inline bool has_m3() const;
  inline void clear_m3();
  static const int kM3FieldNumber = 3;
  inline ::google::protobuf::uint64 m3() const;
  inline void set_m3(::google::protobuf::uint64 value);

  // required fixed64 m4 = 4;
  inline bool has_m4() const;
  inline void clear_m4();
  static const int kM4FieldNumber = 4;
  inline ::google::protobuf::uint64 m4() const;
  inline void set_m4(::google::protobuf::uint64 value);

  // required fixed64 m5 = 5;
  inline bool has_m5() const;
  inline void clear_m5();
  static const int kM5FieldNumber = 5;
  inline ::google::protobuf::uint64 m5() const;
  inline void set_m5(::google::protobuf::uint64 value);

  // required fixed64 m6 = 6;
  inline bool has_m6() const;
  inline void clear_m6();
  static const int kM6FieldNumber = 6;
  inline ::google::protobuf::uint64 m6() const;
  inline void set_m6(::google::protobuf::uint64 value);

  // required fixed64 m7 = 7;
  inline bool has_m7() const;
  inline void clear_m7();
  static const int kM7FieldNumber = 7;
  inline ::google::protobuf::uint64 m7() const;
  inline void set_m7(::google::protobuf::uint64 value);

  // required fixed64 m8 = 8;
  inline bool has_m8() const;
  inline void clear_m8();
  static const int kM8FieldNumber = 8;
  inline ::google::protobuf::uint64 m8() const;
  inline void set_m8(::google::protobuf::uint64 value);

  // required fixed64 m9 = 9;
  inline bool has_m9() const;
  inline void clear_m9();
  static const int kM9FieldNumber = 9;
  inline ::google::protobuf::uint64 m9() const;
  inline void set_m9(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:performance.mfixed64s)
 private:
  inline void set_has_m1();
  inline void clear_has_m1();
  inline void set_has_m2();
  inline void clear_has_m2();
  inline void set_has_m3();
  inline void clear_has_m3();
  inline void set_has_m4();
  inline void clear_has_m4();
  inline void set_has_m5();
  inline void clear_has_m5();
  inline void set_has_m6();
  inline void clear_has_m6();
  inline void set_has_m7();
  inline void clear_has_m7();
  inline void set_has_m8();
  inline void clear_has_m8();
  inline void set_has_m9();
  inline void clear_has_m9();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 m1_;
  ::google::protobuf::uint64 m2_;
  ::google::protobuf::uint64 m3_;
  ::google::protobuf::uint64 m4_;
  ::google::protobuf::uint64 m5_;
  ::google::protobuf::uint64 m6_;
  ::google::protobuf::uint64 m7_;
  ::google::protobuf::uint64 m8_;
  ::google::protobuf::uint64 m9_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_Performance_2eproto();
  friend void protobuf_AssignDesc_Performance_2eproto();
  friend void protobuf_ShutdownFile_Performance_2eproto();

  void InitAsDefaultInstance();
  static mfixed64s* default_instance_;
};
// -------------------------------------------------------------------

class mstrings : public ::google::protobuf::Message {
 public:
  mstrings();
  virtual ~mstrings();

  mstrings(const mstrings& from);

  inline mstrings& operator=(const mstrings& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mstrings& default_instance();

  void Swap(mstrings* other);

  // implements Message ----------------------------------------------

  mstrings* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mstrings& from);
  void MergeFrom(const mstrings& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string m1 = 1;
  inline bool has_m1() const;
  inline void clear_m1();
  static const int kM1FieldNumber = 1;
  inline const ::std::string& m1() const;
  inline void set_m1(const ::std::string& value);
  inline void set_m1(const char* value);
  inline void set_m1(const char* value, size_t size);
  inline ::std::string* mutable_m1();
  inline ::std::string* release_m1();
  inline void set_allocated_m1(::std::string* m1);

  // required string m2 = 2;
  inline bool has_m2() const;
  inline void clear_m2();
  static const int kM2FieldNumber = 2;
  inline const ::std::string& m2() const;
  inline void set_m2(const ::std::string& value);
  inline void set_m2(const char* value);
  inline void set_m2(const char* value, size_t size);
  inline ::std::string* mutable_m2();
  inline ::std::string* release_m2();
  inline void set_allocated_m2(::std::string* m2);

  // required string m3 = 3;
  inline bool has_m3() const;
  inline void clear_m3();
  static const int kM3FieldNumber = 3;
  inline const ::std::string& m3() const;
  inline void set_m3(const ::std::string& value);
  inline void set_m3(const char* value);
  inline void set_m3(const char* value, size_t size);
  inline ::std::string* mutable_m3();
  inline ::std::string* release_m3();
  inline void set_allocated_m3(::std::string* m3);

  // required string m4 = 4;
  inline bool has_m4() const;
  inline void clear_m4();
  static const int kM4FieldNumber = 4;
  inline const ::std::string& m4() const;
  inline void set_m4(const ::std::string& value);
  inline void set_m4(const char* value);
  inline void set_m4(const char* value, size_t size);
  inline ::std::string* mutable_m4();
  inline ::std::string* release_m4();
  inline void set_allocated_m4(::std::string* m4);

  // required string m5 = 5;
  inline bool has_m5() const;
  inline void clear_m5();
  static const int kM5FieldNumber = 5;
  inline const ::std::string& m5() const;
  inline void set_m5(const ::std::string& value);
  inline void set_m5(const char* value);
  inline void set_m5(const char* value, size_t size);
  inline ::std::string* mutable_m5();
  inline ::std::string* release_m5();
  inline void set_allocated_m5(::std::string* m5);

  // required string m6 = 6;
  inline bool has_m6() const;
  inline void clear_m6();
  static const int kM6FieldNumber = 6;
  inline const ::std::string& m6() const;
  inline void set_m6(const ::std::string& value);
  inline void set_m6(const char* value);
  inline void set_m6(const char* value, size_t size);
  inline ::std::string* mutable_m6();
  inline ::std::string* release_m6();
  inline void set_allocated_m6(::std::string* m6);

  // required string m7 = 7;
  inline bool has_m7() const;
  inline void clear_m7();
  static const int kM7FieldNumber = 7;
  inline const ::std::string& m7() const;
  inline void set_m7(const ::std::string& value);
  inline void set_m7(const char* value);
  inline void set_m7(const char* value, size_t size);
  inline ::std::string* mutable_m7();
  inline ::std::string* release_m7();
  inline void set_allocated_m7(::std::string* m7);

  // required string m8 = 8;
  inline bool has_m8() const;
  inline void clear_m8();
  static const int kM8FieldNumber = 8;
  inline const ::std::string& m8() const;
  inline void set_m8(const ::std::string& value);
  inline void set_m8(const char* value);
  inline void set_m8(const char* value, size_t size);
  inline ::std::string* mutable_m8();
  inline ::std::string* release_m8();
  inline void set_allocated_m8(::std::string* m8);

  // required string m9 = 9;
  inline bool has_m9() const;
  inline void clear_m9();
  static const int kM9FieldNumber = 9;
  inline const ::std::string& m9() const;
  inline void set_m9(const ::std::string& value);
  inline void set_m9(const char* value);
  inline void set_m9(const char* value, size_t size);
  inline ::std::string* mutable_m9();
  inline ::std::string* release_m9();
  inline void set_allocated_m9(::std::string* m9);

  // @@protoc_insertion_point(class_scope:performance.mstrings)
 private:
  inline void set_has_m1();
  inline void clear_has_m1();
  inline void set_has_m2();
  inline void clear_has_m2();
  inline void set_has_m3();
  inline void clear_has_m3();
  inline void set_has_m4();
  inline void clear_has_m4();
  inline void set_has_m5();
  inline void clear_has_m5();
  inline void set_has_m6();
  inline void clear_has_m6();
  inline void set_has_m7();
  inline void clear_has_m7();
  inline void set_has_m8();
  inline void clear_has_m8();
  inline void set_has_m9();
  inline void clear_has_m9();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* m1_;
  ::std::string* m2_;
  ::std::string* m3_;
  ::std::string* m4_;
  ::std::string* m5_;
  ::std::string* m6_;
  ::std::string* m7_;
  ::std::string* m8_;
  ::std::string* m9_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_Performance_2eproto();
  friend void protobuf_AssignDesc_Performance_2eproto();
  friend void protobuf_ShutdownFile_Performance_2eproto();

  void InitAsDefaultInstance();
  static mstrings* default_instance_;
};
// -------------------------------------------------------------------

class Performance : public ::google::protobuf::Message {
 public:
  Performance();
  virtual ~Performance();

  Performance(const Performance& from);

  inline Performance& operator=(const Performance& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Performance& default_instance();

  void Swap(Performance* other);

  // implements Message ----------------------------------------------

  Performance* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Performance& from);
  void MergeFrom(const Performance& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .performance.mfloats mf = 1;
  inline bool has_mf() const;
  inline void clear_mf();
  static const int kMfFieldNumber = 1;
  inline const ::performance::mfloats& mf() const;
  inline ::performance::mfloats* mutable_mf();
  inline ::performance::mfloats* release_mf();
  inline void set_allocated_mf(::performance::mfloats* mf);

  // required .performance.mdoubles md = 2;
  inline bool has_md() const;
  inline void clear_md();
  static const int kMdFieldNumber = 2;
  inline const ::performance::mdoubles& md() const;
  inline ::performance::mdoubles* mutable_md();
  inline ::performance::mdoubles* release_md();
  inline void set_allocated_md(::performance::mdoubles* md);

  // required .performance.msfixed32s msf3 = 3;
  inline bool has_msf3() const;
  inline void clear_msf3();
  static const int kMsf3FieldNumber = 3;
  inline const ::performance::msfixed32s& msf3() const;
  inline ::performance::msfixed32s* mutable_msf3();
  inline ::performance::msfixed32s* release_msf3();
  inline void set_allocated_msf3(::performance::msfixed32s* msf3);

  // required .performance.msfixed64s msf6 = 4;
  inline bool has_msf6() const;
  inline void clear_msf6();
  static const int kMsf6FieldNumber = 4;
  inline const ::performance::msfixed64s& msf6() const;
  inline ::performance::msfixed64s* mutable_msf6();
  inline ::performance::msfixed64s* release_msf6();
  inline void set_allocated_msf6(::performance::msfixed64s* msf6);

  // required .performance.mfixed32s mf3 = 5;
  inline bool has_mf3() const;
  inline void clear_mf3();
  static const int kMf3FieldNumber = 5;
  inline const ::performance::mfixed32s& mf3() const;
  inline ::performance::mfixed32s* mutable_mf3();
  inline ::performance::mfixed32s* release_mf3();
  inline void set_allocated_mf3(::performance::mfixed32s* mf3);

  // required .performance.mfixed64s mf6 = 6;
  inline bool has_mf6() const;
  inline void clear_mf6();
  static const int kMf6FieldNumber = 6;
  inline const ::performance::mfixed64s& mf6() const;
  inline ::performance::mfixed64s* mutable_mf6();
  inline ::performance::mfixed64s* release_mf6();
  inline void set_allocated_mf6(::performance::mfixed64s* mf6);

  // required .performance.mstrings mstr = 7;
  inline bool has_mstr() const;
  inline void clear_mstr();
  static const int kMstrFieldNumber = 7;
  inline const ::performance::mstrings& mstr() const;
  inline ::performance::mstrings* mutable_mstr();
  inline ::performance::mstrings* release_mstr();
  inline void set_allocated_mstr(::performance::mstrings* mstr);

  // @@protoc_insertion_point(class_scope:performance.Performance)
 private:
  inline void set_has_mf();
  inline void clear_has_mf();
  inline void set_has_md();
  inline void clear_has_md();
  inline void set_has_msf3();
  inline void clear_has_msf3();
  inline void set_has_msf6();
  inline void clear_has_msf6();
  inline void set_has_mf3();
  inline void clear_has_mf3();
  inline void set_has_mf6();
  inline void clear_has_mf6();
  inline void set_has_mstr();
  inline void clear_has_mstr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::performance::mfloats* mf_;
  ::performance::mdoubles* md_;
  ::performance::msfixed32s* msf3_;
  ::performance::msfixed64s* msf6_;
  ::performance::mfixed32s* mf3_;
  ::performance::mfixed64s* mf6_;
  ::performance::mstrings* mstr_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_Performance_2eproto();
  friend void protobuf_AssignDesc_Performance_2eproto();
  friend void protobuf_ShutdownFile_Performance_2eproto();

  void InitAsDefaultInstance();
  static Performance* default_instance_;
};
// ===================================================================


// ===================================================================

// mfloats

// required float m1 = 1;
inline bool mfloats::has_m1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mfloats::set_has_m1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mfloats::clear_has_m1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mfloats::clear_m1() {
  m1_ = 0;
  clear_has_m1();
}
inline float mfloats::m1() const {
  return m1_;
}
inline void mfloats::set_m1(float value) {
  set_has_m1();
  m1_ = value;
}

// required float m2 = 2;
inline bool mfloats::has_m2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mfloats::set_has_m2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mfloats::clear_has_m2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mfloats::clear_m2() {
  m2_ = 0;
  clear_has_m2();
}
inline float mfloats::m2() const {
  return m2_;
}
inline void mfloats::set_m2(float value) {
  set_has_m2();
  m2_ = value;
}

// required float m3 = 3;
inline bool mfloats::has_m3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void mfloats::set_has_m3() {
  _has_bits_[0] |= 0x00000004u;
}
inline void mfloats::clear_has_m3() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void mfloats::clear_m3() {
  m3_ = 0;
  clear_has_m3();
}
inline float mfloats::m3() const {
  return m3_;
}
inline void mfloats::set_m3(float value) {
  set_has_m3();
  m3_ = value;
}

// required float m4 = 4;
inline bool mfloats::has_m4() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void mfloats::set_has_m4() {
  _has_bits_[0] |= 0x00000008u;
}
inline void mfloats::clear_has_m4() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void mfloats::clear_m4() {
  m4_ = 0;
  clear_has_m4();
}
inline float mfloats::m4() const {
  return m4_;
}
inline void mfloats::set_m4(float value) {
  set_has_m4();
  m4_ = value;
}

// required float m5 = 5;
inline bool mfloats::has_m5() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void mfloats::set_has_m5() {
  _has_bits_[0] |= 0x00000010u;
}
inline void mfloats::clear_has_m5() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void mfloats::clear_m5() {
  m5_ = 0;
  clear_has_m5();
}
inline float mfloats::m5() const {
  return m5_;
}
inline void mfloats::set_m5(float value) {
  set_has_m5();
  m5_ = value;
}

// required float m6 = 6;
inline bool mfloats::has_m6() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void mfloats::set_has_m6() {
  _has_bits_[0] |= 0x00000020u;
}
inline void mfloats::clear_has_m6() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void mfloats::clear_m6() {
  m6_ = 0;
  clear_has_m6();
}
inline float mfloats::m6() const {
  return m6_;
}
inline void mfloats::set_m6(float value) {
  set_has_m6();
  m6_ = value;
}

// required float m7 = 7;
inline bool mfloats::has_m7() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void mfloats::set_has_m7() {
  _has_bits_[0] |= 0x00000040u;
}
inline void mfloats::clear_has_m7() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void mfloats::clear_m7() {
  m7_ = 0;
  clear_has_m7();
}
inline float mfloats::m7() const {
  return m7_;
}
inline void mfloats::set_m7(float value) {
  set_has_m7();
  m7_ = value;
}

// required float m8 = 8;
inline bool mfloats::has_m8() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void mfloats::set_has_m8() {
  _has_bits_[0] |= 0x00000080u;
}
inline void mfloats::clear_has_m8() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void mfloats::clear_m8() {
  m8_ = 0;
  clear_has_m8();
}
inline float mfloats::m8() const {
  return m8_;
}
inline void mfloats::set_m8(float value) {
  set_has_m8();
  m8_ = value;
}

// required float m9 = 9;
inline bool mfloats::has_m9() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void mfloats::set_has_m9() {
  _has_bits_[0] |= 0x00000100u;
}
inline void mfloats::clear_has_m9() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void mfloats::clear_m9() {
  m9_ = 0;
  clear_has_m9();
}
inline float mfloats::m9() const {
  return m9_;
}
inline void mfloats::set_m9(float value) {
  set_has_m9();
  m9_ = value;
}

// -------------------------------------------------------------------

// mdoubles

// required double m1 = 1;
inline bool mdoubles::has_m1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mdoubles::set_has_m1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mdoubles::clear_has_m1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mdoubles::clear_m1() {
  m1_ = 0;
  clear_has_m1();
}
inline double mdoubles::m1() const {
  return m1_;
}
inline void mdoubles::set_m1(double value) {
  set_has_m1();
  m1_ = value;
}

// required double m2 = 2;
inline bool mdoubles::has_m2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mdoubles::set_has_m2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mdoubles::clear_has_m2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mdoubles::clear_m2() {
  m2_ = 0;
  clear_has_m2();
}
inline double mdoubles::m2() const {
  return m2_;
}
inline void mdoubles::set_m2(double value) {
  set_has_m2();
  m2_ = value;
}

// required double m3 = 3;
inline bool mdoubles::has_m3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void mdoubles::set_has_m3() {
  _has_bits_[0] |= 0x00000004u;
}
inline void mdoubles::clear_has_m3() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void mdoubles::clear_m3() {
  m3_ = 0;
  clear_has_m3();
}
inline double mdoubles::m3() const {
  return m3_;
}
inline void mdoubles::set_m3(double value) {
  set_has_m3();
  m3_ = value;
}

// required double m4 = 4;
inline bool mdoubles::has_m4() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void mdoubles::set_has_m4() {
  _has_bits_[0] |= 0x00000008u;
}
inline void mdoubles::clear_has_m4() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void mdoubles::clear_m4() {
  m4_ = 0;
  clear_has_m4();
}
inline double mdoubles::m4() const {
  return m4_;
}
inline void mdoubles::set_m4(double value) {
  set_has_m4();
  m4_ = value;
}

// required double m5 = 5;
inline bool mdoubles::has_m5() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void mdoubles::set_has_m5() {
  _has_bits_[0] |= 0x00000010u;
}
inline void mdoubles::clear_has_m5() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void mdoubles::clear_m5() {
  m5_ = 0;
  clear_has_m5();
}
inline double mdoubles::m5() const {
  return m5_;
}
inline void mdoubles::set_m5(double value) {
  set_has_m5();
  m5_ = value;
}

// required double m6 = 6;
inline bool mdoubles::has_m6() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void mdoubles::set_has_m6() {
  _has_bits_[0] |= 0x00000020u;
}
inline void mdoubles::clear_has_m6() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void mdoubles::clear_m6() {
  m6_ = 0;
  clear_has_m6();
}
inline double mdoubles::m6() const {
  return m6_;
}
inline void mdoubles::set_m6(double value) {
  set_has_m6();
  m6_ = value;
}

// required double m7 = 7;
inline bool mdoubles::has_m7() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void mdoubles::set_has_m7() {
  _has_bits_[0] |= 0x00000040u;
}
inline void mdoubles::clear_has_m7() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void mdoubles::clear_m7() {
  m7_ = 0;
  clear_has_m7();
}
inline double mdoubles::m7() const {
  return m7_;
}
inline void mdoubles::set_m7(double value) {
  set_has_m7();
  m7_ = value;
}

// required double m8 = 8;
inline bool mdoubles::has_m8() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void mdoubles::set_has_m8() {
  _has_bits_[0] |= 0x00000080u;
}
inline void mdoubles::clear_has_m8() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void mdoubles::clear_m8() {
  m8_ = 0;
  clear_has_m8();
}
inline double mdoubles::m8() const {
  return m8_;
}
inline void mdoubles::set_m8(double value) {
  set_has_m8();
  m8_ = value;
}

// required double m9 = 9;
inline bool mdoubles::has_m9() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void mdoubles::set_has_m9() {
  _has_bits_[0] |= 0x00000100u;
}
inline void mdoubles::clear_has_m9() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void mdoubles::clear_m9() {
  m9_ = 0;
  clear_has_m9();
}
inline double mdoubles::m9() const {
  return m9_;
}
inline void mdoubles::set_m9(double value) {
  set_has_m9();
  m9_ = value;
}

// -------------------------------------------------------------------

// msfixed32s

// required sfixed32 m1 = 1;
inline bool msfixed32s::has_m1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msfixed32s::set_has_m1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msfixed32s::clear_has_m1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msfixed32s::clear_m1() {
  m1_ = 0;
  clear_has_m1();
}
inline ::google::protobuf::int32 msfixed32s::m1() const {
  return m1_;
}
inline void msfixed32s::set_m1(::google::protobuf::int32 value) {
  set_has_m1();
  m1_ = value;
}

// required sfixed32 m2 = 2;
inline bool msfixed32s::has_m2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msfixed32s::set_has_m2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msfixed32s::clear_has_m2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msfixed32s::clear_m2() {
  m2_ = 0;
  clear_has_m2();
}
inline ::google::protobuf::int32 msfixed32s::m2() const {
  return m2_;
}
inline void msfixed32s::set_m2(::google::protobuf::int32 value) {
  set_has_m2();
  m2_ = value;
}

// required sfixed32 m3 = 3;
inline bool msfixed32s::has_m3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msfixed32s::set_has_m3() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msfixed32s::clear_has_m3() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msfixed32s::clear_m3() {
  m3_ = 0;
  clear_has_m3();
}
inline ::google::protobuf::int32 msfixed32s::m3() const {
  return m3_;
}
inline void msfixed32s::set_m3(::google::protobuf::int32 value) {
  set_has_m3();
  m3_ = value;
}

// required sfixed32 m4 = 4;
inline bool msfixed32s::has_m4() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msfixed32s::set_has_m4() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msfixed32s::clear_has_m4() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msfixed32s::clear_m4() {
  m4_ = 0;
  clear_has_m4();
}
inline ::google::protobuf::int32 msfixed32s::m4() const {
  return m4_;
}
inline void msfixed32s::set_m4(::google::protobuf::int32 value) {
  set_has_m4();
  m4_ = value;
}

// required sfixed32 m5 = 5;
inline bool msfixed32s::has_m5() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void msfixed32s::set_has_m5() {
  _has_bits_[0] |= 0x00000010u;
}
inline void msfixed32s::clear_has_m5() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void msfixed32s::clear_m5() {
  m5_ = 0;
  clear_has_m5();
}
inline ::google::protobuf::int32 msfixed32s::m5() const {
  return m5_;
}
inline void msfixed32s::set_m5(::google::protobuf::int32 value) {
  set_has_m5();
  m5_ = value;
}

// required sfixed32 m6 = 6;
inline bool msfixed32s::has_m6() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void msfixed32s::set_has_m6() {
  _has_bits_[0] |= 0x00000020u;
}
inline void msfixed32s::clear_has_m6() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void msfixed32s::clear_m6() {
  m6_ = 0;
  clear_has_m6();
}
inline ::google::protobuf::int32 msfixed32s::m6() const {
  return m6_;
}
inline void msfixed32s::set_m6(::google::protobuf::int32 value) {
  set_has_m6();
  m6_ = value;
}

// required sfixed32 m7 = 7;
inline bool msfixed32s::has_m7() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void msfixed32s::set_has_m7() {
  _has_bits_[0] |= 0x00000040u;
}
inline void msfixed32s::clear_has_m7() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void msfixed32s::clear_m7() {
  m7_ = 0;
  clear_has_m7();
}
inline ::google::protobuf::int32 msfixed32s::m7() const {
  return m7_;
}
inline void msfixed32s::set_m7(::google::protobuf::int32 value) {
  set_has_m7();
  m7_ = value;
}

// required sfixed32 m8 = 8;
inline bool msfixed32s::has_m8() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void msfixed32s::set_has_m8() {
  _has_bits_[0] |= 0x00000080u;
}
inline void msfixed32s::clear_has_m8() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void msfixed32s::clear_m8() {
  m8_ = 0;
  clear_has_m8();
}
inline ::google::protobuf::int32 msfixed32s::m8() const {
  return m8_;
}
inline void msfixed32s::set_m8(::google::protobuf::int32 value) {
  set_has_m8();
  m8_ = value;
}

// required sfixed32 m9 = 9;
inline bool msfixed32s::has_m9() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void msfixed32s::set_has_m9() {
  _has_bits_[0] |= 0x00000100u;
}
inline void msfixed32s::clear_has_m9() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void msfixed32s::clear_m9() {
  m9_ = 0;
  clear_has_m9();
}
inline ::google::protobuf::int32 msfixed32s::m9() const {
  return m9_;
}
inline void msfixed32s::set_m9(::google::protobuf::int32 value) {
  set_has_m9();
  m9_ = value;
}

// -------------------------------------------------------------------

// msfixed64s

// required sfixed64 m1 = 1;
inline bool msfixed64s::has_m1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msfixed64s::set_has_m1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msfixed64s::clear_has_m1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msfixed64s::clear_m1() {
  m1_ = GOOGLE_LONGLONG(0);
  clear_has_m1();
}
inline ::google::protobuf::int64 msfixed64s::m1() const {
  return m1_;
}
inline void msfixed64s::set_m1(::google::protobuf::int64 value) {
  set_has_m1();
  m1_ = value;
}

// required sfixed64 m2 = 2;
inline bool msfixed64s::has_m2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msfixed64s::set_has_m2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msfixed64s::clear_has_m2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msfixed64s::clear_m2() {
  m2_ = GOOGLE_LONGLONG(0);
  clear_has_m2();
}
inline ::google::protobuf::int64 msfixed64s::m2() const {
  return m2_;
}
inline void msfixed64s::set_m2(::google::protobuf::int64 value) {
  set_has_m2();
  m2_ = value;
}

// required sfixed64 m3 = 3;
inline bool msfixed64s::has_m3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msfixed64s::set_has_m3() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msfixed64s::clear_has_m3() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msfixed64s::clear_m3() {
  m3_ = GOOGLE_LONGLONG(0);
  clear_has_m3();
}
inline ::google::protobuf::int64 msfixed64s::m3() const {
  return m3_;
}
inline void msfixed64s::set_m3(::google::protobuf::int64 value) {
  set_has_m3();
  m3_ = value;
}

// required sfixed64 m4 = 4;
inline bool msfixed64s::has_m4() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msfixed64s::set_has_m4() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msfixed64s::clear_has_m4() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msfixed64s::clear_m4() {
  m4_ = GOOGLE_LONGLONG(0);
  clear_has_m4();
}
inline ::google::protobuf::int64 msfixed64s::m4() const {
  return m4_;
}
inline void msfixed64s::set_m4(::google::protobuf::int64 value) {
  set_has_m4();
  m4_ = value;
}

// required sfixed64 m5 = 5;
inline bool msfixed64s::has_m5() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void msfixed64s::set_has_m5() {
  _has_bits_[0] |= 0x00000010u;
}
inline void msfixed64s::clear_has_m5() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void msfixed64s::clear_m5() {
  m5_ = GOOGLE_LONGLONG(0);
  clear_has_m5();
}
inline ::google::protobuf::int64 msfixed64s::m5() const {
  return m5_;
}
inline void msfixed64s::set_m5(::google::protobuf::int64 value) {
  set_has_m5();
  m5_ = value;
}

// required sfixed64 m6 = 6;
inline bool msfixed64s::has_m6() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void msfixed64s::set_has_m6() {
  _has_bits_[0] |= 0x00000020u;
}
inline void msfixed64s::clear_has_m6() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void msfixed64s::clear_m6() {
  m6_ = GOOGLE_LONGLONG(0);
  clear_has_m6();
}
inline ::google::protobuf::int64 msfixed64s::m6() const {
  return m6_;
}
inline void msfixed64s::set_m6(::google::protobuf::int64 value) {
  set_has_m6();
  m6_ = value;
}

// required sfixed64 m7 = 7;
inline bool msfixed64s::has_m7() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void msfixed64s::set_has_m7() {
  _has_bits_[0] |= 0x00000040u;
}
inline void msfixed64s::clear_has_m7() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void msfixed64s::clear_m7() {
  m7_ = GOOGLE_LONGLONG(0);
  clear_has_m7();
}
inline ::google::protobuf::int64 msfixed64s::m7() const {
  return m7_;
}
inline void msfixed64s::set_m7(::google::protobuf::int64 value) {
  set_has_m7();
  m7_ = value;
}

// required sfixed64 m8 = 8;
inline bool msfixed64s::has_m8() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void msfixed64s::set_has_m8() {
  _has_bits_[0] |= 0x00000080u;
}
inline void msfixed64s::clear_has_m8() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void msfixed64s::clear_m8() {
  m8_ = GOOGLE_LONGLONG(0);
  clear_has_m8();
}
inline ::google::protobuf::int64 msfixed64s::m8() const {
  return m8_;
}
inline void msfixed64s::set_m8(::google::protobuf::int64 value) {
  set_has_m8();
  m8_ = value;
}

// required sfixed64 m9 = 9;
inline bool msfixed64s::has_m9() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void msfixed64s::set_has_m9() {
  _has_bits_[0] |= 0x00000100u;
}
inline void msfixed64s::clear_has_m9() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void msfixed64s::clear_m9() {
  m9_ = GOOGLE_LONGLONG(0);
  clear_has_m9();
}
inline ::google::protobuf::int64 msfixed64s::m9() const {
  return m9_;
}
inline void msfixed64s::set_m9(::google::protobuf::int64 value) {
  set_has_m9();
  m9_ = value;
}

// -------------------------------------------------------------------

// mfixed32s

// required fixed32 m1 = 1;
inline bool mfixed32s::has_m1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mfixed32s::set_has_m1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mfixed32s::clear_has_m1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mfixed32s::clear_m1() {
  m1_ = 0u;
  clear_has_m1();
}
inline ::google::protobuf::uint32 mfixed32s::m1() const {
  return m1_;
}
inline void mfixed32s::set_m1(::google::protobuf::uint32 value) {
  set_has_m1();
  m1_ = value;
}

// required fixed32 m2 = 2;
inline bool mfixed32s::has_m2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mfixed32s::set_has_m2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mfixed32s::clear_has_m2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mfixed32s::clear_m2() {
  m2_ = 0u;
  clear_has_m2();
}
inline ::google::protobuf::uint32 mfixed32s::m2() const {
  return m2_;
}
inline void mfixed32s::set_m2(::google::protobuf::uint32 value) {
  set_has_m2();
  m2_ = value;
}

// required fixed32 m3 = 3;
inline bool mfixed32s::has_m3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void mfixed32s::set_has_m3() {
  _has_bits_[0] |= 0x00000004u;
}
inline void mfixed32s::clear_has_m3() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void mfixed32s::clear_m3() {
  m3_ = 0u;
  clear_has_m3();
}
inline ::google::protobuf::uint32 mfixed32s::m3() const {
  return m3_;
}
inline void mfixed32s::set_m3(::google::protobuf::uint32 value) {
  set_has_m3();
  m3_ = value;
}

// required fixed32 m4 = 4;
inline bool mfixed32s::has_m4() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void mfixed32s::set_has_m4() {
  _has_bits_[0] |= 0x00000008u;
}
inline void mfixed32s::clear_has_m4() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void mfixed32s::clear_m4() {
  m4_ = 0u;
  clear_has_m4();
}
inline ::google::protobuf::uint32 mfixed32s::m4() const {
  return m4_;
}
inline void mfixed32s::set_m4(::google::protobuf::uint32 value) {
  set_has_m4();
  m4_ = value;
}

// required fixed32 m5 = 5;
inline bool mfixed32s::has_m5() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void mfixed32s::set_has_m5() {
  _has_bits_[0] |= 0x00000010u;
}
inline void mfixed32s::clear_has_m5() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void mfixed32s::clear_m5() {
  m5_ = 0u;
  clear_has_m5();
}
inline ::google::protobuf::uint32 mfixed32s::m5() const {
  return m5_;
}
inline void mfixed32s::set_m5(::google::protobuf::uint32 value) {
  set_has_m5();
  m5_ = value;
}

// required fixed32 m6 = 6;
inline bool mfixed32s::has_m6() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void mfixed32s::set_has_m6() {
  _has_bits_[0] |= 0x00000020u;
}
inline void mfixed32s::clear_has_m6() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void mfixed32s::clear_m6() {
  m6_ = 0u;
  clear_has_m6();
}
inline ::google::protobuf::uint32 mfixed32s::m6() const {
  return m6_;
}
inline void mfixed32s::set_m6(::google::protobuf::uint32 value) {
  set_has_m6();
  m6_ = value;
}

// required fixed32 m7 = 7;
inline bool mfixed32s::has_m7() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void mfixed32s::set_has_m7() {
  _has_bits_[0] |= 0x00000040u;
}
inline void mfixed32s::clear_has_m7() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void mfixed32s::clear_m7() {
  m7_ = 0u;
  clear_has_m7();
}
inline ::google::protobuf::uint32 mfixed32s::m7() const {
  return m7_;
}
inline void mfixed32s::set_m7(::google::protobuf::uint32 value) {
  set_has_m7();
  m7_ = value;
}

// required fixed32 m8 = 8;
inline bool mfixed32s::has_m8() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void mfixed32s::set_has_m8() {
  _has_bits_[0] |= 0x00000080u;
}
inline void mfixed32s::clear_has_m8() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void mfixed32s::clear_m8() {
  m8_ = 0u;
  clear_has_m8();
}
inline ::google::protobuf::uint32 mfixed32s::m8() const {
  return m8_;
}
inline void mfixed32s::set_m8(::google::protobuf::uint32 value) {
  set_has_m8();
  m8_ = value;
}

// required fixed32 m9 = 9;
inline bool mfixed32s::has_m9() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void mfixed32s::set_has_m9() {
  _has_bits_[0] |= 0x00000100u;
}
inline void mfixed32s::clear_has_m9() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void mfixed32s::clear_m9() {
  m9_ = 0u;
  clear_has_m9();
}
inline ::google::protobuf::uint32 mfixed32s::m9() const {
  return m9_;
}
inline void mfixed32s::set_m9(::google::protobuf::uint32 value) {
  set_has_m9();
  m9_ = value;
}

// -------------------------------------------------------------------

// mfixed64s

// required fixed64 m1 = 1;
inline bool mfixed64s::has_m1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mfixed64s::set_has_m1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mfixed64s::clear_has_m1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mfixed64s::clear_m1() {
  m1_ = GOOGLE_ULONGLONG(0);
  clear_has_m1();
}
inline ::google::protobuf::uint64 mfixed64s::m1() const {
  return m1_;
}
inline void mfixed64s::set_m1(::google::protobuf::uint64 value) {
  set_has_m1();
  m1_ = value;
}

// required fixed64 m2 = 2;
inline bool mfixed64s::has_m2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mfixed64s::set_has_m2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mfixed64s::clear_has_m2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mfixed64s::clear_m2() {
  m2_ = GOOGLE_ULONGLONG(0);
  clear_has_m2();
}
inline ::google::protobuf::uint64 mfixed64s::m2() const {
  return m2_;
}
inline void mfixed64s::set_m2(::google::protobuf::uint64 value) {
  set_has_m2();
  m2_ = value;
}

// required fixed64 m3 = 3;
inline bool mfixed64s::has_m3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void mfixed64s::set_has_m3() {
  _has_bits_[0] |= 0x00000004u;
}
inline void mfixed64s::clear_has_m3() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void mfixed64s::clear_m3() {
  m3_ = GOOGLE_ULONGLONG(0);
  clear_has_m3();
}
inline ::google::protobuf::uint64 mfixed64s::m3() const {
  return m3_;
}
inline void mfixed64s::set_m3(::google::protobuf::uint64 value) {
  set_has_m3();
  m3_ = value;
}

// required fixed64 m4 = 4;
inline bool mfixed64s::has_m4() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void mfixed64s::set_has_m4() {
  _has_bits_[0] |= 0x00000008u;
}
inline void mfixed64s::clear_has_m4() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void mfixed64s::clear_m4() {
  m4_ = GOOGLE_ULONGLONG(0);
  clear_has_m4();
}
inline ::google::protobuf::uint64 mfixed64s::m4() const {
  return m4_;
}
inline void mfixed64s::set_m4(::google::protobuf::uint64 value) {
  set_has_m4();
  m4_ = value;
}

// required fixed64 m5 = 5;
inline bool mfixed64s::has_m5() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void mfixed64s::set_has_m5() {
  _has_bits_[0] |= 0x00000010u;
}
inline void mfixed64s::clear_has_m5() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void mfixed64s::clear_m5() {
  m5_ = GOOGLE_ULONGLONG(0);
  clear_has_m5();
}
inline ::google::protobuf::uint64 mfixed64s::m5() const {
  return m5_;
}
inline void mfixed64s::set_m5(::google::protobuf::uint64 value) {
  set_has_m5();
  m5_ = value;
}

// required fixed64 m6 = 6;
inline bool mfixed64s::has_m6() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void mfixed64s::set_has_m6() {
  _has_bits_[0] |= 0x00000020u;
}
inline void mfixed64s::clear_has_m6() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void mfixed64s::clear_m6() {
  m6_ = GOOGLE_ULONGLONG(0);
  clear_has_m6();
}
inline ::google::protobuf::uint64 mfixed64s::m6() const {
  return m6_;
}
inline void mfixed64s::set_m6(::google::protobuf::uint64 value) {
  set_has_m6();
  m6_ = value;
}

// required fixed64 m7 = 7;
inline bool mfixed64s::has_m7() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void mfixed64s::set_has_m7() {
  _has_bits_[0] |= 0x00000040u;
}
inline void mfixed64s::clear_has_m7() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void mfixed64s::clear_m7() {
  m7_ = GOOGLE_ULONGLONG(0);
  clear_has_m7();
}
inline ::google::protobuf::uint64 mfixed64s::m7() const {
  return m7_;
}
inline void mfixed64s::set_m7(::google::protobuf::uint64 value) {
  set_has_m7();
  m7_ = value;
}

// required fixed64 m8 = 8;
inline bool mfixed64s::has_m8() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void mfixed64s::set_has_m8() {
  _has_bits_[0] |= 0x00000080u;
}
inline void mfixed64s::clear_has_m8() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void mfixed64s::clear_m8() {
  m8_ = GOOGLE_ULONGLONG(0);
  clear_has_m8();
}
inline ::google::protobuf::uint64 mfixed64s::m8() const {
  return m8_;
}
inline void mfixed64s::set_m8(::google::protobuf::uint64 value) {
  set_has_m8();
  m8_ = value;
}

// required fixed64 m9 = 9;
inline bool mfixed64s::has_m9() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void mfixed64s::set_has_m9() {
  _has_bits_[0] |= 0x00000100u;
}
inline void mfixed64s::clear_has_m9() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void mfixed64s::clear_m9() {
  m9_ = GOOGLE_ULONGLONG(0);
  clear_has_m9();
}
inline ::google::protobuf::uint64 mfixed64s::m9() const {
  return m9_;
}
inline void mfixed64s::set_m9(::google::protobuf::uint64 value) {
  set_has_m9();
  m9_ = value;
}

// -------------------------------------------------------------------

// mstrings

// required string m1 = 1;
inline bool mstrings::has_m1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mstrings::set_has_m1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mstrings::clear_has_m1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mstrings::clear_m1() {
  if (m1_ != &::google::protobuf::internal::kEmptyString) {
    m1_->clear();
  }
  clear_has_m1();
}
inline const ::std::string& mstrings::m1() const {
  return *m1_;
}
inline void mstrings::set_m1(const ::std::string& value) {
  set_has_m1();
  if (m1_ == &::google::protobuf::internal::kEmptyString) {
    m1_ = new ::std::string;
  }
  m1_->assign(value);
}
inline void mstrings::set_m1(const char* value) {
  set_has_m1();
  if (m1_ == &::google::protobuf::internal::kEmptyString) {
    m1_ = new ::std::string;
  }
  m1_->assign(value);
}
inline void mstrings::set_m1(const char* value, size_t size) {
  set_has_m1();
  if (m1_ == &::google::protobuf::internal::kEmptyString) {
    m1_ = new ::std::string;
  }
  m1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* mstrings::mutable_m1() {
  set_has_m1();
  if (m1_ == &::google::protobuf::internal::kEmptyString) {
    m1_ = new ::std::string;
  }
  return m1_;
}
inline ::std::string* mstrings::release_m1() {
  clear_has_m1();
  if (m1_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m1_;
    m1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void mstrings::set_allocated_m1(::std::string* m1) {
  if (m1_ != &::google::protobuf::internal::kEmptyString) {
    delete m1_;
  }
  if (m1) {
    set_has_m1();
    m1_ = m1;
  } else {
    clear_has_m1();
    m1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string m2 = 2;
inline bool mstrings::has_m2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mstrings::set_has_m2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mstrings::clear_has_m2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mstrings::clear_m2() {
  if (m2_ != &::google::protobuf::internal::kEmptyString) {
    m2_->clear();
  }
  clear_has_m2();
}
inline const ::std::string& mstrings::m2() const {
  return *m2_;
}
inline void mstrings::set_m2(const ::std::string& value) {
  set_has_m2();
  if (m2_ == &::google::protobuf::internal::kEmptyString) {
    m2_ = new ::std::string;
  }
  m2_->assign(value);
}
inline void mstrings::set_m2(const char* value) {
  set_has_m2();
  if (m2_ == &::google::protobuf::internal::kEmptyString) {
    m2_ = new ::std::string;
  }
  m2_->assign(value);
}
inline void mstrings::set_m2(const char* value, size_t size) {
  set_has_m2();
  if (m2_ == &::google::protobuf::internal::kEmptyString) {
    m2_ = new ::std::string;
  }
  m2_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* mstrings::mutable_m2() {
  set_has_m2();
  if (m2_ == &::google::protobuf::internal::kEmptyString) {
    m2_ = new ::std::string;
  }
  return m2_;
}
inline ::std::string* mstrings::release_m2() {
  clear_has_m2();
  if (m2_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m2_;
    m2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void mstrings::set_allocated_m2(::std::string* m2) {
  if (m2_ != &::google::protobuf::internal::kEmptyString) {
    delete m2_;
  }
  if (m2) {
    set_has_m2();
    m2_ = m2;
  } else {
    clear_has_m2();
    m2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string m3 = 3;
inline bool mstrings::has_m3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void mstrings::set_has_m3() {
  _has_bits_[0] |= 0x00000004u;
}
inline void mstrings::clear_has_m3() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void mstrings::clear_m3() {
  if (m3_ != &::google::protobuf::internal::kEmptyString) {
    m3_->clear();
  }
  clear_has_m3();
}
inline const ::std::string& mstrings::m3() const {
  return *m3_;
}
inline void mstrings::set_m3(const ::std::string& value) {
  set_has_m3();
  if (m3_ == &::google::protobuf::internal::kEmptyString) {
    m3_ = new ::std::string;
  }
  m3_->assign(value);
}
inline void mstrings::set_m3(const char* value) {
  set_has_m3();
  if (m3_ == &::google::protobuf::internal::kEmptyString) {
    m3_ = new ::std::string;
  }
  m3_->assign(value);
}
inline void mstrings::set_m3(const char* value, size_t size) {
  set_has_m3();
  if (m3_ == &::google::protobuf::internal::kEmptyString) {
    m3_ = new ::std::string;
  }
  m3_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* mstrings::mutable_m3() {
  set_has_m3();
  if (m3_ == &::google::protobuf::internal::kEmptyString) {
    m3_ = new ::std::string;
  }
  return m3_;
}
inline ::std::string* mstrings::release_m3() {
  clear_has_m3();
  if (m3_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m3_;
    m3_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void mstrings::set_allocated_m3(::std::string* m3) {
  if (m3_ != &::google::protobuf::internal::kEmptyString) {
    delete m3_;
  }
  if (m3) {
    set_has_m3();
    m3_ = m3;
  } else {
    clear_has_m3();
    m3_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string m4 = 4;
inline bool mstrings::has_m4() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void mstrings::set_has_m4() {
  _has_bits_[0] |= 0x00000008u;
}
inline void mstrings::clear_has_m4() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void mstrings::clear_m4() {
  if (m4_ != &::google::protobuf::internal::kEmptyString) {
    m4_->clear();
  }
  clear_has_m4();
}
inline const ::std::string& mstrings::m4() const {
  return *m4_;
}
inline void mstrings::set_m4(const ::std::string& value) {
  set_has_m4();
  if (m4_ == &::google::protobuf::internal::kEmptyString) {
    m4_ = new ::std::string;
  }
  m4_->assign(value);
}
inline void mstrings::set_m4(const char* value) {
  set_has_m4();
  if (m4_ == &::google::protobuf::internal::kEmptyString) {
    m4_ = new ::std::string;
  }
  m4_->assign(value);
}
inline void mstrings::set_m4(const char* value, size_t size) {
  set_has_m4();
  if (m4_ == &::google::protobuf::internal::kEmptyString) {
    m4_ = new ::std::string;
  }
  m4_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* mstrings::mutable_m4() {
  set_has_m4();
  if (m4_ == &::google::protobuf::internal::kEmptyString) {
    m4_ = new ::std::string;
  }
  return m4_;
}
inline ::std::string* mstrings::release_m4() {
  clear_has_m4();
  if (m4_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m4_;
    m4_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void mstrings::set_allocated_m4(::std::string* m4) {
  if (m4_ != &::google::protobuf::internal::kEmptyString) {
    delete m4_;
  }
  if (m4) {
    set_has_m4();
    m4_ = m4;
  } else {
    clear_has_m4();
    m4_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string m5 = 5;
inline bool mstrings::has_m5() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void mstrings::set_has_m5() {
  _has_bits_[0] |= 0x00000010u;
}
inline void mstrings::clear_has_m5() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void mstrings::clear_m5() {
  if (m5_ != &::google::protobuf::internal::kEmptyString) {
    m5_->clear();
  }
  clear_has_m5();
}
inline const ::std::string& mstrings::m5() const {
  return *m5_;
}
inline void mstrings::set_m5(const ::std::string& value) {
  set_has_m5();
  if (m5_ == &::google::protobuf::internal::kEmptyString) {
    m5_ = new ::std::string;
  }
  m5_->assign(value);
}
inline void mstrings::set_m5(const char* value) {
  set_has_m5();
  if (m5_ == &::google::protobuf::internal::kEmptyString) {
    m5_ = new ::std::string;
  }
  m5_->assign(value);
}
inline void mstrings::set_m5(const char* value, size_t size) {
  set_has_m5();
  if (m5_ == &::google::protobuf::internal::kEmptyString) {
    m5_ = new ::std::string;
  }
  m5_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* mstrings::mutable_m5() {
  set_has_m5();
  if (m5_ == &::google::protobuf::internal::kEmptyString) {
    m5_ = new ::std::string;
  }
  return m5_;
}
inline ::std::string* mstrings::release_m5() {
  clear_has_m5();
  if (m5_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m5_;
    m5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void mstrings::set_allocated_m5(::std::string* m5) {
  if (m5_ != &::google::protobuf::internal::kEmptyString) {
    delete m5_;
  }
  if (m5) {
    set_has_m5();
    m5_ = m5;
  } else {
    clear_has_m5();
    m5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string m6 = 6;
inline bool mstrings::has_m6() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void mstrings::set_has_m6() {
  _has_bits_[0] |= 0x00000020u;
}
inline void mstrings::clear_has_m6() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void mstrings::clear_m6() {
  if (m6_ != &::google::protobuf::internal::kEmptyString) {
    m6_->clear();
  }
  clear_has_m6();
}
inline const ::std::string& mstrings::m6() const {
  return *m6_;
}
inline void mstrings::set_m6(const ::std::string& value) {
  set_has_m6();
  if (m6_ == &::google::protobuf::internal::kEmptyString) {
    m6_ = new ::std::string;
  }
  m6_->assign(value);
}
inline void mstrings::set_m6(const char* value) {
  set_has_m6();
  if (m6_ == &::google::protobuf::internal::kEmptyString) {
    m6_ = new ::std::string;
  }
  m6_->assign(value);
}
inline void mstrings::set_m6(const char* value, size_t size) {
  set_has_m6();
  if (m6_ == &::google::protobuf::internal::kEmptyString) {
    m6_ = new ::std::string;
  }
  m6_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* mstrings::mutable_m6() {
  set_has_m6();
  if (m6_ == &::google::protobuf::internal::kEmptyString) {
    m6_ = new ::std::string;
  }
  return m6_;
}
inline ::std::string* mstrings::release_m6() {
  clear_has_m6();
  if (m6_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m6_;
    m6_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void mstrings::set_allocated_m6(::std::string* m6) {
  if (m6_ != &::google::protobuf::internal::kEmptyString) {
    delete m6_;
  }
  if (m6) {
    set_has_m6();
    m6_ = m6;
  } else {
    clear_has_m6();
    m6_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string m7 = 7;
inline bool mstrings::has_m7() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void mstrings::set_has_m7() {
  _has_bits_[0] |= 0x00000040u;
}
inline void mstrings::clear_has_m7() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void mstrings::clear_m7() {
  if (m7_ != &::google::protobuf::internal::kEmptyString) {
    m7_->clear();
  }
  clear_has_m7();
}
inline const ::std::string& mstrings::m7() const {
  return *m7_;
}
inline void mstrings::set_m7(const ::std::string& value) {
  set_has_m7();
  if (m7_ == &::google::protobuf::internal::kEmptyString) {
    m7_ = new ::std::string;
  }
  m7_->assign(value);
}
inline void mstrings::set_m7(const char* value) {
  set_has_m7();
  if (m7_ == &::google::protobuf::internal::kEmptyString) {
    m7_ = new ::std::string;
  }
  m7_->assign(value);
}
inline void mstrings::set_m7(const char* value, size_t size) {
  set_has_m7();
  if (m7_ == &::google::protobuf::internal::kEmptyString) {
    m7_ = new ::std::string;
  }
  m7_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* mstrings::mutable_m7() {
  set_has_m7();
  if (m7_ == &::google::protobuf::internal::kEmptyString) {
    m7_ = new ::std::string;
  }
  return m7_;
}
inline ::std::string* mstrings::release_m7() {
  clear_has_m7();
  if (m7_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m7_;
    m7_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void mstrings::set_allocated_m7(::std::string* m7) {
  if (m7_ != &::google::protobuf::internal::kEmptyString) {
    delete m7_;
  }
  if (m7) {
    set_has_m7();
    m7_ = m7;
  } else {
    clear_has_m7();
    m7_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string m8 = 8;
inline bool mstrings::has_m8() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void mstrings::set_has_m8() {
  _has_bits_[0] |= 0x00000080u;
}
inline void mstrings::clear_has_m8() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void mstrings::clear_m8() {
  if (m8_ != &::google::protobuf::internal::kEmptyString) {
    m8_->clear();
  }
  clear_has_m8();
}
inline const ::std::string& mstrings::m8() const {
  return *m8_;
}
inline void mstrings::set_m8(const ::std::string& value) {
  set_has_m8();
  if (m8_ == &::google::protobuf::internal::kEmptyString) {
    m8_ = new ::std::string;
  }
  m8_->assign(value);
}
inline void mstrings::set_m8(const char* value) {
  set_has_m8();
  if (m8_ == &::google::protobuf::internal::kEmptyString) {
    m8_ = new ::std::string;
  }
  m8_->assign(value);
}
inline void mstrings::set_m8(const char* value, size_t size) {
  set_has_m8();
  if (m8_ == &::google::protobuf::internal::kEmptyString) {
    m8_ = new ::std::string;
  }
  m8_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* mstrings::mutable_m8() {
  set_has_m8();
  if (m8_ == &::google::protobuf::internal::kEmptyString) {
    m8_ = new ::std::string;
  }
  return m8_;
}
inline ::std::string* mstrings::release_m8() {
  clear_has_m8();
  if (m8_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m8_;
    m8_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void mstrings::set_allocated_m8(::std::string* m8) {
  if (m8_ != &::google::protobuf::internal::kEmptyString) {
    delete m8_;
  }
  if (m8) {
    set_has_m8();
    m8_ = m8;
  } else {
    clear_has_m8();
    m8_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string m9 = 9;
inline bool mstrings::has_m9() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void mstrings::set_has_m9() {
  _has_bits_[0] |= 0x00000100u;
}
inline void mstrings::clear_has_m9() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void mstrings::clear_m9() {
  if (m9_ != &::google::protobuf::internal::kEmptyString) {
    m9_->clear();
  }
  clear_has_m9();
}
inline const ::std::string& mstrings::m9() const {
  return *m9_;
}
inline void mstrings::set_m9(const ::std::string& value) {
  set_has_m9();
  if (m9_ == &::google::protobuf::internal::kEmptyString) {
    m9_ = new ::std::string;
  }
  m9_->assign(value);
}
inline void mstrings::set_m9(const char* value) {
  set_has_m9();
  if (m9_ == &::google::protobuf::internal::kEmptyString) {
    m9_ = new ::std::string;
  }
  m9_->assign(value);
}
inline void mstrings::set_m9(const char* value, size_t size) {
  set_has_m9();
  if (m9_ == &::google::protobuf::internal::kEmptyString) {
    m9_ = new ::std::string;
  }
  m9_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* mstrings::mutable_m9() {
  set_has_m9();
  if (m9_ == &::google::protobuf::internal::kEmptyString) {
    m9_ = new ::std::string;
  }
  return m9_;
}
inline ::std::string* mstrings::release_m9() {
  clear_has_m9();
  if (m9_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m9_;
    m9_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void mstrings::set_allocated_m9(::std::string* m9) {
  if (m9_ != &::google::protobuf::internal::kEmptyString) {
    delete m9_;
  }
  if (m9) {
    set_has_m9();
    m9_ = m9;
  } else {
    clear_has_m9();
    m9_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Performance

// required .performance.mfloats mf = 1;
inline bool Performance::has_mf() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Performance::set_has_mf() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Performance::clear_has_mf() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Performance::clear_mf() {
  if (mf_ != NULL) mf_->::performance::mfloats::Clear();
  clear_has_mf();
}
inline const ::performance::mfloats& Performance::mf() const {
  return mf_ != NULL ? *mf_ : *default_instance_->mf_;
}
inline ::performance::mfloats* Performance::mutable_mf() {
  set_has_mf();
  if (mf_ == NULL) mf_ = new ::performance::mfloats;
  return mf_;
}
inline ::performance::mfloats* Performance::release_mf() {
  clear_has_mf();
  ::performance::mfloats* temp = mf_;
  mf_ = NULL;
  return temp;
}
inline void Performance::set_allocated_mf(::performance::mfloats* mf) {
  delete mf_;
  mf_ = mf;
  if (mf) {
    set_has_mf();
  } else {
    clear_has_mf();
  }
}

// required .performance.mdoubles md = 2;
inline bool Performance::has_md() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Performance::set_has_md() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Performance::clear_has_md() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Performance::clear_md() {
  if (md_ != NULL) md_->::performance::mdoubles::Clear();
  clear_has_md();
}
inline const ::performance::mdoubles& Performance::md() const {
  return md_ != NULL ? *md_ : *default_instance_->md_;
}
inline ::performance::mdoubles* Performance::mutable_md() {
  set_has_md();
  if (md_ == NULL) md_ = new ::performance::mdoubles;
  return md_;
}
inline ::performance::mdoubles* Performance::release_md() {
  clear_has_md();
  ::performance::mdoubles* temp = md_;
  md_ = NULL;
  return temp;
}
inline void Performance::set_allocated_md(::performance::mdoubles* md) {
  delete md_;
  md_ = md;
  if (md) {
    set_has_md();
  } else {
    clear_has_md();
  }
}

// required .performance.msfixed32s msf3 = 3;
inline bool Performance::has_msf3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Performance::set_has_msf3() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Performance::clear_has_msf3() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Performance::clear_msf3() {
  if (msf3_ != NULL) msf3_->::performance::msfixed32s::Clear();
  clear_has_msf3();
}
inline const ::performance::msfixed32s& Performance::msf3() const {
  return msf3_ != NULL ? *msf3_ : *default_instance_->msf3_;
}
inline ::performance::msfixed32s* Performance::mutable_msf3() {
  set_has_msf3();
  if (msf3_ == NULL) msf3_ = new ::performance::msfixed32s;
  return msf3_;
}
inline ::performance::msfixed32s* Performance::release_msf3() {
  clear_has_msf3();
  ::performance::msfixed32s* temp = msf3_;
  msf3_ = NULL;
  return temp;
}
inline void Performance::set_allocated_msf3(::performance::msfixed32s* msf3) {
  delete msf3_;
  msf3_ = msf3;
  if (msf3) {
    set_has_msf3();
  } else {
    clear_has_msf3();
  }
}

// required .performance.msfixed64s msf6 = 4;
inline bool Performance::has_msf6() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Performance::set_has_msf6() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Performance::clear_has_msf6() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Performance::clear_msf6() {
  if (msf6_ != NULL) msf6_->::performance::msfixed64s::Clear();
  clear_has_msf6();
}
inline const ::performance::msfixed64s& Performance::msf6() const {
  return msf6_ != NULL ? *msf6_ : *default_instance_->msf6_;
}
inline ::performance::msfixed64s* Performance::mutable_msf6() {
  set_has_msf6();
  if (msf6_ == NULL) msf6_ = new ::performance::msfixed64s;
  return msf6_;
}
inline ::performance::msfixed64s* Performance::release_msf6() {
  clear_has_msf6();
  ::performance::msfixed64s* temp = msf6_;
  msf6_ = NULL;
  return temp;
}
inline void Performance::set_allocated_msf6(::performance::msfixed64s* msf6) {
  delete msf6_;
  msf6_ = msf6;
  if (msf6) {
    set_has_msf6();
  } else {
    clear_has_msf6();
  }
}

// required .performance.mfixed32s mf3 = 5;
inline bool Performance::has_mf3() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Performance::set_has_mf3() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Performance::clear_has_mf3() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Performance::clear_mf3() {
  if (mf3_ != NULL) mf3_->::performance::mfixed32s::Clear();
  clear_has_mf3();
}
inline const ::performance::mfixed32s& Performance::mf3() const {
  return mf3_ != NULL ? *mf3_ : *default_instance_->mf3_;
}
inline ::performance::mfixed32s* Performance::mutable_mf3() {
  set_has_mf3();
  if (mf3_ == NULL) mf3_ = new ::performance::mfixed32s;
  return mf3_;
}
inline ::performance::mfixed32s* Performance::release_mf3() {
  clear_has_mf3();
  ::performance::mfixed32s* temp = mf3_;
  mf3_ = NULL;
  return temp;
}
inline void Performance::set_allocated_mf3(::performance::mfixed32s* mf3) {
  delete mf3_;
  mf3_ = mf3;
  if (mf3) {
    set_has_mf3();
  } else {
    clear_has_mf3();
  }
}

// required .performance.mfixed64s mf6 = 6;
inline bool Performance::has_mf6() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Performance::set_has_mf6() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Performance::clear_has_mf6() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Performance::clear_mf6() {
  if (mf6_ != NULL) mf6_->::performance::mfixed64s::Clear();
  clear_has_mf6();
}
inline const ::performance::mfixed64s& Performance::mf6() const {
  return mf6_ != NULL ? *mf6_ : *default_instance_->mf6_;
}
inline ::performance::mfixed64s* Performance::mutable_mf6() {
  set_has_mf6();
  if (mf6_ == NULL) mf6_ = new ::performance::mfixed64s;
  return mf6_;
}
inline ::performance::mfixed64s* Performance::release_mf6() {
  clear_has_mf6();
  ::performance::mfixed64s* temp = mf6_;
  mf6_ = NULL;
  return temp;
}
inline void Performance::set_allocated_mf6(::performance::mfixed64s* mf6) {
  delete mf6_;
  mf6_ = mf6;
  if (mf6) {
    set_has_mf6();
  } else {
    clear_has_mf6();
  }
}

// required .performance.mstrings mstr = 7;
inline bool Performance::has_mstr() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Performance::set_has_mstr() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Performance::clear_has_mstr() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Performance::clear_mstr() {
  if (mstr_ != NULL) mstr_->::performance::mstrings::Clear();
  clear_has_mstr();
}
inline const ::performance::mstrings& Performance::mstr() const {
  return mstr_ != NULL ? *mstr_ : *default_instance_->mstr_;
}
inline ::performance::mstrings* Performance::mutable_mstr() {
  set_has_mstr();
  if (mstr_ == NULL) mstr_ = new ::performance::mstrings;
  return mstr_;
}
inline ::performance::mstrings* Performance::release_mstr() {
  clear_has_mstr();
  ::performance::mstrings* temp = mstr_;
  mstr_ = NULL;
  return temp;
}
inline void Performance::set_allocated_mstr(::performance::mstrings* mstr) {
  delete mstr_;
  mstr_ = mstr;
  if (mstr) {
    set_has_mstr();
  } else {
    clear_has_mstr();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace performance

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Performance_2eproto__INCLUDED
