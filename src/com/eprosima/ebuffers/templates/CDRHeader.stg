group CDRHeader;

main(ctx, blocks) ::= <<
#ifndef _$ctx.filename$CDR_H_
#define _$ctx.filename$CDR_H_

#include "$ctx.filename$.h"
#include "cpp/Cdr.h"

/*!
 * @brief This class offers an interface to serialize/deserialize the defined types in the user's IDL file.
 */
class user_cpp_DllExport $ctx.filename$CDR : public eProsima::CDR
{ 
public:
    $ctx.filename$CDR(eProsima::CDRBuffer &cdrBuffer);
    
    $blocks; separator="\n"$
};

#endif // _$ctx.filename$CDR_H_
>>

module(name, definition_list) ::= <<
$definition_list$
>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$
>>

membered_type(ctx, mtype) ::=<<
/*!
 * @brief This function serialize type $mtype.scopedname$.
 */
inline $ctx.filename$CDR& operator<<(const $mtype.scopedname$ &x){return serialize(x);}

/*!
 * @brief This function serialize type $mtype.scopedname$.
 */
$ctx.filename$CDR& serialize(const $mtype.scopedname$ &x);

/*!
 * @brief This function deserialize type $mtype.scopedname$.
 */
inline $ctx.filename$CDR& operator$ctx.sersym$($mtype.scopedname$ &x){return deserialize(x);}

/*!
 * @brief This function deserialize type $mtype.scopedname$.
 */
$ctx.filename$CDR& deserialize($mtype.scopedname$ &x);
>>

struct_type(ctx, struct) ::= <<
$membered_type(ctx=ctx, mtype=struct)$
>>

union_type(ctx, union) ::= <<
$membered_type(ctx=ctx, mtype=union)$
>>

enum_type(ctx, enum) ::= <<>>