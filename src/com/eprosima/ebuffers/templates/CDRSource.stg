group CDRSource;

main(ctx, blocks) ::= <<
#include "$ctx.filename$CDR.h"

$ctx.filename$CDR::$ctx.filename$CDR(eProsima::CDRBuffer &cdrBuffer) : CDR(cdrBuffer)
{
}

$blocks; separator="\n"$
>>

module(name, definition_list) ::= <<
$definition_list$
>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$
>>

struct_type(ctx, struct) ::= <<
bool $ctx.filename$CDR::serialize(const $struct.scopedname$ &x)
{
    bool returnedValue = true;
    
    $struct.members:{$member_serialization(it)$}; separator="\n"$
    
    return returnedValue;
}

bool $ctx.filename$CDR::deserialize($struct.scopedname$ &x)
{
    bool returnedValue = true;
    
    $struct.members:{$member_deserialization(it)$}; separator="\n"$
    
    return returnedValue;
}
>>

member_serialization(member) ::= <<
$if(member.typecode.maxsize)$
if(x.$member.name$().$sizeFunction.(member.typecode.striptypename)$ <= $member.typecode.maxsize$)
    
$endif$returnedValue &= $basicCDRTypes.(member.typecode.striptypename)$serialize(x.$member.name$());
$if(member.typecode.maxsize)$
else
    return false; //Change
$endif$
>>

member_deserialization(member) ::= <<
returnedValue &= $basicCDRTypes.(member.typecode.striptypename)$deserialize(x.$member.name$());
>>

union_type(ctx, union) ::= <<
bool $ctx.filename$CDR::serialize(const $union.scopedname$ &x)
{
    bool returnedValue = true;
    
    if(CDR::serialize(x._d()))
    {
        switch(x._d())
        {
            $union.members:{$unionmember_case_selection_se(it)$}; separator="\n"$
        }
    }
    
    return returnedValue;
}

bool $ctx.filename$CDR::deserialize($union.scopedname$ &x)
{
    bool returnedValue = true;
    
    if(CDR::deserialize(x._d()))
    {
        switch(x._d())
        {
            $union.members:{$unionmember_case_selection_de(it)$}; separator="\n"$
        }
    }
    
    return returnedValue;
}
>>

unionmember_case_selection_se(member) ::= <<
$member.labels:{case $it$:}; separator="\n"$
$if(member.default)$
default:$\n$
$endif$
$member_serialization(it)$
break;
>>

unionmember_case_selection_de(member) ::= <<
$member.labels:{case $it$:}; separator="\n"$
$if(member.default)$
default:$\n$
$endif$
$member_deserialization(it)$
break;
>>

enum_type(ctx, enum) ::= <<>>

basicCDRTypes ::= [
        "float":"CDR::",
        "double":"CDR::",
        "long double":"CDR::",
        "int16_t":"CDR::",
        "int32_t":"CDR::",
        "int64_t":"CDR::",
        "uint16_t":"CDR::",
        "uint32_t":"CDR::",
        "uint64_t":"CDR::",
        "char":"CDR::",
        "wchar_t":"CDR::",
        "bool":"CDR::",
        "uint8_t":"CDR::",
        "std::array":"CDR::",
        "std::vector":"CDR::",
        "std::string":"CDR::",
        "std::wstring":"CDR::",
        default: // not basic type.
]

sizeFunction ::= [
        "std::vector":"size()",
        "std::string":"length()",
        "std::wstring":"length()",
        default: // not basic type.
]