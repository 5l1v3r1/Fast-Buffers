group TypesSource;

main(ctx, definitions) ::= <<
$fileHeader(file=[ctx.filename, ".cpp"], description=["This source file contains the definition of the described types in the IDL file."])$

#include "$ctx.filename$.h"

#include "fastcdr/Cdr.h"
#include "fastcdr/exceptions/BadParamException.h"

#include <utility>

$definitions; separator="\n"$
>>

module(ctx, module, definition_list) ::= <<
$definition_list$
>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$

>>

interface(ctx, interface, export_list) ::= <<
$export_list$
>>

export_list(exports) ::= <<
$exports; separator="\n"$

>>

exception(ctx, exception) ::= <<>>

operation(ctx, operation, param_list) ::= <<>>

param_list(parameters) ::= <<>>

param(parameter) ::= <<>>

type_declarator(ctx, typedefs) ::= <<>>

struct_type(ctx, struct) ::= <<
$struct.scopedname$::$struct.name$()
{
    $struct.members:{$member_default_init(it)$}; separator="\n"$
}

$struct.scopedname$::~$struct.name$()
{
}

$struct.scopedname$::$struct.name$(const $struct.name$ &x)
{
    $struct.members:{m_$it.name$ = x.m_$it.name$;}; separator="\n"$
}

$struct.scopedname$::$struct.name$($struct.name$ &&x)
{
    $struct.members:{$structmember_move(it)$}; separator="\n"$
}

$struct.scopedname$& $struct.scopedname$::operator=(const $struct.name$ &x)
{
    $struct.members:{m_$it.name$ = x.m_$it.name$;}; separator="\n"$
    
    return *this;
}

$struct.scopedname$& $struct.scopedname$::operator=($struct.name$ &&x)
{
    $struct.members:{$structmember_move(it)$}; separator="\n"$
    
    return *this;
}

size_t $struct.scopedname$::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t current_align = current_alignment;
            
    $struct.members : { member |$max_serialized_size(member=member, var="current_align")$}; separator="\n"$

    return current_align;
}

void $struct.scopedname$::serialize(eprosima::Cdr &cdr) const
{
    $struct.members : { member |cdr << m_$member.name$;}; separator="\n"$
}

void $struct.scopedname$::deserialize(eprosima::Cdr &cdr)
{
    $struct.members : { member |cdr \>> m_$member.name$;}; separator="\n"$
}
>>

union_type(ctx, union) ::= <<
$union.scopedname$::$union.name$()
{
    m__d = $union.defaultvalue$;
    $union.members:{$member_default_init(it)$}; separator="\n"$
}

$union.scopedname$::~$union.name$()
{
}

$union.scopedname$::$union.name$(const $union.name$ &x)
{
    m__d = x.m__d;
    
    switch(m__d)
    {
        $union.members:{$unionmember_copy(it)$}; separator="\n"$
    }
}

$union.scopedname$::$union.name$($union.name$ &&x)
{
    m__d = x.m__d;
    
    switch(m__d)
    {
        $union.members:{$unionmember_move(it)$}; separator="\n"$
    }
}

$union.scopedname$& $union.scopedname$::operator=(const $union.name$ &x)
{
    m__d = x.m__d;
    
    switch(m__d)
    {
        $union.members:{$unionmember_copy(it)$}; separator="\n"$
    }
    
    return *this;
}

$union.scopedname$& $union.scopedname$::operator=($union.name$ &&x)
{
    m__d = x.m__d;
    
    switch(m__d)
    {
        $union.members:{$unionmember_move(it)$}; separator="\n"$
    }
    
    return *this;
}

void $union.scopedname$::_d($union.discriminator.typename$ __d)
{
    bool b = false;
    
    switch(m__d)
    {
        $union.members:{$unionmember_discriminator_case(member=it, totallabels=union.totallabels)$}; separator="\n"$
    }
    
    if(!b) throw eprosima::BadParamException("Discriminator doesn't correspond with the selected union member");
    
    m__d = __d;
}

$union.discriminator.typename$ $union.scopedname$::_d() const
{
    return m__d;
}

$union.discriminator.typename$& $union.scopedname$::_d()
{
    return m__d;
}

$union.members:{$public_unionmember_declaration(class=union.scopedname, member=it, defaultvalue=union.defaultvalue, totallabels=union.totallabels)$}; separator="\n"$
>>

public_unionmember_declaration(class, member, totallabels, defaultvalue) ::= <<
$if(member.typecode.primitive)$
void $class$::$member.name$($member.typecode.typename$ _$member.name$)
{
    m_$member.name$ = _$member.name$;
    $unionmember_set_discriminator(member)$
}

$member.typecode.typename$ $class$::$member.name$() const
{
    $unionmember_check_case_list(member=member, totallabels=totallabels)$
    
    return m_$member.name$;
}

$member.typecode.typename$& $class$::$member.name$()
{
    $unionmember_check_case_list(member=member, totallabels=totallabels)$
    
    return m_$member.name$;
}
$else$
void $class$::$member.name$(const $member.typecode.typename$ &_$member.name$)
{
    m_$member.name$ = _$member.name$;
    $unionmember_set_discriminator(member)$
}

void $class$::$member.name$($member.typecode.typename$ &&_$member.name$)
{
    m_$member.name$ = std::move(_$member.name$);
    $unionmember_set_discriminator(member)$
}

const $member.typecode.typename$& $class$::$member.name$() const
{
    $unionmember_check_case_list(member=member, totallabels=totallabels)$
    
    return m_$member.name$;
}

$member.typecode.typename$& $class$::$member.name$()
{
    $unionmember_check_case_list(member=member, totallabels=totallabels)$
    
    return m_$member.name$;
}
$endif$
>>

member_default_init(member) ::= <<
$if(member.typecode.primitive)$
m_$member.name$ = $member.typecode.initialValue$;
$endif$
>>

structmember_move(member) ::= <<
$if(member.typecode.primitive)$
m_$member.name$ = x.m_$member.name$;
$else$
m_$member.name$ = std::move(x.m_$member.name$);
$endif$
>>

unionmember_discriminator_case(member, totallabels) ::= <<
$if(member.default)$
default:
b = true;
switch(__d)
{
    $totallabels:{case $it$:}; separator="\n"$
    b = false;
    break;
}
break;
$else$
$member.labels:{case $it$:}; separator="\n"$
switch(__d)
{
    $member.labels:{case $it$:}; separator="\n"$
    b = true;
    break;
}
break;
$endif$
>>

unionmember_copy(member) ::= <<
$member.labels:{case $it$:}; separator="\n"$
$if(member.default)$
default:$\n$
$endif$
m_$member.name$ = x.m_$member.name$;
break;
>>

unionmember_move(member) ::= <<
$member.labels:{case $it$:}; separator="\n"$
$if(member.default)$
default:$\n$
$endif$
$if(member.typecode.primitive)$
m_$member.name$ = x.m_$member.name$;
$else$
m_$member.name$ = std::move(x.m_$member.name$);
$endif$
break;
>>

unionmember_set_discriminator(member) ::= <<
$if(member.default)$
m__d = $defaultvalue$;
$else$
m__d = $first(member.labels)$;
$endif$
>>

unionmember_check_case_list(member, totallabels) ::= <<
$if(member.default)$
bool b = true;
    
switch(m__d)
{
    $totallabels:{case $it$:}; separator="\n"$
    b = false;
    break;
}
$else$
bool b = false;
    
switch(m__d)
{
    $member.labels:{case $it$:}; separator="\n"$
    b = true;
    break;
}
$endif$
    
if(!b) throw eprosima::BadParamException("This member is not been selected");
>>

enum_type(ctx, enum) ::= <<>>

/***** Utils *****/

// TODO Todos los tipos. MEJORAR. size of 1 no deberia generar alignment.
max_serialized_size(member, var) ::= <<
$if(member.typecode.primitive)$
$if(member.typecode.isType_d)$
$var$ += $member.typecode.maxsize$;
$else$
$var$ += $member.typecode.size$ + eprosima::Cdr::alignment($var$, $member.typecode.size$);
$endif$
$else$
$var$ += $member.typecode.scopedname$::getMaxCdrSerializedSize($var$);
$endif$
>>
