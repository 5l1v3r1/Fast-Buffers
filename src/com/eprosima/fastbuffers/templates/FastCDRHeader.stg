group CDRHeader;

main(ctx, blocks) ::= <<
#ifndef _$ctx.filename$SER_H_
#define _$ctx.filename$SER_H_

#include "$ctx.filename$.h"
#include "cpp/FastCdr.h"

/*!
 * @brief This class offers an interface to serialize/deserialize the defined types in the user's IDL file  using a eProsima::FastBuffer.
 * @ingroup $ctx.trimfilename$
 */
class user_cpp_DllExport $ctx.filename$Ser : public eProsima::FastCdr
{ 
public:
    /*!
     * @brief This constructor creates a $ctx.filename$Ser object that could serialize/deserialize
     * the assigned buffer.
     *
     * @param buffer A reference to the buffer that contains or will contain the CDR representation.
     */
    $ctx.filename$Ser(eProsima::FastBuffer &buffer);
    
    $blocks; separator="\n"$
};

#endif // _$ctx.filename$SER_H_
>>

module(name, definition_list) ::= <<
$definition_list$
>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$
>>

membered_type(ctx, mtype) ::=<<
/*!
 * @brief This function serialize a type $mtype.scopedname$.
 * @param x Reference to a  that will be serialized in the buffer.
 * @return Reference to the $ctx.filename$Ser object.
 * @exception NotEnoughMemoryException This exception is thrown trying to serialize in a position that exceed the internal memory size.
 * @exception BadParamException This exception is thrown trying to serialize in an invalid value.
 */
inline $ctx.filename$Ser& operator<<(const $mtype.scopedname$ &x){return serialize(x);}

/*!
 * @brief This function serialize a type $mtype.scopedname$.
 * @param x Reference to a  that will be serialized in the buffer.
 * @return Reference to the $ctx.filename$Ser object.
 * @exception NotEnoughMemoryException This exception is thrown trying to serialize in a position that exceed the internal memory size.
 * @exception BadParamException This exception is thrown trying to serialize in an invalid value.
 */
$ctx.filename$Ser& serialize(const $mtype.scopedname$ &x);

/*!
 * @brief This function deserialize a type $mtype.scopedname$.
 * @param x Reference to the variable that will store the $mtype.scopedname$ read from the buffer.
 * @return Reference to the $ctx.filename$Ser object.
 * @exception NotEnoughMemoryException This exception is thrown trying to deserialize in a position that exceed the internal memory size.
 * @exception BadParamException This exception is thrown trying to deserialize in an invalid value.
 */
inline $ctx.filename$Ser& operator$ctx.sersym$($mtype.scopedname$ &x){return deserialize(x);}

/*!
 * @brief This function deserialize a type $mtype.scopedname$.
 * @param x Reference to the variable that will store the $mtype.scopedname$ read from the buffer.
 * @return Reference to the $ctx.filename$Ser object.
 * @exception NotEnoughMemoryException This exception is thrown trying to deserialize in a position that exceed the internal memory size.
 * @exception BadParamException This exception is thrown trying to deserialize in an invalid value.
 */
$ctx.filename$Ser& deserialize($mtype.scopedname$ &x);
>>

struct_type(ctx, struct) ::= <<
$membered_type(ctx=ctx, mtype=struct)$
>>

union_type(ctx, union) ::= <<
$membered_type(ctx=ctx, mtype=union)$
>>

enum_type(ctx, enum) ::= <<>>