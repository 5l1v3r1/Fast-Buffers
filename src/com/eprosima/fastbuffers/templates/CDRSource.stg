group CDRSource;

main(ctx, blocks) ::= <<
#include "$ctx.filename$Ser.h"
#include "cpp/exceptions/BadParamException.h"

$ctx.filename$Ser::$ctx.filename$Ser(eProsima::FastBuffer &buffer) : Cdr(buffer)
{
}

$blocks; separator="\n"$
>>

module(name, definition_list) ::= <<
$definition_list$
>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$
>>

struct_type(ctx, struct) ::= <<
$ctx.filename$Ser& $ctx.filename$Ser::serialize(const $struct.scopedname$ &x)
{
    $struct.members:{$member_serialization(it)$}; separator="\n"$
    
    return *this;
}

$ctx.filename$Ser& $ctx.filename$Ser::deserialize($struct.scopedname$ &x)
{  
    $struct.members:{$member_deserialization(it)$}; separator="\n"$
    
    return *this;
}
>>

member_serialization(member) ::= <<
$if(member.typecode.maxsize)$
if(x.$member.name$().$sizeFunction.(member.typecode.striptypename)$ <= $member.typecode.maxsize$)
    
$endif$$basicCDRTypes.(member.typecode.striptypename)$serialize(x.$member.name$());
$if(member.typecode.maxsize)$
else
    throw eProsima::BadParamException(std::string("The maximum length was exceeded"));
$endif$
>>

member_serialization_fast(member) ::= <<
$if(member.typecode.maxsize)$
if(x.$member.name$().$sizeFunction.(member.typecode.striptypename)$ <= $member.typecode.maxsize$)
    
$endif$$basicCDRTypes.(member.typecode.striptypename)$serializeFast(x.$member.name$());
$if(member.typecode.maxsize)$
else
    throw eProsima::BadParamException(std::string("The maximum length was exceeded"));
$endif$
>>

member_deserialization(member) ::= <<
$basicCDRTypes.(member.typecode.striptypename)$deserialize(x.$member.name$());
>>

member_deserialization_fast(member) ::= <<
$basicCDRTypes.(member.typecode.striptypename)$deserializeFast(x.$member.name$());
>>

union_type(ctx, union) ::= <<
$ctx.filename$Ser& $ctx.filename$Ser::serialize(const $union.scopedname$ &x)
{ 
    Cdr::serialize(x._d());
    
    switch(x._d())
    {
        $union.members:{$unionmember_case_selection_se(it)$}; separator="\n"$
    }
    
    return *this;
}

$ctx.filename$Ser& $ctx.filename$Ser::deserialize($union.scopedname$ &x)
{
    Cdr::deserialize(x._d());
    switch(x._d())
    {
        $union.members:{$unionmember_case_selection_de(it)$}; separator="\n"$
    }
    
    return *this;
}
>>

unionmember_case_selection_se(member) ::= <<
$member.labels:{case $it$:}; separator="\n"$
$if(member.default)$
default:$\n$
$endif$
$member_serialization(it)$
break;
>>

unionmember_case_selection_de(member) ::= <<
$member.labels:{case $it$:}; separator="\n"$
$if(member.default)$
default:$\n$
$endif$
$member_deserialization(it)$
break;
>>

enum_type(ctx, enum) ::= <<>>

basicCDRTypes ::= [
        "float":"Cdr::",
        "double":"Cdr::",
        "long double":"Cdr::",
        "int16_t":"Cdr::",
        "int32_t":"Cdr::",
        "int64_t":"Cdr::",
        "uint16_t":"Cdr::",
        "uint32_t":"Cdr::",
        "uint64_t":"Cdr::",
        "char":"Cdr::",
        "wchar_t":"Cdr::",
        "bool":"Cdr::",
        "uint8_t":"Cdr::",
        "std::array":"Cdr::",
        "std::vector":"Cdr::",
        "std::string":"Cdr::",
        "std::wstring":"Cdr::",
        default: // not basic type.
]

sizeFunction ::= [
        "std::vector":"size()",
        "std::string":"length()",
        "std::wstring":"length()",
        default: // not basic type.
]