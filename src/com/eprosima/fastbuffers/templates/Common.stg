/*************************************************************************
 * Copyright (c) 2013 eProsima. All rights reserved.
 *
 * This copy of FastBuffers is licensed to you under the terms described in the
 * FAST_BUFFERS_LICENSE file included in this distribution.
 *
 *************************************************************************/

group Common;

fileHeader(file, description) ::= <<
/*************************************************************************
 * Copyright (c) 2013 eProsima. All rights reserved.
 *
 * This generated file is licensed to you under the terms described in the
 * FAST_BUFFERS_LICENSE file included in this Fast Buffers distribution.
 *
 *************************************************************************
 * 
 * @file $file$
 * $description$
 *
 * This file was generated by the tool fastbuffers.
 */
>>

// TODO De aqu√≠ para abajo, juntar con FastRPC que son lo mismo.

member_default_init(member) ::= <<
$if(member.typecode.primitive)$
m_$member.name$ = $member.typecode.initialValue$;
$endif$
>>

max_serialized_size(ctx, typecode, var) ::= <<
$if(typecode.primitive)$
$if(typecode.isType_d)$
$var$ += 4$if(ctx.cdr)$ + eprosima::fastcdr::Cdr::alignment($var$, 4)$endif$ + $typecode.maxsize$ + 1;
$else$
$var$ += $typecode.size$$if(ctx.cdr)$ + eprosima::fastcdr::Cdr::alignment($var$, $typecode.size$)$endif$;
$endif$
$else$
$if(typecode.isType_e)$
$var$ += 4$if(ctx.cdr)$ + eprosima::fastcdr::Cdr::alignment($var$, 4)$endif$;
$sequence_max_serialized_size(ctx=ctx, typecodeSeq=typecode, var=var, loopvar=ctx.newLoopVarName)$
$elseif(typecode.isType_f)$
$array_max_serialized_size(ctx=ctx, typecodeArr=typecode, var=var, loopvar=ctx.newLoopVarName)$
$else$
$var$ = $typecode.scopedname$::getMaxCdrSerializedSize($var$);
$endif$
$endif$
>>

sequence_max_serialized_size(ctx, typecodeSeq, var, loopvar) ::= <<
$if(typecodeSeq.contentTypeCode.primitive)$
$if(typecodeSeq.contentTypeCode.isType_d)$
for(size_t $loopvar$ = 0; $loopvar$ < $typecodeSeq.maxsize$; ++$loopvar$)
{
    $var$ += 4$if(ctx.cdr)$ + eprosima::fastcdr::Cdr::alignment($var$, 4)$endif$ + $typecodeSeq.contentTypeCode.maxsize$ + 1;
}
$else$
$var$ += ($typecodeSeq.maxsize$ * $typecodeSeq.contentTypeCode.size$)$if(ctx.cdr)$ + eprosima::fastcdr::Cdr::alignment($var$, $typecodeSeq.contentTypeCode.size$)$endif$;
$endif$
$else$
for(size_t $loopvar$ = 0; $loopvar$ < $typecodeSeq.maxsize$; ++$loopvar$)
{
$if(typecodeSeq.contentTypeCode.isType_e)$
    $var$ += 4$if(ctx.cdr)$ + eprosima::fastcdr::Cdr::alignment($var$, 4)$endif$;
    $sequence_max_serialized_size(ctx=ctx, typecodeSeq=typecodeSeq.contentTypeCode, var=var, loopvar=ctx.nextLoopVarName)$
$elseif(typecodeSeq.contentTypeCode.isType_f)$
$array_max_serialized_size(ctx=ctx, typecodeArr=typecodeSeq.contentTypeCode, var=var, loopvar=ctx.nextLoopVarName)$
$else$
    $var$ = $typecodeSeq.contentTypeCode.scopedname$::getMaxCdrSerializedSize($var$);
$endif$
}
$endif$
>>

array_max_serialized_size(ctx, typecodeArr, var, loopvar) ::= <<
$if(typecodeArr.contentTypeCode.primitive)$
$if(typecodeArr.contentTypeCode.isType_d)$
for(size_t $loopvar$ = 0; $loopvar$ < $typecodeArr.size$; ++$loopvar$)
{
    $var$ += 4$if(ctx.cdr)$ + eprosima::fastcdr::Cdr::alignment($var$, 4)$endif$ + $typecodeArr.contentTypeCode.maxsize$ + 1;
}
$else$
$var$ += ($typecodeArr.size$ * $typecodeArr.contentTypeCode.size$)$if(ctx.cdr)$ + eprosima::fastcdr::Cdr::alignment($var$, $typecodeArr.contentTypeCode.size$)$endif$;
$endif$
$else$
for(size_t $loopvar$ = 0; $loopvar$ < $typecodeArr.size$; ++$loopvar$)
{
$if(typecodeArr.contentTypeCode.isType_e)$
    $var$ += 4$if(ctx.cdr)$ + eprosima::fastcdr::Cdr::alignment($var$, 4)$endif$;
    $sequence_max_serialized_size(ctx=ctx, typecodeArr=typecodeArr.contentTypeCode, var=var, loopvar=ctx.nextLoopVarName)$
$elseif(typecodeArr.contentTypeCode.isType_f)$
$array_max_serialized_size(ctx=ctx, typecodeArr=typecodeArr.contentTypeCode, var=var, loopvar=ctx.nextLoopVarName)$
$else$
    $var$ = $typecodeArr.contentTypeCode.scopedname$::getMaxCdrSerializedSize($var$);
$endif$
}
$endif$
>>

object_serialization(ctx, object, preffix) ::= <<
$if(object.typecode.maxsize)$
if($preffix$$object.name$.$sizeFunction.(object.typecode.stType)$ <= $object.typecode.maxsize$)

$endif$scdr << $serializeCasting(typecode=object.typecode)$$preffix$$object.name$;
$if(object.typecode.maxsize)$
else
throw BadParamException(std::string("The maximum length was exceeded"));
$endif$
$endif$
>>

object_deserialization(ctx, object, preffix) ::= <<
dcdr \>> $deserializeCasting(typecode=object.typecode)$$preffix$$object.name$;
>>

serializeCasting(typecode) ::= <<
$if(typecode.isType_c)$
(uint32_t)
$endif$
>>

deserializeCasting(typecode) ::= <<
$if(typecode.isType_c)$
(uint32_t&)
$endif$
>>

sizeFunction ::= [
        "type_e":"size()",
        "type_d":"length()",
        "type_15":"length()",
        default: // not basic type.
]
